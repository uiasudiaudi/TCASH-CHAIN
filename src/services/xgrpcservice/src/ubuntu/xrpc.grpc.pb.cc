// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: xrpc.proto

#include "xrpc.pb.h"
#include "xrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tcash {

static const char* xrpc_service_method_names[] = {
  "/tcash.xrpc_service/call",
  "/tcash.xrpc_service/table_stream",
};

std::unique_ptr< xrpc_service::Stub> xrpc_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< xrpc_service::Stub> stub(new xrpc_service::Stub(channel));
  return stub;
}

xrpc_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_call_(xrpc_service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_table_stream_(xrpc_service_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status xrpc_service::Stub::call(::grpc::ClientContext* context, const ::tcash::xrpc_request& request, ::tcash::xrpc_reply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_call_, context, request, response);
}

void xrpc_service::Stub::experimental_async::call(::grpc::ClientContext* context, const ::tcash::xrpc_request* request, ::tcash::xrpc_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_call_, context, request, response, std::move(f));
}

void xrpc_service::Stub::experimental_async::call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tcash::xrpc_reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_call_, context, request, response, std::move(f));
}

void xrpc_service::Stub::experimental_async::call(::grpc::ClientContext* context, const ::tcash::xrpc_request* request, ::tcash::xrpc_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_call_, context, request, response, reactor);
}

void xrpc_service::Stub::experimental_async::call(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tcash::xrpc_reply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_call_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tcash::xrpc_reply>* xrpc_service::Stub::AsynccallRaw(::grpc::ClientContext* context, const ::tcash::xrpc_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tcash::xrpc_reply>::Create(channel_.get(), cq, rpcmethod_call_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tcash::xrpc_reply>* xrpc_service::Stub::PrepareAsynccallRaw(::grpc::ClientContext* context, const ::tcash::xrpc_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tcash::xrpc_reply>::Create(channel_.get(), cq, rpcmethod_call_, context, request, false);
}

::grpc::ClientReader< ::tcash::xrpc_reply>* xrpc_service::Stub::table_streamRaw(::grpc::ClientContext* context, const ::tcash::xrpc_request& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tcash::xrpc_reply>::Create(channel_.get(), rpcmethod_table_stream_, context, request);
}

void xrpc_service::Stub::experimental_async::table_stream(::grpc::ClientContext* context, ::tcash::xrpc_request* request, ::grpc::experimental::ClientReadReactor< ::tcash::xrpc_reply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tcash::xrpc_reply>::Create(stub_->channel_.get(), stub_->rpcmethod_table_stream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tcash::xrpc_reply>* xrpc_service::Stub::Asynctable_streamRaw(::grpc::ClientContext* context, const ::tcash::xrpc_request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tcash::xrpc_reply>::Create(channel_.get(), cq, rpcmethod_table_stream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tcash::xrpc_reply>* xrpc_service::Stub::PrepareAsynctable_streamRaw(::grpc::ClientContext* context, const ::tcash::xrpc_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tcash::xrpc_reply>::Create(channel_.get(), cq, rpcmethod_table_stream_, context, request, false, nullptr);
}

xrpc_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      xrpc_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< xrpc_service::Service, ::tcash::xrpc_request, ::tcash::xrpc_reply>(
          [](xrpc_service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tcash::xrpc_request* req,
             ::tcash::xrpc_reply* resp) {
               return service->call(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      xrpc_service_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< xrpc_service::Service, ::tcash::xrpc_request, ::tcash::xrpc_reply>(
          [](xrpc_service::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tcash::xrpc_request* req,
             ::grpc_impl::ServerWriter<::tcash::xrpc_reply>* writer) {
               return service->table_stream(ctx, req, writer);
             }, this)));
}

xrpc_service::Service::~Service() {
}

::grpc::Status xrpc_service::Service::call(::grpc::ServerContext* context, const ::tcash::xrpc_request* request, ::tcash::xrpc_reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status xrpc_service::Service::table_stream(::grpc::ServerContext* context, const ::tcash::xrpc_request* request, ::grpc::ServerWriter< ::tcash::xrpc_reply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tcash

