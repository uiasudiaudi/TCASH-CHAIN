// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto_precompile.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct PrecompileOutput {
    // message fields
    pub exit_status: u32,
    pub cost: u64,
    pub output: ::std::vec::Vec<u8>,
    pub logs: ::protobuf::RepeatedField<super::proto_basic::ResultLog>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrecompileOutput {
    fn default() -> &'a PrecompileOutput {
        <PrecompileOutput as ::protobuf::Message>::default_instance()
    }
}

impl PrecompileOutput {
    pub fn new() -> PrecompileOutput {
        ::std::default::Default::default()
    }

    // uint32 exit_status = 1;


    pub fn get_exit_status(&self) -> u32 {
        self.exit_status
    }
    pub fn clear_exit_status(&mut self) {
        self.exit_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit_status(&mut self, v: u32) {
        self.exit_status = v;
    }

    // uint64 cost = 2;


    pub fn get_cost(&self) -> u64 {
        self.cost
    }
    pub fn clear_cost(&mut self) {
        self.cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_cost(&mut self, v: u64) {
        self.cost = v;
    }

    // bytes output = 3;


    pub fn get_output(&self) -> &[u8] {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::vec::Vec<u8>) {
        self.output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.output, ::std::vec::Vec::new())
    }

    // repeated .tcash.evm_engine.basic.ResultLog logs = 4;


    pub fn get_logs(&self) -> &[super::proto_basic::ResultLog] {
        &self.logs
    }
    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<super::proto_basic::ResultLog>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<super::proto_basic::ResultLog> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<super::proto_basic::ResultLog> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PrecompileOutput {
    fn is_initialized(&self) -> bool {
        for v in &self.logs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.exit_status = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cost = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.output)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.logs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.exit_status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.exit_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cost != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cost, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.output);
        }
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.exit_status != 0 {
            os.write_uint32(1, self.exit_status)?;
        }
        if self.cost != 0 {
            os.write_uint64(2, self.cost)?;
        }
        if !self.output.is_empty() {
            os.write_bytes(3, &self.output)?;
        }
        for v in &self.logs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrecompileOutput {
        PrecompileOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "exit_status",
                |m: &PrecompileOutput| { &m.exit_status },
                |m: &mut PrecompileOutput| { &mut m.exit_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "cost",
                |m: &PrecompileOutput| { &m.cost },
                |m: &mut PrecompileOutput| { &mut m.cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "output",
                |m: &PrecompileOutput| { &m.output },
                |m: &mut PrecompileOutput| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::ResultLog>>(
                "logs",
                |m: &PrecompileOutput| { &m.logs },
                |m: &mut PrecompileOutput| { &mut m.logs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PrecompileOutput>(
                "PrecompileOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PrecompileOutput {
        static instance: ::protobuf::rt::LazyV2<PrecompileOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrecompileOutput::new)
    }
}

impl ::protobuf::Clear for PrecompileOutput {
    fn clear(&mut self) {
        self.exit_status = 0;
        self.cost = 0;
        self.output.clear();
        self.logs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PrecompileOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrecompileOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PrecompileFailure {
    // message fields
    pub fail_status: u32,
    pub minor_status: u32,
    pub output: ::std::vec::Vec<u8>,
    pub cost: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrecompileFailure {
    fn default() -> &'a PrecompileFailure {
        <PrecompileFailure as ::protobuf::Message>::default_instance()
    }
}

impl PrecompileFailure {
    pub fn new() -> PrecompileFailure {
        ::std::default::Default::default()
    }

    // uint32 fail_status = 1;


    pub fn get_fail_status(&self) -> u32 {
        self.fail_status
    }
    pub fn clear_fail_status(&mut self) {
        self.fail_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_fail_status(&mut self, v: u32) {
        self.fail_status = v;
    }

    // uint32 minor_status = 2;


    pub fn get_minor_status(&self) -> u32 {
        self.minor_status
    }
    pub fn clear_minor_status(&mut self) {
        self.minor_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_minor_status(&mut self, v: u32) {
        self.minor_status = v;
    }

    // bytes output = 3;


    pub fn get_output(&self) -> &[u8] {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::vec::Vec<u8>) {
        self.output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.output, ::std::vec::Vec::new())
    }

    // uint64 cost = 4;


    pub fn get_cost(&self) -> u64 {
        self.cost
    }
    pub fn clear_cost(&mut self) {
        self.cost = 0;
    }

    // Param is passed by value, moved
    pub fn set_cost(&mut self, v: u64) {
        self.cost = v;
    }
}

impl ::protobuf::Message for PrecompileFailure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fail_status = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minor_status = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.output)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cost = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fail_status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fail_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minor_status != 0 {
            my_size += ::protobuf::rt::value_size(2, self.minor_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.output);
        }
        if self.cost != 0 {
            my_size += ::protobuf::rt::value_size(4, self.cost, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fail_status != 0 {
            os.write_uint32(1, self.fail_status)?;
        }
        if self.minor_status != 0 {
            os.write_uint32(2, self.minor_status)?;
        }
        if !self.output.is_empty() {
            os.write_bytes(3, &self.output)?;
        }
        if self.cost != 0 {
            os.write_uint64(4, self.cost)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrecompileFailure {
        PrecompileFailure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fail_status",
                |m: &PrecompileFailure| { &m.fail_status },
                |m: &mut PrecompileFailure| { &mut m.fail_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minor_status",
                |m: &PrecompileFailure| { &m.minor_status },
                |m: &mut PrecompileFailure| { &mut m.minor_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "output",
                |m: &PrecompileFailure| { &m.output },
                |m: &mut PrecompileFailure| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "cost",
                |m: &PrecompileFailure| { &m.cost },
                |m: &mut PrecompileFailure| { &mut m.cost },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PrecompileFailure>(
                "PrecompileFailure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PrecompileFailure {
        static instance: ::protobuf::rt::LazyV2<PrecompileFailure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrecompileFailure::new)
    }
}

impl ::protobuf::Clear for PrecompileFailure {
    fn clear(&mut self) {
        self.fail_status = 0;
        self.minor_status = 0;
        self.output.clear();
        self.cost = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PrecompileFailure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrecompileFailure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractContext {
    // message fields
    pub address: ::protobuf::SingularPtrField<super::proto_basic::ProtoAddress>,
    pub caller: ::protobuf::SingularPtrField<super::proto_basic::ProtoAddress>,
    pub apparent_value: ::protobuf::SingularPtrField<super::proto_basic::WeiU256>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContractContext {
    fn default() -> &'a ContractContext {
        <ContractContext as ::protobuf::Message>::default_instance()
    }
}

impl ContractContext {
    pub fn new() -> ContractContext {
        ::std::default::Default::default()
    }

    // .tcash.evm_engine.basic.ProtoAddress address = 1;


    pub fn get_address(&self) -> &super::proto_basic::ProtoAddress {
        self.address.as_ref().unwrap_or_else(|| <super::proto_basic::ProtoAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::proto_basic::ProtoAddress) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::proto_basic::ProtoAddress {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::proto_basic::ProtoAddress {
        self.address.take().unwrap_or_else(|| super::proto_basic::ProtoAddress::new())
    }

    // .tcash.evm_engine.basic.ProtoAddress caller = 2;


    pub fn get_caller(&self) -> &super::proto_basic::ProtoAddress {
        self.caller.as_ref().unwrap_or_else(|| <super::proto_basic::ProtoAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_caller(&mut self) {
        self.caller.clear();
    }

    pub fn has_caller(&self) -> bool {
        self.caller.is_some()
    }

    // Param is passed by value, moved
    pub fn set_caller(&mut self, v: super::proto_basic::ProtoAddress) {
        self.caller = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_caller(&mut self) -> &mut super::proto_basic::ProtoAddress {
        if self.caller.is_none() {
            self.caller.set_default();
        }
        self.caller.as_mut().unwrap()
    }

    // Take field
    pub fn take_caller(&mut self) -> super::proto_basic::ProtoAddress {
        self.caller.take().unwrap_or_else(|| super::proto_basic::ProtoAddress::new())
    }

    // .tcash.evm_engine.basic.WeiU256 apparent_value = 3;


    pub fn get_apparent_value(&self) -> &super::proto_basic::WeiU256 {
        self.apparent_value.as_ref().unwrap_or_else(|| <super::proto_basic::WeiU256 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_apparent_value(&mut self) {
        self.apparent_value.clear();
    }

    pub fn has_apparent_value(&self) -> bool {
        self.apparent_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apparent_value(&mut self, v: super::proto_basic::WeiU256) {
        self.apparent_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_apparent_value(&mut self) -> &mut super::proto_basic::WeiU256 {
        if self.apparent_value.is_none() {
            self.apparent_value.set_default();
        }
        self.apparent_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_apparent_value(&mut self) -> super::proto_basic::WeiU256 {
        self.apparent_value.take().unwrap_or_else(|| super::proto_basic::WeiU256::new())
    }
}

impl ::protobuf::Message for ContractContext {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.caller {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.apparent_value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.caller)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.apparent_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.caller.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.apparent_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.caller.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.apparent_value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractContext {
        ContractContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::ProtoAddress>>(
                "address",
                |m: &ContractContext| { &m.address },
                |m: &mut ContractContext| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::ProtoAddress>>(
                "caller",
                |m: &ContractContext| { &m.caller },
                |m: &mut ContractContext| { &mut m.caller },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::WeiU256>>(
                "apparent_value",
                |m: &ContractContext| { &m.apparent_value },
                |m: &mut ContractContext| { &mut m.apparent_value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContractContext>(
                "ContractContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContractContext {
        static instance: ::protobuf::rt::LazyV2<ContractContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContractContext::new)
    }
}

impl ::protobuf::Clear for ContractContext {
    fn clear(&mut self) {
        self.address.clear();
        self.caller.clear();
        self.apparent_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContractBridgeArgs {
    // message fields
    pub contract_address: ::protobuf::SingularPtrField<super::proto_basic::ProtoAddress>,
    pub input: ::std::vec::Vec<u8>,
    pub target_gas: u64,
    pub context: ::protobuf::SingularPtrField<ContractContext>,
    pub is_static: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContractBridgeArgs {
    fn default() -> &'a ContractBridgeArgs {
        <ContractBridgeArgs as ::protobuf::Message>::default_instance()
    }
}

impl ContractBridgeArgs {
    pub fn new() -> ContractBridgeArgs {
        ::std::default::Default::default()
    }

    // .tcash.evm_engine.basic.ProtoAddress contract_address = 1;


    pub fn get_contract_address(&self) -> &super::proto_basic::ProtoAddress {
        self.contract_address.as_ref().unwrap_or_else(|| <super::proto_basic::ProtoAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_contract_address(&mut self) {
        self.contract_address.clear();
    }

    pub fn has_contract_address(&self) -> bool {
        self.contract_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contract_address(&mut self, v: super::proto_basic::ProtoAddress) {
        self.contract_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_address(&mut self) -> &mut super::proto_basic::ProtoAddress {
        if self.contract_address.is_none() {
            self.contract_address.set_default();
        }
        self.contract_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_contract_address(&mut self) -> super::proto_basic::ProtoAddress {
        self.contract_address.take().unwrap_or_else(|| super::proto_basic::ProtoAddress::new())
    }

    // bytes input = 2;


    pub fn get_input(&self) -> &[u8] {
        &self.input
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::vec::Vec<u8>) {
        self.input = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.input
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.input, ::std::vec::Vec::new())
    }

    // uint64 target_gas = 3;


    pub fn get_target_gas(&self) -> u64 {
        self.target_gas
    }
    pub fn clear_target_gas(&mut self) {
        self.target_gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_gas(&mut self, v: u64) {
        self.target_gas = v;
    }

    // .tcash.evm_engine.precompile.ContractContext context = 4;


    pub fn get_context(&self) -> &ContractContext {
        self.context.as_ref().unwrap_or_else(|| <ContractContext as ::protobuf::Message>::default_instance())
    }
    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: ContractContext) {
        self.context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut ContractContext {
        if self.context.is_none() {
            self.context.set_default();
        }
        self.context.as_mut().unwrap()
    }

    // Take field
    pub fn take_context(&mut self) -> ContractContext {
        self.context.take().unwrap_or_else(|| ContractContext::new())
    }

    // bool is_static = 5;


    pub fn get_is_static(&self) -> bool {
        self.is_static
    }
    pub fn clear_is_static(&mut self) {
        self.is_static = false;
    }

    // Param is passed by value, moved
    pub fn set_is_static(&mut self, v: bool) {
        self.is_static = v;
    }
}

impl ::protobuf::Message for ContractBridgeArgs {
    fn is_initialized(&self) -> bool {
        for v in &self.contract_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.context {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contract_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.input)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target_gas = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.context)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_static = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contract_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.input);
        }
        if self.target_gas != 0 {
            my_size += ::protobuf::rt::value_size(3, self.target_gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_static != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contract_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.input.is_empty() {
            os.write_bytes(2, &self.input)?;
        }
        if self.target_gas != 0 {
            os.write_uint64(3, self.target_gas)?;
        }
        if let Some(ref v) = self.context.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_static != false {
            os.write_bool(5, self.is_static)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractBridgeArgs {
        ContractBridgeArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::ProtoAddress>>(
                "contract_address",
                |m: &ContractBridgeArgs| { &m.contract_address },
                |m: &mut ContractBridgeArgs| { &mut m.contract_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "input",
                |m: &ContractBridgeArgs| { &m.input },
                |m: &mut ContractBridgeArgs| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "target_gas",
                |m: &ContractBridgeArgs| { &m.target_gas },
                |m: &mut ContractBridgeArgs| { &mut m.target_gas },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContractContext>>(
                "context",
                |m: &ContractBridgeArgs| { &m.context },
                |m: &mut ContractBridgeArgs| { &mut m.context },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_static",
                |m: &ContractBridgeArgs| { &m.is_static },
                |m: &mut ContractBridgeArgs| { &mut m.is_static },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContractBridgeArgs>(
                "ContractBridgeArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContractBridgeArgs {
        static instance: ::protobuf::rt::LazyV2<ContractBridgeArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContractBridgeArgs::new)
    }
}

impl ::protobuf::Clear for ContractBridgeArgs {
    fn clear(&mut self) {
        self.contract_address.clear();
        self.input.clear();
        self.target_gas = 0;
        self.context.clear();
        self.is_static = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContractBridgeArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractBridgeArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto_precompile.proto\x12\x19tcash.evm_engine.precompile\x1a\x11pro\
    to_basic.proto\"\x94\x01\n\x10PrecompileOutput\x12\x1f\n\x0bexit_status\
    \x18\x01\x20\x01(\rR\nexitStatus\x12\x12\n\x04cost\x18\x02\x20\x01(\x04R\
    \x04cost\x12\x16\n\x06output\x18\x03\x20\x01(\x0cR\x06output\x123\n\x04l\
    ogs\x18\x04\x20\x03(\x0b2\x1f.tcash.evm_engine.basic.ResultLogR\x04logs\"\
    \x83\x01\n\x11PrecompileFailure\x12\x1f\n\x0bfail_status\x18\x01\x20\x01\
    (\rR\nfailStatus\x12!\n\x0cminor_status\x18\x02\x20\x01(\rR\x0bminorStat\
    us\x12\x16\n\x06output\x18\x03\x20\x01(\x0cR\x06output\x12\x12\n\x04cost\
    \x18\x04\x20\x01(\x04R\x04cost\"\xd1\x01\n\x0fContractContext\x12<\n\x07\
    address\x18\x01\x20\x01(\x0b2\".tcash.evm_engine.basic.ProtoAddressR\x07ad\
    dress\x12:\n\x06caller\x18\x02\x20\x01(\x0b2\".tcash.evm_engine.basic.Prot\
    oAddressR\x06caller\x12D\n\x0eapparent_value\x18\x03\x20\x01(\x0b2\x1d.t\
    op.evm_engine.basic.WeiU256R\rapparentValue\"\xfb\x01\n\x12ContractBridg\
    eArgs\x12M\n\x10contract_address\x18\x01\x20\x01(\x0b2\".tcash.evm_engine.\
    basic.ProtoAddressR\x0fcontractAddress\x12\x14\n\x05input\x18\x02\x20\
    \x01(\x0cR\x05input\x12\x1d\n\ntarget_gas\x18\x03\x20\x01(\x04R\ttargetG\
    as\x12D\n\x07context\x18\x04\x20\x01(\x0b2*.tcash.evm_engine.precompile.Co\
    ntractContextR\x07context\x12\x1b\n\tis_static\x18\x05\x20\x01(\x08R\x08\
    isStaticJ\xee\t\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\x08!\n\t\n\x02\x03\0\x12\x03\x04\x07\
    \x1a\n\n\n\x02\x04\0\x12\x04\x06\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x06\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x04\x1b\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x07\x04\x06\x19\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x07\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x0b\x16\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x07\x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x08\x04\x14\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x08\x04\x07\x1b\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x08\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x12\x13\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\t\x04\x15\n\r\n\x05\x04\0\x02\x02\x04\
    \x12\x04\t\x04\x08\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x04\t\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\n\x10\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\t\x13\x14\n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\x04&\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\n\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\n\r\x1c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\n\x1d!\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\n$%\n\n\n\x02\x04\x01\x12\x04\r\0\x12\x01\
    \n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x0e\x04\x1b\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0e\x04\r\x1a\n\x0c\
    \n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x0e\x0b\x16\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x19\x1a\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x04\x1c\n\r\n\x05\x04\x01\x02\x01\
    \x04\x12\x04\x0f\x04\x0e\x1b\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\x0b\x17\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x0f\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03\x10\x04\x15\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x10\x04\x0f\x1c\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x10\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03\x10\n\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\
    \x13\x14\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x11\x04\x14\n\r\n\x05\x04\
    \x01\x02\x03\x04\x12\x04\x11\x04\x10\x15\n\x0c\n\x05\x04\x01\x02\x03\x05\
    \x12\x03\x11\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x11\x0b\x0f\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x11\x12\x13\n\n\n\x02\x04\x02\x12\
    \x04\x14\0\x18\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x17\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x15\x04#\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x15\
    \x04\x14\x18\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x15\x04\x16\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x15\x17\x1e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x15!\"\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x16\x04\"\n\r\n\x05\
    \x04\x02\x02\x01\x04\x12\x04\x16\x04\x15#\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x16\x04\x16\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x16\x17\
    \x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x16\x20!\n\x13\n\x04\x04\
    \x02\x02\x02\x12\x03\x17\x04%\"\x06\x20U256\n\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04\x17\x04\x16\"\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x17\
    \x04\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x17\x12\x20\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x17#$\n\n\n\x02\x04\x03\x12\x04\x1a\0\x20\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03\x1a\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x1b\x04,\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x1b\x04\x1a\x1b\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1b\x04\x16\n\x0c\n\x05\x04\x03\x02\
    \0\x01\x12\x03\x1b\x17'\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1b*+\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03\x1c\x04\x14\n\r\n\x05\x04\x03\x02\x01\
    \x04\x12\x04\x1c\x04\x1b,\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1c\
    \x04\t\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1c\n\x0f\n\x0c\n\x05\x04\
    \x03\x02\x01\x03\x12\x03\x1c\x12\x13\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\
    \x1d\x04\x1a\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\x1d\x04\x1c\x14\n\x0c\
    \n\x05\x04\x03\x02\x02\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03\x1d\x0b\x15\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\x1d\x18\
    \x19\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x1e\x04\x20\n\r\n\x05\x04\x03\
    \x02\x03\x04\x12\x04\x1e\x04\x1d\x1a\n\x0c\n\x05\x04\x03\x02\x03\x06\x12\
    \x03\x1e\x04\x13\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03\x1e\x14\x1b\n\
    \x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1e\x1e\x1f\n\x0b\n\x04\x04\x03\
    \x02\x04\x12\x03\x1f\x04\x17\n\r\n\x05\x04\x03\x02\x04\x04\x12\x04\x1f\
    \x04\x1e\x20\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03\x1f\x04\x08\n\x0c\n\
    \x05\x04\x03\x02\x04\x01\x12\x03\x1f\t\x12\n\x0c\n\x05\x04\x03\x02\x04\
    \x03\x12\x03\x1f\x15\x16b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
