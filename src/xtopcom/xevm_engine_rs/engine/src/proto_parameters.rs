// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto_parameters.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct SubmitResult {
    // message fields
    pub version: u32,
    pub transaction_status: u32,
    pub status_data: ::std::vec::Vec<u8>,
    pub gas_used: u64,
    pub logs: ::protobuf::RepeatedField<super::proto_basic::ResultLog>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubmitResult {
    fn default() -> &'a SubmitResult {
        <SubmitResult as ::protobuf::Message>::default_instance()
    }
}

impl SubmitResult {
    pub fn new() -> SubmitResult {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // uint32 transaction_status = 2;


    pub fn get_transaction_status(&self) -> u32 {
        self.transaction_status
    }
    pub fn clear_transaction_status(&mut self) {
        self.transaction_status = 0;
    }

    // Param is passed by value, moved
    pub fn set_transaction_status(&mut self, v: u32) {
        self.transaction_status = v;
    }

    // bytes status_data = 3;


    pub fn get_status_data(&self) -> &[u8] {
        &self.status_data
    }
    pub fn clear_status_data(&mut self) {
        self.status_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_status_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.status_data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.status_data
    }

    // Take field
    pub fn take_status_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.status_data, ::std::vec::Vec::new())
    }

    // uint64 gas_used = 4;


    pub fn get_gas_used(&self) -> u64 {
        self.gas_used
    }
    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: u64) {
        self.gas_used = v;
    }

    // repeated .tcash.evm_engine.basic.ResultLog logs = 5;


    pub fn get_logs(&self) -> &[super::proto_basic::ResultLog] {
        &self.logs
    }
    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<super::proto_basic::ResultLog>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<super::proto_basic::ResultLog> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<super::proto_basic::ResultLog> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SubmitResult {
    fn is_initialized(&self) -> bool {
        for v in &self.logs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.transaction_status = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.status_data)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_used = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.logs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.transaction_status != 0 {
            my_size += ::protobuf::rt::value_size(2, self.transaction_status, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.status_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.status_data);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(4, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.logs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.transaction_status != 0 {
            os.write_uint32(2, self.transaction_status)?;
        }
        if !self.status_data.is_empty() {
            os.write_bytes(3, &self.status_data)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(4, self.gas_used)?;
        }
        for v in &self.logs {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubmitResult {
        SubmitResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &SubmitResult| { &m.version },
                |m: &mut SubmitResult| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "transaction_status",
                |m: &SubmitResult| { &m.transaction_status },
                |m: &mut SubmitResult| { &mut m.transaction_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "status_data",
                |m: &SubmitResult| { &m.status_data },
                |m: &mut SubmitResult| { &mut m.status_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_used",
                |m: &SubmitResult| { &m.gas_used },
                |m: &mut SubmitResult| { &mut m.gas_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::ResultLog>>(
                "logs",
                |m: &SubmitResult| { &m.logs },
                |m: &mut SubmitResult| { &mut m.logs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubmitResult>(
                "SubmitResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubmitResult {
        static instance: ::protobuf::rt::LazyV2<SubmitResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubmitResult::new)
    }
}

impl ::protobuf::Clear for SubmitResult {
    fn clear(&mut self) {
        self.version = 0;
        self.transaction_status = 0;
        self.status_data.clear();
        self.gas_used = 0;
        self.logs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubmitResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubmitResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FunctionCallArgs {
    // message fields
    pub version: u32,
    pub address: ::protobuf::SingularPtrField<super::proto_basic::ProtoAddress>,
    pub value: ::protobuf::SingularPtrField<super::proto_basic::WeiU256>,
    pub input: ::std::vec::Vec<u8>,
    pub gas_limit: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FunctionCallArgs {
    fn default() -> &'a FunctionCallArgs {
        <FunctionCallArgs as ::protobuf::Message>::default_instance()
    }
}

impl FunctionCallArgs {
    pub fn new() -> FunctionCallArgs {
        ::std::default::Default::default()
    }

    // uint32 version = 1;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    // .tcash.evm_engine.basic.ProtoAddress address = 2;


    pub fn get_address(&self) -> &super::proto_basic::ProtoAddress {
        self.address.as_ref().unwrap_or_else(|| <super::proto_basic::ProtoAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::proto_basic::ProtoAddress) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::proto_basic::ProtoAddress {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::proto_basic::ProtoAddress {
        self.address.take().unwrap_or_else(|| super::proto_basic::ProtoAddress::new())
    }

    // .tcash.evm_engine.basic.WeiU256 value = 3;


    pub fn get_value(&self) -> &super::proto_basic::WeiU256 {
        self.value.as_ref().unwrap_or_else(|| <super::proto_basic::WeiU256 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::proto_basic::WeiU256) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::proto_basic::WeiU256 {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::proto_basic::WeiU256 {
        self.value.take().unwrap_or_else(|| super::proto_basic::WeiU256::new())
    }

    // bytes input = 4;


    pub fn get_input(&self) -> &[u8] {
        &self.input
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::vec::Vec<u8>) {
        self.input = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.input
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.input, ::std::vec::Vec::new())
    }

    // uint64 gas_limit = 5;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = v;
    }
}

impl ::protobuf::Message for FunctionCallArgs {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.input)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.input);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::value_size(5, self.gas_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.input.is_empty() {
            os.write_bytes(4, &self.input)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(5, self.gas_limit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FunctionCallArgs {
        FunctionCallArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &FunctionCallArgs| { &m.version },
                |m: &mut FunctionCallArgs| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::ProtoAddress>>(
                "address",
                |m: &FunctionCallArgs| { &m.address },
                |m: &mut FunctionCallArgs| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proto_basic::WeiU256>>(
                "value",
                |m: &FunctionCallArgs| { &m.value },
                |m: &mut FunctionCallArgs| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "input",
                |m: &FunctionCallArgs| { &m.input },
                |m: &mut FunctionCallArgs| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_limit",
                |m: &FunctionCallArgs| { &m.gas_limit },
                |m: &mut FunctionCallArgs| { &mut m.gas_limit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FunctionCallArgs>(
                "FunctionCallArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FunctionCallArgs {
        static instance: ::protobuf::rt::LazyV2<FunctionCallArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FunctionCallArgs::new)
    }
}

impl ::protobuf::Clear for FunctionCallArgs {
    fn clear(&mut self) {
        self.version = 0;
        self.address.clear();
        self.value.clear();
        self.input.clear();
        self.gas_limit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FunctionCallArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FunctionCallArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16proto_parameters.proto\x12\x19tcash.evm_engine.parameters\x1a\x11pro\
    to_basic.proto\"\xc8\x01\n\x0cSubmitResult\x12\x18\n\x07version\x18\x01\
    \x20\x01(\rR\x07version\x12-\n\x12transaction_status\x18\x02\x20\x01(\rR\
    \x11transactionStatus\x12\x1f\n\x0bstatus_data\x18\x03\x20\x01(\x0cR\nst\
    atusData\x12\x19\n\x08gas_used\x18\x04\x20\x01(\x04R\x07gasUsed\x123\n\
    \x04logs\x18\x05\x20\x03(\x0b2\x1f.tcash.evm_engine.basic.ResultLogR\x04lo\
    gs\"\xd2\x01\n\x10FunctionCallArgs\x12\x18\n\x07version\x18\x01\x20\x01(\
    \rR\x07version\x12<\n\x07address\x18\x02\x20\x01(\x0b2\".tcash.evm_engine.\
    basic.ProtoAddressR\x07address\x123\n\x05value\x18\x03\x20\x01(\x0b2\x1d\
    .tcash.evm_engine.basic.WeiU256R\x05value\x12\x14\n\x05input\x18\x04\x20\
    \x01(\x0cR\x05input\x12\x1b\n\tgas_limit\x18\x05\x20\x01(\x04R\x08gasLim\
    itJ\x92\x06\n\x06\x12\x04\0\0\x14\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\x08!\n\t\n\x02\x03\0\x12\x03\x04\x07\x1a\n\n\
    \n\x02\x04\0\x12\x04\x06\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\
    \x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x04\x17\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x07\x04\x06\x16\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x04\
    \n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x0b\x12\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x07\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x04\"\n\
    \r\n\x05\x04\0\x02\x01\x04\x12\x04\x08\x04\x07\x17\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x08\x0b\
    \x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x20!\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\t\x04\x1a\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\t\x04\x08\
    \"\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\t\n\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\t\x18\x19\
    \n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\x04\x18\n\r\n\x05\x04\0\x02\x03\x04\
    \x12\x04\n\x04\t\x1a\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\n\x04\n\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\n\x0b\x13\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\n\x16\x17\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0b\x04&\n\x0c\n\
    \x05\x04\0\x02\x04\x04\x12\x03\x0b\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\
    \x12\x03\x0b\r\x1c\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0b\x1d!\n\x0c\
    \n\x05\x04\0\x02\x04\x03\x12\x03\x0b$%\n\n\n\x02\x04\x01\x12\x04\x0e\0\
    \x14\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x18\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x0f\x04\x17\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0f\x04\
    \x0e\x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x0f\x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x0f\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\x04#\n\r\n\x05\x04\
    \x01\x02\x01\x04\x12\x04\x10\x04\x0f\x17\n\x0c\n\x05\x04\x01\x02\x01\x06\
    \x12\x03\x10\x04\x16\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x17\x1e\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x10!\"\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x11\x04\x1c\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x11\x04\
    \x10#\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x11\x04\x11\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x11\x12\x17\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x11\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x12\x04\x14\n\r\
    \n\x05\x04\x01\x02\x03\x04\x12\x04\x12\x04\x11\x1c\n\x0c\n\x05\x04\x01\
    \x02\x03\x05\x12\x03\x12\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\
    \x12\n\x0f\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x12\x12\x13\n\x0b\n\
    \x04\x04\x01\x02\x04\x12\x03\x13\x04\x19\n\r\n\x05\x04\x01\x02\x04\x04\
    \x12\x04\x13\x04\x12\x14\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x13\x04\
    \n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x13\x0b\x14\n\x0c\n\x05\x04\
    \x01\x02\x04\x03\x12\x03\x13\x17\x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
