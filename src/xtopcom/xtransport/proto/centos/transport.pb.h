// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef PROTOBUF_INCLUDED_transport_2eproto
#define PROTOBUF_INCLUDED_transport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto 

namespace protobuf_transport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transport_2eproto
namespace tcash {
namespace transport {
namespace protobuf {
class GossipParams;
class GossipParamsDefaultTypeInternal;
extern GossipParamsDefaultTypeInternal _GossipParams_default_instance_;
class GossipSyncBlockData;
class GossipSyncBlockDataDefaultTypeInternal;
extern GossipSyncBlockDataDefaultTypeInternal _GossipSyncBlockData_default_instance_;
class HopInfo;
class HopInfoDefaultTypeInternal;
extern HopInfoDefaultTypeInternal _HopInfo_default_instance_;
class RoutingMessage;
class RoutingMessageDefaultTypeInternal;
extern RoutingMessageDefaultTypeInternal _RoutingMessage_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace tcash
namespace google {
namespace protobuf {
template<> ::tcash::transport::protobuf::GossipParams* Arena::CreateMaybeMessage<::tcash::transport::protobuf::GossipParams>(Arena*);
template<> ::tcash::transport::protobuf::GossipSyncBlockData* Arena::CreateMaybeMessage<::tcash::transport::protobuf::GossipSyncBlockData>(Arena*);
template<> ::tcash::transport::protobuf::HopInfo* Arena::CreateMaybeMessage<::tcash::transport::protobuf::HopInfo>(Arena*);
template<> ::tcash::transport::protobuf::RoutingMessage* Arena::CreateMaybeMessage<::tcash::transport::protobuf::RoutingMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tcash {
namespace transport {
namespace protobuf {

// ===================================================================

class HopInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.HopInfo) */ {
 public:
  HopInfo();
  virtual ~HopInfo();

  HopInfo(const HopInfo& from);

  inline HopInfo& operator=(const HopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HopInfo(HopInfo&& from) noexcept
    : HopInfo() {
    *this = ::std::move(from);
  }

  inline HopInfo& operator=(HopInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HopInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HopInfo* internal_default_instance() {
    return reinterpret_cast<const HopInfo*>(
               &_HopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HopInfo* other);
  friend void swap(HopInfo& a, HopInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HopInfo* New() const final {
    return CreateMaybeMessage<HopInfo>(NULL);
  }

  HopInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HopInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HopInfo& from);
  void MergeFrom(const HopInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HopInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // optional bytes ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.HopInfo)
 private:
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GossipParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.GossipParams) */ {
 public:
  GossipParams();
  virtual ~GossipParams();

  GossipParams(const GossipParams& from);

  inline GossipParams& operator=(const GossipParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GossipParams(GossipParams&& from) noexcept
    : GossipParams() {
    *this = ::std::move(from);
  }

  inline GossipParams& operator=(GossipParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GossipParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipParams* internal_default_instance() {
    return reinterpret_cast<const GossipParams*>(
               &_GossipParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GossipParams* other);
  friend void swap(GossipParams& a, GossipParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipParams* New() const final {
    return CreateMaybeMessage<GossipParams>(NULL);
  }

  GossipParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GossipParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GossipParams& from);
  void MergeFrom(const GossipParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes header_hash = 10;
  bool has_header_hash() const;
  void clear_header_hash();
  static const int kHeaderHashFieldNumber = 10;
  const ::std::string& header_hash() const;
  void set_header_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_header_hash(::std::string&& value);
  #endif
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  ::std::string* mutable_header_hash();
  ::std::string* release_header_hash();
  void set_allocated_header_hash(::std::string* header_hash);

  // optional bytes block = 11;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 11;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // optional uint32 neighber_count = 1;
  bool has_neighber_count() const;
  void clear_neighber_count();
  static const int kNeighberCountFieldNumber = 1;
  ::google::protobuf::uint32 neighber_count() const;
  void set_neighber_count(::google::protobuf::uint32 value);

  // optional uint32 stcash_times = 2;
  bool has_stcash_times() const;
  void clear_stcash_times();
  static const int kStcashTimesFieldNumber = 2;
  ::google::protobuf::uint32 stcash_times() const;
  void set_stcash_times(::google::protobuf::uint32 value);

  // optional int32 gossip_type = 3;
  bool has_gossip_type() const;
  void clear_gossip_type();
  static const int kGossipTypeFieldNumber = 3;
  ::google::protobuf::int32 gossip_type() const;
  void set_gossip_type(::google::protobuf::int32 value);

  // optional uint32 max_hop_num = 4;
  bool has_max_hop_num() const;
  void clear_max_hop_num();
  static const int kMaxHopNumFieldNumber = 4;
  ::google::protobuf::uint32 max_hop_num() const;
  void set_max_hop_num(::google::protobuf::uint32 value);

  // optional uint64 sit1 = 5;
  bool has_sit1() const;
  void clear_sit1();
  static const int kSit1FieldNumber = 5;
  ::google::protobuf::uint64 sit1() const;
  void set_sit1(::google::protobuf::uint64 value);

  // optional uint64 sit2 = 6;
  bool has_sit2() const;
  void clear_sit2();
  static const int kSit2FieldNumber = 6;
  ::google::protobuf::uint64 sit2() const;
  void set_sit2(::google::protobuf::uint64 value);

  // optional uint64 sit3 = 7;
  bool has_sit3() const;
  void clear_sit3();
  static const int kSit3FieldNumber = 7;
  ::google::protobuf::uint64 sit3() const;
  void set_sit3(::google::protobuf::uint64 value);

  // optional uint64 sit4 = 8;
  bool has_sit4() const;
  void clear_sit4();
  static const int kSit4FieldNumber = 8;
  ::google::protobuf::uint64 sit4() const;
  void set_sit4(::google::protobuf::uint64 value);

  // optional uint32 overlap_rate = 9;
  bool has_overlap_rate() const;
  void clear_overlap_rate();
  static const int kOverlapRateFieldNumber = 9;
  ::google::protobuf::uint32 overlap_rate() const;
  void set_overlap_rate(::google::protobuf::uint32 value);

  // optional bool diff_net = 12;
  bool has_diff_net() const;
  void clear_diff_net();
  static const int kDiffNetFieldNumber = 12;
  bool diff_net() const;
  void set_diff_net(bool value);

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.GossipParams)
 private:
  void set_has_neighber_count();
  void clear_has_neighber_count();
  void set_has_stcash_times();
  void clear_has_stcash_times();
  void set_has_gossip_type();
  void clear_has_gossip_type();
  void set_has_max_hop_num();
  void clear_has_max_hop_num();
  void set_has_sit1();
  void clear_has_sit1();
  void set_has_sit2();
  void clear_has_sit2();
  void set_has_sit3();
  void clear_has_sit3();
  void set_has_sit4();
  void clear_has_sit4();
  void set_has_overlap_rate();
  void clear_has_overlap_rate();
  void set_has_header_hash();
  void clear_has_header_hash();
  void set_has_block();
  void clear_has_block();
  void set_has_diff_net();
  void clear_has_diff_net();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_hash_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::uint32 neighber_count_;
  ::google::protobuf::uint32 stcash_times_;
  ::google::protobuf::int32 gossip_type_;
  ::google::protobuf::uint32 max_hop_num_;
  ::google::protobuf::uint64 sit1_;
  ::google::protobuf::uint64 sit2_;
  ::google::protobuf::uint64 sit3_;
  ::google::protobuf::uint64 sit4_;
  ::google::protobuf::uint32 overlap_rate_;
  bool diff_net_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GossipSyncBlockData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.GossipSyncBlockData) */ {
 public:
  GossipSyncBlockData();
  virtual ~GossipSyncBlockData();

  GossipSyncBlockData(const GossipSyncBlockData& from);

  inline GossipSyncBlockData& operator=(const GossipSyncBlockData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GossipSyncBlockData(GossipSyncBlockData&& from) noexcept
    : GossipSyncBlockData() {
    *this = ::std::move(from);
  }

  inline GossipSyncBlockData& operator=(GossipSyncBlockData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GossipSyncBlockData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipSyncBlockData* internal_default_instance() {
    return reinterpret_cast<const GossipSyncBlockData*>(
               &_GossipSyncBlockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GossipSyncBlockData* other);
  friend void swap(GossipSyncBlockData& a, GossipSyncBlockData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipSyncBlockData* New() const final {
    return CreateMaybeMessage<GossipSyncBlockData>(NULL);
  }

  GossipSyncBlockData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GossipSyncBlockData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GossipSyncBlockData& from);
  void MergeFrom(const GossipSyncBlockData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipSyncBlockData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes header_hash = 1;
  bool has_header_hash() const;
  void clear_header_hash();
  static const int kHeaderHashFieldNumber = 1;
  const ::std::string& header_hash() const;
  void set_header_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_header_hash(::std::string&& value);
  #endif
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  ::std::string* mutable_header_hash();
  ::std::string* release_header_hash();
  void set_allocated_header_hash(::std::string* header_hash);

  // optional bytes block = 2;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 2;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.GossipSyncBlockData)
 private:
  void set_has_header_hash();
  void clear_has_header_hash();
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_hash_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoutingMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.RoutingMessage) */ {
 public:
  RoutingMessage();
  virtual ~RoutingMessage();

  RoutingMessage(const RoutingMessage& from);

  inline RoutingMessage& operator=(const RoutingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingMessage(RoutingMessage&& from) noexcept
    : RoutingMessage() {
    *this = ::std::move(from);
  }

  inline RoutingMessage& operator=(RoutingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingMessage* internal_default_instance() {
    return reinterpret_cast<const RoutingMessage*>(
               &_RoutingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RoutingMessage* other);
  friend void swap(RoutingMessage& a, RoutingMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingMessage* New() const final {
    return CreateMaybeMessage<RoutingMessage>(NULL);
  }

  RoutingMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingMessage& from);
  void MergeFrom(const RoutingMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  int hop_nodes_size() const;
  void clear_hop_nodes();
  static const int kHopNodesFieldNumber = 8;
  ::tcash::transport::protobuf::HopInfo* mutable_hop_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >*
      mutable_hop_nodes();
  const ::tcash::transport::protobuf::HopInfo& hop_nodes(int index) const;
  ::tcash::transport::protobuf::HopInfo* add_hop_nodes();
  const ::google::protobuf::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >&
      hop_nodes() const;

  // repeated uint64 bloomfilter = 14;
  int bloomfilter_size() const;
  void clear_bloomfilter();
  static const int kBloomfilterFieldNumber = 14;
  ::google::protobuf::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::google::protobuf::uint64 value);
  void add_bloomfilter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bloomfilter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bloomfilter();

  // optional bytes src_node_id = 1;
  bool has_src_node_id() const;
  void clear_src_node_id();
  static const int kSrcNodeIdFieldNumber = 1;
  const ::std::string& src_node_id() const;
  void set_src_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_src_node_id(::std::string&& value);
  #endif
  void set_src_node_id(const char* value);
  void set_src_node_id(const void* value, size_t size);
  ::std::string* mutable_src_node_id();
  ::std::string* release_src_node_id();
  void set_allocated_src_node_id(::std::string* src_node_id);

  // optional bytes des_node_id = 2;
  bool has_des_node_id() const;
  void clear_des_node_id();
  static const int kDesNodeIdFieldNumber = 2;
  const ::std::string& des_node_id() const;
  void set_des_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_des_node_id(::std::string&& value);
  #endif
  void set_des_node_id(const char* value);
  void set_des_node_id(const void* value, size_t size);
  ::std::string* mutable_des_node_id();
  ::std::string* release_des_node_id();
  void set_allocated_des_node_id(::std::string* des_node_id);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes xid = 15;
  bool has_xid() const;
  void clear_xid();
  static const int kXidFieldNumber = 15;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // optional string debug = 18;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 18;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  #if LANG_CXX11
  void set_debug(::std::string&& value);
  #endif
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // optional .tcash.transport.protobuf.GossipParams gossip = 17;
  bool has_gossip() const;
  void clear_gossip();
  static const int kGossipFieldNumber = 17;
  private:
  const ::tcash::transport::protobuf::GossipParams& _internal_gossip() const;
  public:
  const ::tcash::transport::protobuf::GossipParams& gossip() const;
  ::tcash::transport::protobuf::GossipParams* release_gossip();
  ::tcash::transport::protobuf::GossipParams* mutable_gossip();
  void set_allocated_gossip(::tcash::transport::protobuf::GossipParams* gossip);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional uint32 id = 5;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 5;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 ack_id = 6;
  bool has_ack_id() const;
  void clear_ack_id();
  static const int kAckIdFieldNumber = 6;
  ::google::protobuf::uint32 ack_id() const;
  void set_ack_id(::google::protobuf::uint32 value);

  // optional uint32 hop_num = 7;
  bool has_hop_num() const;
  void clear_hop_num();
  static const int kHopNumFieldNumber = 7;
  ::google::protobuf::uint32 hop_num() const;
  void set_hop_num(::google::protobuf::uint32 value);

  // optional uint64 src_service_type = 9;
  bool has_src_service_type() const;
  void clear_src_service_type();
  static const int kSrcServiceTypeFieldNumber = 9;
  ::google::protobuf::uint64 src_service_type() const;
  void set_src_service_type(::google::protobuf::uint64 value);

  // optional uint64 des_service_type = 10;
  bool has_des_service_type() const;
  void clear_des_service_type();
  static const int kDesServiceTypeFieldNumber = 10;
  ::google::protobuf::uint64 des_service_type() const;
  void set_des_service_type(::google::protobuf::uint64 value);

  // optional uint32 msg_hash = 11;
  bool has_msg_hash() const;
  void clear_msg_hash();
  static const int kMsgHashFieldNumber = 11;
  ::google::protobuf::uint32 msg_hash() const;
  void set_msg_hash(::google::protobuf::uint32 value);

  // optional bool is_root = 12;
  bool has_is_root() const;
  void clear_is_root();
  static const int kIsRootFieldNumber = 12;
  bool is_root() const;
  void set_is_root(bool value);

  // optional bool broadcast = 13;
  bool has_broadcast() const;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 13;
  bool broadcast() const;
  void set_broadcast(bool value);

  // optional uint32 priority = 16;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 16;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.RoutingMessage)
 private:
  void set_has_src_node_id();
  void clear_has_src_node_id();
  void set_has_des_node_id();
  void clear_has_des_node_id();
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();
  void set_has_id();
  void clear_has_id();
  void set_has_ack_id();
  void clear_has_ack_id();
  void set_has_hop_num();
  void clear_has_hop_num();
  void set_has_src_service_type();
  void clear_has_src_service_type();
  void set_has_des_service_type();
  void clear_has_des_service_type();
  void set_has_msg_hash();
  void clear_has_msg_hash();
  void set_has_is_root();
  void clear_has_is_root();
  void set_has_broadcast();
  void clear_has_broadcast();
  void set_has_xid();
  void clear_has_xid();
  void set_has_priority();
  void clear_has_priority();
  void set_has_gossip();
  void clear_has_gossip();
  void set_has_debug();
  void clear_has_debug();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo > hop_nodes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bloomfilter_;
  ::google::protobuf::internal::ArenaStringPtr src_node_id_;
  ::google::protobuf::internal::ArenaStringPtr des_node_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::tcash::transport::protobuf::GossipParams* gossip_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ack_id_;
  ::google::protobuf::uint32 hop_num_;
  ::google::protobuf::uint64 src_service_type_;
  ::google::protobuf::uint64 des_service_type_;
  ::google::protobuf::uint32 msg_hash_;
  bool is_root_;
  bool broadcast_;
  ::google::protobuf::uint32 priority_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HopInfo

// optional bytes node_id = 1;
inline bool HopInfo::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HopInfo::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HopInfo::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HopInfo::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_id();
}
inline const ::std::string& HopInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.HopInfo.node_id)
  return node_id_.GetNoArena();
}
inline void HopInfo::set_node_id(const ::std::string& value) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.HopInfo.node_id)
}
#if LANG_CXX11
inline void HopInfo::set_node_id(::std::string&& value) {
  set_has_node_id();
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.HopInfo.node_id)
}
#endif
inline void HopInfo::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.HopInfo.node_id)
}
inline void HopInfo::set_node_id(const void* value, size_t size) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.HopInfo.node_id)
}
inline ::std::string* HopInfo::mutable_node_id() {
  set_has_node_id();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.HopInfo.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HopInfo::release_node_id() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.HopInfo.node_id)
  if (!has_node_id()) {
    return NULL;
  }
  clear_has_node_id();
  return node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HopInfo::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    set_has_node_id();
  } else {
    clear_has_node_id();
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.HopInfo.node_id)
}

// optional bytes ip = 2;
inline bool HopInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HopInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HopInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HopInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& HopInfo::ip() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.HopInfo.ip)
  return ip_.GetNoArena();
}
inline void HopInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.HopInfo.ip)
}
#if LANG_CXX11
inline void HopInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.HopInfo.ip)
}
#endif
inline void HopInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.HopInfo.ip)
}
inline void HopInfo::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.HopInfo.ip)
}
inline ::std::string* HopInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.HopInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HopInfo::release_ip() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.HopInfo.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HopInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.HopInfo.ip)
}

// optional int32 port = 3;
inline bool HopInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HopInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HopInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HopInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 HopInfo::port() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.HopInfo.port)
  return port_;
}
inline void HopInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.HopInfo.port)
}

// -------------------------------------------------------------------

// GossipParams

// optional uint32 neighber_count = 1;
inline bool GossipParams::has_neighber_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GossipParams::set_has_neighber_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GossipParams::clear_has_neighber_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GossipParams::clear_neighber_count() {
  neighber_count_ = 0u;
  clear_has_neighber_count();
}
inline ::google::protobuf::uint32 GossipParams::neighber_count() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.neighber_count)
  return neighber_count_;
}
inline void GossipParams::set_neighber_count(::google::protobuf::uint32 value) {
  set_has_neighber_count();
  neighber_count_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.neighber_count)
}

// optional uint32 stcash_times = 2;
inline bool GossipParams::has_stcash_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GossipParams::set_has_stcash_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GossipParams::clear_has_stcash_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GossipParams::clear_stcash_times() {
  stcash_times_ = 0u;
  clear_has_stcash_times();
}
inline ::google::protobuf::uint32 GossipParams::stcash_times() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.stcash_times)
  return stcash_times_;
}
inline void GossipParams::set_stcash_times(::google::protobuf::uint32 value) {
  set_has_stcash_times();
  stcash_times_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.stcash_times)
}

// optional int32 gossip_type = 3;
inline bool GossipParams::has_gossip_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GossipParams::set_has_gossip_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GossipParams::clear_has_gossip_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GossipParams::clear_gossip_type() {
  gossip_type_ = 0;
  clear_has_gossip_type();
}
inline ::google::protobuf::int32 GossipParams::gossip_type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.gossip_type)
  return gossip_type_;
}
inline void GossipParams::set_gossip_type(::google::protobuf::int32 value) {
  set_has_gossip_type();
  gossip_type_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.gossip_type)
}

// optional uint32 max_hop_num = 4;
inline bool GossipParams::has_max_hop_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GossipParams::set_has_max_hop_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GossipParams::clear_has_max_hop_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GossipParams::clear_max_hop_num() {
  max_hop_num_ = 0u;
  clear_has_max_hop_num();
}
inline ::google::protobuf::uint32 GossipParams::max_hop_num() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.max_hop_num)
  return max_hop_num_;
}
inline void GossipParams::set_max_hop_num(::google::protobuf::uint32 value) {
  set_has_max_hop_num();
  max_hop_num_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.max_hop_num)
}

// optional uint64 sit1 = 5;
inline bool GossipParams::has_sit1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GossipParams::set_has_sit1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GossipParams::clear_has_sit1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GossipParams::clear_sit1() {
  sit1_ = GOOGLE_ULONGLONG(0);
  clear_has_sit1();
}
inline ::google::protobuf::uint64 GossipParams::sit1() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit1)
  return sit1_;
}
inline void GossipParams::set_sit1(::google::protobuf::uint64 value) {
  set_has_sit1();
  sit1_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit1)
}

// optional uint64 sit2 = 6;
inline bool GossipParams::has_sit2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GossipParams::set_has_sit2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GossipParams::clear_has_sit2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GossipParams::clear_sit2() {
  sit2_ = GOOGLE_ULONGLONG(0);
  clear_has_sit2();
}
inline ::google::protobuf::uint64 GossipParams::sit2() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit2)
  return sit2_;
}
inline void GossipParams::set_sit2(::google::protobuf::uint64 value) {
  set_has_sit2();
  sit2_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit2)
}

// optional uint64 sit3 = 7;
inline bool GossipParams::has_sit3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GossipParams::set_has_sit3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GossipParams::clear_has_sit3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GossipParams::clear_sit3() {
  sit3_ = GOOGLE_ULONGLONG(0);
  clear_has_sit3();
}
inline ::google::protobuf::uint64 GossipParams::sit3() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit3)
  return sit3_;
}
inline void GossipParams::set_sit3(::google::protobuf::uint64 value) {
  set_has_sit3();
  sit3_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit3)
}

// optional uint64 sit4 = 8;
inline bool GossipParams::has_sit4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GossipParams::set_has_sit4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GossipParams::clear_has_sit4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GossipParams::clear_sit4() {
  sit4_ = GOOGLE_ULONGLONG(0);
  clear_has_sit4();
}
inline ::google::protobuf::uint64 GossipParams::sit4() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit4)
  return sit4_;
}
inline void GossipParams::set_sit4(::google::protobuf::uint64 value) {
  set_has_sit4();
  sit4_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit4)
}

// optional uint32 overlap_rate = 9;
inline bool GossipParams::has_overlap_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GossipParams::set_has_overlap_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GossipParams::clear_has_overlap_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GossipParams::clear_overlap_rate() {
  overlap_rate_ = 0u;
  clear_has_overlap_rate();
}
inline ::google::protobuf::uint32 GossipParams::overlap_rate() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.overlap_rate)
  return overlap_rate_;
}
inline void GossipParams::set_overlap_rate(::google::protobuf::uint32 value) {
  set_has_overlap_rate();
  overlap_rate_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.overlap_rate)
}

// optional bytes header_hash = 10;
inline bool GossipParams::has_header_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipParams::set_has_header_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GossipParams::clear_has_header_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GossipParams::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_hash();
}
inline const ::std::string& GossipParams::header_hash() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.header_hash)
  return header_hash_.GetNoArena();
}
inline void GossipParams::set_header_hash(const ::std::string& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.header_hash)
}
#if LANG_CXX11
inline void GossipParams::set_header_hash(::std::string&& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipParams.header_hash)
}
#endif
inline void GossipParams::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipParams.header_hash)
}
inline void GossipParams::set_header_hash(const void* value, size_t size) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipParams.header_hash)
}
inline ::std::string* GossipParams::mutable_header_hash() {
  set_has_header_hash();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipParams.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_header_hash() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipParams.header_hash)
  if (!has_header_hash()) {
    return NULL;
  }
  clear_has_header_hash();
  return header_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    set_has_header_hash();
  } else {
    clear_has_header_hash();
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipParams.header_hash)
}

// optional bytes block = 11;
inline bool GossipParams::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipParams::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GossipParams::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GossipParams::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GossipParams::block() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.block)
  return block_.GetNoArena();
}
inline void GossipParams::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.block)
}
#if LANG_CXX11
inline void GossipParams::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipParams.block)
}
#endif
inline void GossipParams::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipParams.block)
}
inline void GossipParams::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipParams.block)
}
inline ::std::string* GossipParams::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipParams.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_block() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipParams.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipParams.block)
}

// optional bool diff_net = 12;
inline bool GossipParams::has_diff_net() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GossipParams::set_has_diff_net() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GossipParams::clear_has_diff_net() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GossipParams::clear_diff_net() {
  diff_net_ = false;
  clear_has_diff_net();
}
inline bool GossipParams::diff_net() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.diff_net)
  return diff_net_;
}
inline void GossipParams::set_diff_net(bool value) {
  set_has_diff_net();
  diff_net_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.diff_net)
}

// -------------------------------------------------------------------

// GossipSyncBlockData

// optional bytes header_hash = 1;
inline bool GossipSyncBlockData::has_header_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipSyncBlockData::set_has_header_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GossipSyncBlockData::clear_has_header_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GossipSyncBlockData::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_hash();
}
inline const ::std::string& GossipSyncBlockData::header_hash() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  return header_hash_.GetNoArena();
}
inline void GossipSyncBlockData::set_header_hash(const ::std::string& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
#if LANG_CXX11
inline void GossipSyncBlockData::set_header_hash(::std::string&& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
#endif
inline void GossipSyncBlockData::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline void GossipSyncBlockData::set_header_hash(const void* value, size_t size) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline ::std::string* GossipSyncBlockData::mutable_header_hash() {
  set_has_header_hash();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipSyncBlockData::release_header_hash() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  if (!has_header_hash()) {
    return NULL;
  }
  clear_has_header_hash();
  return header_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipSyncBlockData::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    set_has_header_hash();
  } else {
    clear_has_header_hash();
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}

// optional bytes block = 2;
inline bool GossipSyncBlockData::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipSyncBlockData::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GossipSyncBlockData::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GossipSyncBlockData::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GossipSyncBlockData::block() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipSyncBlockData.block)
  return block_.GetNoArena();
}
inline void GossipSyncBlockData::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipSyncBlockData.block)
}
#if LANG_CXX11
inline void GossipSyncBlockData::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipSyncBlockData.block)
}
#endif
inline void GossipSyncBlockData::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline void GossipSyncBlockData::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline ::std::string* GossipSyncBlockData::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipSyncBlockData.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipSyncBlockData::release_block() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipSyncBlockData.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipSyncBlockData::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipSyncBlockData.block)
}

// -------------------------------------------------------------------

// RoutingMessage

// optional bytes src_node_id = 1;
inline bool RoutingMessage::has_src_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingMessage::set_has_src_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingMessage::clear_has_src_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutingMessage::clear_src_node_id() {
  src_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_node_id();
}
inline const ::std::string& RoutingMessage::src_node_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.src_node_id)
  return src_node_id_.GetNoArena();
}
inline void RoutingMessage::set_src_node_id(const ::std::string& value) {
  set_has_src_node_id();
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_src_node_id(::std::string&& value) {
  set_has_src_node_id();
  src_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
#endif
inline void RoutingMessage::set_src_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_node_id();
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline void RoutingMessage::set_src_node_id(const void* value, size_t size) {
  set_has_src_node_id();
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline ::std::string* RoutingMessage::mutable_src_node_id() {
  set_has_src_node_id();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.src_node_id)
  return src_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_src_node_id() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.src_node_id)
  if (!has_src_node_id()) {
    return NULL;
  }
  clear_has_src_node_id();
  return src_node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_src_node_id(::std::string* src_node_id) {
  if (src_node_id != NULL) {
    set_has_src_node_id();
  } else {
    clear_has_src_node_id();
  }
  src_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_node_id);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.src_node_id)
}

// optional bytes des_node_id = 2;
inline bool RoutingMessage::has_des_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingMessage::set_has_des_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingMessage::clear_has_des_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoutingMessage::clear_des_node_id() {
  des_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_des_node_id();
}
inline const ::std::string& RoutingMessage::des_node_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.des_node_id)
  return des_node_id_.GetNoArena();
}
inline void RoutingMessage::set_des_node_id(const ::std::string& value) {
  set_has_des_node_id();
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_des_node_id(::std::string&& value) {
  set_has_des_node_id();
  des_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
#endif
inline void RoutingMessage::set_des_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_des_node_id();
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline void RoutingMessage::set_des_node_id(const void* value, size_t size) {
  set_has_des_node_id();
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline ::std::string* RoutingMessage::mutable_des_node_id() {
  set_has_des_node_id();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.des_node_id)
  return des_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_des_node_id() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.des_node_id)
  if (!has_des_node_id()) {
    return NULL;
  }
  clear_has_des_node_id();
  return des_node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_des_node_id(::std::string* des_node_id) {
  if (des_node_id != NULL) {
    set_has_des_node_id();
  } else {
    clear_has_des_node_id();
  }
  des_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des_node_id);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.des_node_id)
}

// optional int32 type = 3;
inline bool RoutingMessage::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoutingMessage::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoutingMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoutingMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RoutingMessage::type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.type)
  return type_;
}
inline void RoutingMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.type)
}

// optional bytes data = 4;
inline bool RoutingMessage::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutingMessage::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoutingMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoutingMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& RoutingMessage::data() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.data)
  return data_.GetNoArena();
}
inline void RoutingMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.data)
}
#if LANG_CXX11
inline void RoutingMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.data)
}
#endif
inline void RoutingMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.data)
}
inline void RoutingMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.data)
}
inline ::std::string* RoutingMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_data() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.data)
}

// optional uint32 id = 5;
inline bool RoutingMessage::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoutingMessage::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoutingMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoutingMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RoutingMessage::id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.id)
  return id_;
}
inline void RoutingMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.id)
}

// optional uint32 ack_id = 6;
inline bool RoutingMessage::has_ack_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoutingMessage::set_has_ack_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoutingMessage::clear_has_ack_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoutingMessage::clear_ack_id() {
  ack_id_ = 0u;
  clear_has_ack_id();
}
inline ::google::protobuf::uint32 RoutingMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.ack_id)
  return ack_id_;
}
inline void RoutingMessage::set_ack_id(::google::protobuf::uint32 value) {
  set_has_ack_id();
  ack_id_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.ack_id)
}

// optional uint32 hop_num = 7;
inline bool RoutingMessage::has_hop_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoutingMessage::set_has_hop_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoutingMessage::clear_has_hop_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoutingMessage::clear_hop_num() {
  hop_num_ = 0u;
  clear_has_hop_num();
}
inline ::google::protobuf::uint32 RoutingMessage::hop_num() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.hop_num)
  return hop_num_;
}
inline void RoutingMessage::set_hop_num(::google::protobuf::uint32 value) {
  set_has_hop_num();
  hop_num_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.hop_num)
}

// repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
inline int RoutingMessage::hop_nodes_size() const {
  return hop_nodes_.size();
}
inline void RoutingMessage::clear_hop_nodes() {
  hop_nodes_.Clear();
}
inline ::tcash::transport::protobuf::HopInfo* RoutingMessage::mutable_hop_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >*
RoutingMessage::mutable_hop_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return &hop_nodes_;
}
inline const ::tcash::transport::protobuf::HopInfo& RoutingMessage::hop_nodes(int index) const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Get(index);
}
inline ::tcash::transport::protobuf::HopInfo* RoutingMessage::add_hop_nodes() {
  // @@protoc_insertion_point(field_add:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >&
RoutingMessage::hop_nodes() const {
  // @@protoc_insertion_point(field_list:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_;
}

// optional uint64 src_service_type = 9;
inline bool RoutingMessage::has_src_service_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoutingMessage::set_has_src_service_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoutingMessage::clear_has_src_service_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoutingMessage::clear_src_service_type() {
  src_service_type_ = GOOGLE_ULONGLONG(0);
  clear_has_src_service_type();
}
inline ::google::protobuf::uint64 RoutingMessage::src_service_type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.src_service_type)
  return src_service_type_;
}
inline void RoutingMessage::set_src_service_type(::google::protobuf::uint64 value) {
  set_has_src_service_type();
  src_service_type_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.src_service_type)
}

// optional uint64 des_service_type = 10;
inline bool RoutingMessage::has_des_service_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoutingMessage::set_has_des_service_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoutingMessage::clear_has_des_service_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoutingMessage::clear_des_service_type() {
  des_service_type_ = GOOGLE_ULONGLONG(0);
  clear_has_des_service_type();
}
inline ::google::protobuf::uint64 RoutingMessage::des_service_type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.des_service_type)
  return des_service_type_;
}
inline void RoutingMessage::set_des_service_type(::google::protobuf::uint64 value) {
  set_has_des_service_type();
  des_service_type_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.des_service_type)
}

// optional uint32 msg_hash = 11;
inline bool RoutingMessage::has_msg_hash() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoutingMessage::set_has_msg_hash() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoutingMessage::clear_has_msg_hash() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoutingMessage::clear_msg_hash() {
  msg_hash_ = 0u;
  clear_has_msg_hash();
}
inline ::google::protobuf::uint32 RoutingMessage::msg_hash() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.msg_hash)
  return msg_hash_;
}
inline void RoutingMessage::set_msg_hash(::google::protobuf::uint32 value) {
  set_has_msg_hash();
  msg_hash_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.msg_hash)
}

// optional bool is_root = 12;
inline bool RoutingMessage::has_is_root() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoutingMessage::set_has_is_root() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoutingMessage::clear_has_is_root() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoutingMessage::clear_is_root() {
  is_root_ = false;
  clear_has_is_root();
}
inline bool RoutingMessage::is_root() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.is_root)
  return is_root_;
}
inline void RoutingMessage::set_is_root(bool value) {
  set_has_is_root();
  is_root_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.is_root)
}

// optional bool broadcast = 13;
inline bool RoutingMessage::has_broadcast() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoutingMessage::set_has_broadcast() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoutingMessage::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoutingMessage::clear_broadcast() {
  broadcast_ = false;
  clear_has_broadcast();
}
inline bool RoutingMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.broadcast)
  return broadcast_;
}
inline void RoutingMessage::set_broadcast(bool value) {
  set_has_broadcast();
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.broadcast)
}

// repeated uint64 bloomfilter = 14;
inline int RoutingMessage::bloomfilter_size() const {
  return bloomfilter_.size();
}
inline void RoutingMessage::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::google::protobuf::uint64 RoutingMessage::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.bloomfilter)
  return bloomfilter_.Get(index);
}
inline void RoutingMessage::set_bloomfilter(int index, ::google::protobuf::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.bloomfilter)
}
inline void RoutingMessage::add_bloomfilter(::google::protobuf::uint64 value) {
  bloomfilter_.Add(value);
  // @@protoc_insertion_point(field_add:tcash.transport.protobuf.RoutingMessage.bloomfilter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoutingMessage::bloomfilter() const {
  // @@protoc_insertion_point(field_list:tcash.transport.protobuf.RoutingMessage.bloomfilter)
  return bloomfilter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoutingMessage::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:tcash.transport.protobuf.RoutingMessage.bloomfilter)
  return &bloomfilter_;
}

// optional bytes xid = 15;
inline bool RoutingMessage::has_xid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoutingMessage::set_has_xid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoutingMessage::clear_has_xid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoutingMessage::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xid();
}
inline const ::std::string& RoutingMessage::xid() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.xid)
  return xid_.GetNoArena();
}
inline void RoutingMessage::set_xid(const ::std::string& value) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.xid)
}
#if LANG_CXX11
inline void RoutingMessage::set_xid(::std::string&& value) {
  set_has_xid();
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.xid)
}
#endif
inline void RoutingMessage::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.xid)
}
inline void RoutingMessage::set_xid(const void* value, size_t size) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.xid)
}
inline ::std::string* RoutingMessage::mutable_xid() {
  set_has_xid();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_xid() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.xid)
  if (!has_xid()) {
    return NULL;
  }
  clear_has_xid();
  return xid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    set_has_xid();
  } else {
    clear_has_xid();
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.xid)
}

// optional uint32 priority = 16;
inline bool RoutingMessage::has_priority() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoutingMessage::set_has_priority() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoutingMessage::clear_has_priority() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoutingMessage::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 RoutingMessage::priority() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.priority)
  return priority_;
}
inline void RoutingMessage::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.priority)
}

// optional .tcash.transport.protobuf.GossipParams gossip = 17;
inline bool RoutingMessage::has_gossip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoutingMessage::set_has_gossip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoutingMessage::clear_has_gossip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoutingMessage::clear_gossip() {
  if (gossip_ != NULL) gossip_->Clear();
  clear_has_gossip();
}
inline const ::tcash::transport::protobuf::GossipParams& RoutingMessage::_internal_gossip() const {
  return *gossip_;
}
inline const ::tcash::transport::protobuf::GossipParams& RoutingMessage::gossip() const {
  const ::tcash::transport::protobuf::GossipParams* p = gossip_;
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.gossip)
  return p != NULL ? *p : *reinterpret_cast<const ::tcash::transport::protobuf::GossipParams*>(
      &::tcash::transport::protobuf::_GossipParams_default_instance_);
}
inline ::tcash::transport::protobuf::GossipParams* RoutingMessage::release_gossip() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.gossip)
  clear_has_gossip();
  ::tcash::transport::protobuf::GossipParams* temp = gossip_;
  gossip_ = NULL;
  return temp;
}
inline ::tcash::transport::protobuf::GossipParams* RoutingMessage::mutable_gossip() {
  set_has_gossip();
  if (gossip_ == NULL) {
    auto* p = CreateMaybeMessage<::tcash::transport::protobuf::GossipParams>(GetArenaNoVirtual());
    gossip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.gossip)
  return gossip_;
}
inline void RoutingMessage::set_allocated_gossip(::tcash::transport::protobuf::GossipParams* gossip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gossip_;
  }
  if (gossip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gossip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gossip, submessage_arena);
    }
    set_has_gossip();
  } else {
    clear_has_gossip();
  }
  gossip_ = gossip;
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.gossip)
}

// optional string debug = 18;
inline bool RoutingMessage::has_debug() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoutingMessage::set_has_debug() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoutingMessage::clear_has_debug() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoutingMessage::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
inline const ::std::string& RoutingMessage::debug() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.debug)
  return debug_.GetNoArena();
}
inline void RoutingMessage::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.debug)
}
#if LANG_CXX11
inline void RoutingMessage::set_debug(::std::string&& value) {
  set_has_debug();
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.debug)
}
#endif
inline void RoutingMessage::set_debug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.debug)
}
inline void RoutingMessage::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.debug)
}
inline ::std::string* RoutingMessage::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_debug() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.debug)
  if (!has_debug()) {
    return NULL;
  }
  clear_has_debug();
  return debug_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.debug)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace tcash

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transport_2eproto
