// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_transport_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GossipParams;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HopInfo;
}  // namespace protobuf_transport_2eproto
namespace tcash {
namespace transport {
namespace protobuf {
class HopInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HopInfo>
      _instance;
} _HopInfo_default_instance_;
class GossipParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GossipParams>
      _instance;
} _GossipParams_default_instance_;
class GossipSyncBlockDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GossipSyncBlockData>
      _instance;
} _GossipSyncBlockData_default_instance_;
class RoutingMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingMessage>
      _instance;
} _RoutingMessage_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace tcash
namespace protobuf_transport_2eproto {
static void InitDefaultsHopInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_HopInfo_default_instance_;
    new (ptr) ::tcash::transport::protobuf::HopInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::HopInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HopInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHopInfo}, {}};

static void InitDefaultsGossipParams() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_GossipParams_default_instance_;
    new (ptr) ::tcash::transport::protobuf::GossipParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::GossipParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GossipParams =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGossipParams}, {}};

static void InitDefaultsGossipSyncBlockData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_GossipSyncBlockData_default_instance_;
    new (ptr) ::tcash::transport::protobuf::GossipSyncBlockData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::GossipSyncBlockData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GossipSyncBlockData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGossipSyncBlockData}, {}};

static void InitDefaultsRoutingMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_RoutingMessage_default_instance_;
    new (ptr) ::tcash::transport::protobuf::RoutingMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::RoutingMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RoutingMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRoutingMessage}, {
      &protobuf_transport_2eproto::scc_info_HopInfo.base,
      &protobuf_transport_2eproto::scc_info_GossipParams.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HopInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GossipParams.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GossipSyncBlockData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingMessage.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, port_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, neighber_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, stcash_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, gossip_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, max_hop_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, overlap_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, header_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, diff_net_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, header_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, block_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, src_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, des_node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, ack_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, hop_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, hop_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, src_service_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, des_service_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, msg_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, is_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, broadcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, bloomfilter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, xid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, gossip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, debug_),
  0,
  1,
  6,
  2,
  7,
  8,
  9,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  ~0u,
  3,
  15,
  5,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::tcash::transport::protobuf::HopInfo)},
  { 11, 28, sizeof(::tcash::transport::protobuf::GossipParams)},
  { 40, 47, sizeof(::tcash::transport::protobuf::GossipSyncBlockData)},
  { 49, 72, sizeof(::tcash::transport::protobuf::RoutingMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcash::transport::protobuf::_HopInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcash::transport::protobuf::_GossipParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcash::transport::protobuf::_GossipSyncBlockData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcash::transport::protobuf::_RoutingMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "transport.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017transport.proto\022\026tcash.transport.protobu"
      "f\"4\n\007HopInfo\022\017\n\007node_id\030\001 \001(\014\022\n\n\002ip\030\002 \001("
      "\014\022\014\n\004port\030\003 \001(\005\"\350\001\n\014GossipParams\022\026\n\016neig"
      "hber_count\030\001 \001(\r\022\022\n\nstcash_times\030\002 \001(\r\022\023\n\013"
      "gossip_type\030\003 \001(\005\022\023\n\013max_hop_num\030\004 \001(\r\022\014"
      "\n\004sit1\030\005 \001(\004\022\014\n\004sit2\030\006 \001(\004\022\014\n\004sit3\030\007 \001(\004"
      "\022\014\n\004sit4\030\010 \001(\004\022\024\n\014overlap_rate\030\t \001(\r\022\023\n\013"
      "header_hash\030\n \001(\014\022\r\n\005block\030\013 \001(\014\022\020\n\010diff"
      "_net\030\014 \001(\010\"9\n\023GossipSyncBlockData\022\023\n\013hea"
      "der_hash\030\001 \001(\014\022\r\n\005block\030\002 \001(\014\"\232\003\n\016Routin"
      "gMessage\022\023\n\013src_node_id\030\001 \001(\014\022\023\n\013des_nod"
      "e_id\030\002 \001(\014\022\014\n\004type\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\n"
      "\n\002id\030\005 \001(\r\022\016\n\006ack_id\030\006 \001(\r\022\017\n\007hop_num\030\007 "
      "\001(\r\0222\n\thop_nodes\030\010 \003(\0132\037.tcash.transport.p"
      "rotobuf.HopInfo\022\030\n\020src_service_type\030\t \001("
      "\004\022\030\n\020des_service_type\030\n \001(\004\022\020\n\010msg_hash\030"
      "\013 \001(\r\022\017\n\007is_root\030\014 \001(\010\022\021\n\tbroadcast\030\r \001("
      "\010\022\023\n\013bloomfilter\030\016 \003(\004\022\013\n\003xid\030\017 \001(\014\022\020\n\010p"
      "riority\030\020 \001(\r\0224\n\006gossip\030\021 \001(\0132$.tcash.tran"
      "sport.protobuf.GossipParams\022\r\n\005debug\030\022 \001"
      "(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 802);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transport.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_transport_2eproto
namespace tcash {
namespace transport {
namespace protobuf {

// ===================================================================

void HopInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HopInfo::kNodeIdFieldNumber;
const int HopInfo::kIpFieldNumber;
const int HopInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HopInfo::HopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transport_2eproto::scc_info_HopInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcash.transport.protobuf.HopInfo)
}
HopInfo::HopInfo(const HopInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_id()) {
    node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.HopInfo)
}

void HopInfo::SharedCtor() {
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

HopInfo::~HopInfo() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.HopInfo)
  SharedDtor();
}

void HopInfo::SharedDtor() {
  node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HopInfo::descriptor() {
  ::protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HopInfo& HopInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transport_2eproto::scc_info_HopInfo.base);
  return *internal_default_instance();
}


void HopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.HopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcash.transport.protobuf.HopInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcash.transport.protobuf.HopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcash.transport.protobuf.HopInfo)
  return false;
#undef DO_
}

void HopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcash.transport.protobuf.HopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node_id(), output);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tcash.transport.protobuf.HopInfo)
}

::google::protobuf::uint8* HopInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.HopInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node_id(), target);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.HopInfo)
  return target;
}

size_t HopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.HopInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node_id());
    }

    // optional bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.HopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HopInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HopInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.HopInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.HopInfo)
    MergeFrom(*source);
  }
}

void HopInfo::MergeFrom(const HopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.HopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_node_id();
      node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HopInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.HopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopInfo::CopyFrom(const HopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.HopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopInfo::IsInitialized() const {
  return true;
}

void HopInfo::Swap(HopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HopInfo::InternalSwap(HopInfo* other) {
  using std::swap;
  node_id_.Swap(&other->node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HopInfo::GetMetadata() const {
  protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GossipParams::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GossipParams::kNeighberCountFieldNumber;
const int GossipParams::kStcashTimesFieldNumber;
const int GossipParams::kGossipTypeFieldNumber;
const int GossipParams::kMaxHopNumFieldNumber;
const int GossipParams::kSit1FieldNumber;
const int GossipParams::kSit2FieldNumber;
const int GossipParams::kSit3FieldNumber;
const int GossipParams::kSit4FieldNumber;
const int GossipParams::kOverlapRateFieldNumber;
const int GossipParams::kHeaderHashFieldNumber;
const int GossipParams::kBlockFieldNumber;
const int GossipParams::kDiffNetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GossipParams::GossipParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transport_2eproto::scc_info_GossipParams.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcash.transport.protobuf.GossipParams)
}
GossipParams::GossipParams(const GossipParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_hash()) {
    header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
  }
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block()) {
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  ::memcpy(&neighber_count_, &from.neighber_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&diff_net_) -
    reinterpret_cast<char*>(&neighber_count_)) + sizeof(diff_net_));
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.GossipParams)
}

void GossipParams::SharedCtor() {
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&neighber_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diff_net_) -
      reinterpret_cast<char*>(&neighber_count_)) + sizeof(diff_net_));
}

GossipParams::~GossipParams() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.GossipParams)
  SharedDtor();
}

void GossipParams::SharedDtor() {
  header_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GossipParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GossipParams::descriptor() {
  ::protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GossipParams& GossipParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transport_2eproto::scc_info_GossipParams.base);
  return *internal_default_instance();
}


void GossipParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.GossipParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      header_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      block_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&neighber_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sit2_) -
        reinterpret_cast<char*>(&neighber_count_)) + sizeof(sit2_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&sit3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diff_net_) -
        reinterpret_cast<char*>(&sit3_)) + sizeof(diff_net_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GossipParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcash.transport.protobuf.GossipParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 neighber_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_neighber_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighber_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stcash_times = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_stcash_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stcash_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gossip_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_gossip_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gossip_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_hop_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_hop_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hop_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sit1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sit1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sit1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sit2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sit2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sit2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sit3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sit3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sit3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sit4 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sit4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sit4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 overlap_rate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_overlap_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overlap_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes header_hash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes block = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool diff_net = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_diff_net();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diff_net_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcash.transport.protobuf.GossipParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcash.transport.protobuf.GossipParams)
  return false;
#undef DO_
}

void GossipParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcash.transport.protobuf.GossipParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 neighber_count = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->neighber_count(), output);
  }

  // optional uint32 stcash_times = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stcash_times(), output);
  }

  // optional int32 gossip_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gossip_type(), output);
  }

  // optional uint32 max_hop_num = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_hop_num(), output);
  }

  // optional uint64 sit1 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sit1(), output);
  }

  // optional uint64 sit2 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sit2(), output);
  }

  // optional uint64 sit3 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sit3(), output);
  }

  // optional uint64 sit4 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sit4(), output);
  }

  // optional uint32 overlap_rate = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->overlap_rate(), output);
  }

  // optional bytes header_hash = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->header_hash(), output);
  }

  // optional bytes block = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->block(), output);
  }

  // optional bool diff_net = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->diff_net(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tcash.transport.protobuf.GossipParams)
}

::google::protobuf::uint8* GossipParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.GossipParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 neighber_count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->neighber_count(), target);
  }

  // optional uint32 stcash_times = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stcash_times(), target);
  }

  // optional int32 gossip_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gossip_type(), target);
  }

  // optional uint32 max_hop_num = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_hop_num(), target);
  }

  // optional uint64 sit1 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sit1(), target);
  }

  // optional uint64 sit2 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sit2(), target);
  }

  // optional uint64 sit3 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sit3(), target);
  }

  // optional uint64 sit4 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sit4(), target);
  }

  // optional uint32 overlap_rate = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->overlap_rate(), target);
  }

  // optional bytes header_hash = 10;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->header_hash(), target);
  }

  // optional bytes block = 11;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->block(), target);
  }

  // optional bool diff_net = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->diff_net(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.GossipParams)
  return target;
}

size_t GossipParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.GossipParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes header_hash = 10;
    if (has_header_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header_hash());
    }

    // optional bytes block = 11;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }

    // optional uint32 neighber_count = 1;
    if (has_neighber_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighber_count());
    }

    // optional uint32 stcash_times = 2;
    if (has_stcash_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stcash_times());
    }

    // optional int32 gossip_type = 3;
    if (has_gossip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gossip_type());
    }

    // optional uint32 max_hop_num = 4;
    if (has_max_hop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_hop_num());
    }

    // optional uint64 sit1 = 5;
    if (has_sit1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sit1());
    }

    // optional uint64 sit2 = 6;
    if (has_sit2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sit2());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint64 sit3 = 7;
    if (has_sit3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sit3());
    }

    // optional uint64 sit4 = 8;
    if (has_sit4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sit4());
    }

    // optional uint32 overlap_rate = 9;
    if (has_overlap_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overlap_rate());
    }

    // optional bool diff_net = 12;
    if (has_diff_net()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.GossipParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GossipParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.GossipParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.GossipParams)
    MergeFrom(*source);
  }
}

void GossipParams::MergeFrom(const GossipParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.GossipParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header_hash();
      header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_block();
      block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
    }
    if (cached_has_bits & 0x00000004u) {
      neighber_count_ = from.neighber_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      stcash_times_ = from.stcash_times_;
    }
    if (cached_has_bits & 0x00000010u) {
      gossip_type_ = from.gossip_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_hop_num_ = from.max_hop_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      sit1_ = from.sit1_;
    }
    if (cached_has_bits & 0x00000080u) {
      sit2_ = from.sit2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      sit3_ = from.sit3_;
    }
    if (cached_has_bits & 0x00000200u) {
      sit4_ = from.sit4_;
    }
    if (cached_has_bits & 0x00000400u) {
      overlap_rate_ = from.overlap_rate_;
    }
    if (cached_has_bits & 0x00000800u) {
      diff_net_ = from.diff_net_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GossipParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.GossipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipParams::CopyFrom(const GossipParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.GossipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipParams::IsInitialized() const {
  return true;
}

void GossipParams::Swap(GossipParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GossipParams::InternalSwap(GossipParams* other) {
  using std::swap;
  header_hash_.Swap(&other->header_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_.Swap(&other->block_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(neighber_count_, other->neighber_count_);
  swap(stcash_times_, other->stcash_times_);
  swap(gossip_type_, other->gossip_type_);
  swap(max_hop_num_, other->max_hop_num_);
  swap(sit1_, other->sit1_);
  swap(sit2_, other->sit2_);
  swap(sit3_, other->sit3_);
  swap(sit4_, other->sit4_);
  swap(overlap_rate_, other->overlap_rate_);
  swap(diff_net_, other->diff_net_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GossipParams::GetMetadata() const {
  protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GossipSyncBlockData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GossipSyncBlockData::kHeaderHashFieldNumber;
const int GossipSyncBlockData::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GossipSyncBlockData::GossipSyncBlockData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transport_2eproto::scc_info_GossipSyncBlockData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcash.transport.protobuf.GossipSyncBlockData)
}
GossipSyncBlockData::GossipSyncBlockData(const GossipSyncBlockData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header_hash()) {
    header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
  }
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block()) {
    block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.GossipSyncBlockData)
}

void GossipSyncBlockData::SharedCtor() {
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GossipSyncBlockData::~GossipSyncBlockData() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.GossipSyncBlockData)
  SharedDtor();
}

void GossipSyncBlockData::SharedDtor() {
  header_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GossipSyncBlockData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GossipSyncBlockData::descriptor() {
  ::protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GossipSyncBlockData& GossipSyncBlockData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transport_2eproto::scc_info_GossipSyncBlockData.base);
  return *internal_default_instance();
}


void GossipSyncBlockData::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.GossipSyncBlockData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      header_hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      block_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GossipSyncBlockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcash.transport.protobuf.GossipSyncBlockData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes header_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcash.transport.protobuf.GossipSyncBlockData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcash.transport.protobuf.GossipSyncBlockData)
  return false;
#undef DO_
}

void GossipSyncBlockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcash.transport.protobuf.GossipSyncBlockData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes header_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->header_hash(), output);
  }

  // optional bytes block = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->block(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tcash.transport.protobuf.GossipSyncBlockData)
}

::google::protobuf::uint8* GossipSyncBlockData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.GossipSyncBlockData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes header_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->header_hash(), target);
  }

  // optional bytes block = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->block(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.GossipSyncBlockData)
  return target;
}

size_t GossipSyncBlockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.GossipSyncBlockData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes header_hash = 1;
    if (has_header_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->header_hash());
    }

    // optional bytes block = 2;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipSyncBlockData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipSyncBlockData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GossipSyncBlockData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.GossipSyncBlockData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.GossipSyncBlockData)
    MergeFrom(*source);
  }
}

void GossipSyncBlockData::MergeFrom(const GossipSyncBlockData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header_hash();
      header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_block();
      block_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block_);
    }
  }
}

void GossipSyncBlockData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipSyncBlockData::CopyFrom(const GossipSyncBlockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipSyncBlockData::IsInitialized() const {
  return true;
}

void GossipSyncBlockData::Swap(GossipSyncBlockData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GossipSyncBlockData::InternalSwap(GossipSyncBlockData* other) {
  using std::swap;
  header_hash_.Swap(&other->header_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_.Swap(&other->block_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GossipSyncBlockData::GetMetadata() const {
  protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutingMessage::InitAsDefaultInstance() {
  ::tcash::transport::protobuf::_RoutingMessage_default_instance_._instance.get_mutable()->gossip_ = const_cast< ::tcash::transport::protobuf::GossipParams*>(
      ::tcash::transport::protobuf::GossipParams::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingMessage::kSrcNodeIdFieldNumber;
const int RoutingMessage::kDesNodeIdFieldNumber;
const int RoutingMessage::kTypeFieldNumber;
const int RoutingMessage::kDataFieldNumber;
const int RoutingMessage::kIdFieldNumber;
const int RoutingMessage::kAckIdFieldNumber;
const int RoutingMessage::kHopNumFieldNumber;
const int RoutingMessage::kHopNodesFieldNumber;
const int RoutingMessage::kSrcServiceTypeFieldNumber;
const int RoutingMessage::kDesServiceTypeFieldNumber;
const int RoutingMessage::kMsgHashFieldNumber;
const int RoutingMessage::kIsRootFieldNumber;
const int RoutingMessage::kBroadcastFieldNumber;
const int RoutingMessage::kBloomfilterFieldNumber;
const int RoutingMessage::kXidFieldNumber;
const int RoutingMessage::kPriorityFieldNumber;
const int RoutingMessage::kGossipFieldNumber;
const int RoutingMessage::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingMessage::RoutingMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_transport_2eproto::scc_info_RoutingMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcash.transport.protobuf.RoutingMessage)
}
RoutingMessage::RoutingMessage(const RoutingMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hop_nodes_(from.hop_nodes_),
      bloomfilter_(from.bloomfilter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_node_id()) {
    src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
  }
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_des_node_id()) {
    des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  xid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_xid()) {
    xid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xid_);
  }
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  if (from.has_gossip()) {
    gossip_ = new ::tcash::transport::protobuf::GossipParams(*from.gossip_);
  } else {
    gossip_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&type_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.RoutingMessage)
}

void RoutingMessage::SharedCtor() {
  src_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gossip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&gossip_)) + sizeof(priority_));
}

RoutingMessage::~RoutingMessage() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.RoutingMessage)
  SharedDtor();
}

void RoutingMessage::SharedDtor() {
  src_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_node_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gossip_;
}

void RoutingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoutingMessage::descriptor() {
  ::protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingMessage& RoutingMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_transport_2eproto::scc_info_RoutingMessage.base);
  return *internal_default_instance();
}


void RoutingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.RoutingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hop_nodes_.Clear();
  bloomfilter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      src_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      des_node_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      xid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      debug_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gossip_ != NULL);
      gossip_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(id_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&ack_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&ack_id_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcash.transport.protobuf.RoutingMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes src_node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes des_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_des_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ack_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hop_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hop_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hop_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hop_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 src_service_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_src_service_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_service_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 des_service_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_des_service_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &des_service_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msg_hash = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_msg_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_root = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_root();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 bloomfilter = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 112u, input, this->mutable_bloomfilter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_bloomfilter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes xid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tcash.transport.protobuf.GossipParams gossip = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gossip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), static_cast<int>(this->debug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tcash.transport.protobuf.RoutingMessage.debug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcash.transport.protobuf.RoutingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcash.transport.protobuf.RoutingMessage)
  return false;
#undef DO_
}

void RoutingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcash.transport.protobuf.RoutingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->src_node_id(), output);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->des_node_id(), output);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // optional uint32 ack_id = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ack_id(), output);
  }

  // optional uint32 hop_num = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hop_num(), output);
  }

  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hop_nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->hop_nodes(static_cast<int>(i)),
      output);
  }

  // optional uint64 src_service_type = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->src_service_type(), output);
  }

  // optional uint64 des_service_type = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->des_service_type(), output);
  }

  // optional uint32 msg_hash = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->msg_hash(), output);
  }

  // optional bool is_root = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_root(), output);
  }

  // optional bool broadcast = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->broadcast(), output);
  }

  // repeated uint64 bloomfilter = 14;
  for (int i = 0, n = this->bloomfilter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      14, this->bloomfilter(i), output);
  }

  // optional bytes xid = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->xid(), output);
  }

  // optional uint32 priority = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->priority(), output);
  }

  // optional .tcash.transport.protobuf.GossipParams gossip = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_gossip(), output);
  }

  // optional string debug = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcash.transport.protobuf.RoutingMessage.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tcash.transport.protobuf.RoutingMessage)
}

::google::protobuf::uint8* RoutingMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.RoutingMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->src_node_id(), target);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->des_node_id(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // optional uint32 ack_id = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ack_id(), target);
  }

  // optional uint32 hop_num = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hop_num(), target);
  }

  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hop_nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->hop_nodes(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 src_service_type = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->src_service_type(), target);
  }

  // optional uint64 des_service_type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->des_service_type(), target);
  }

  // optional uint32 msg_hash = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->msg_hash(), target);
  }

  // optional bool is_root = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_root(), target);
  }

  // optional bool broadcast = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->broadcast(), target);
  }

  // repeated uint64 bloomfilter = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(14, this->bloomfilter_, target);

  // optional bytes xid = 15;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->xid(), target);
  }

  // optional uint32 priority = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->priority(), target);
  }

  // optional .tcash.transport.protobuf.GossipParams gossip = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_gossip(), deterministic, target);
  }

  // optional string debug = 18;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tcash.transport.protobuf.RoutingMessage.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.RoutingMessage)
  return target;
}

size_t RoutingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.RoutingMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->hop_nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hop_nodes(static_cast<int>(i)));
    }
  }

  // repeated uint64 bloomfilter = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->bloomfilter_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bloomfilter_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes src_node_id = 1;
    if (has_src_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_node_id());
    }

    // optional bytes des_node_id = 2;
    if (has_des_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->des_node_id());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes xid = 15;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->xid());
    }

    // optional string debug = 18;
    if (has_debug()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug());
    }

    // optional .tcash.transport.protobuf.GossipParams gossip = 17;
    if (has_gossip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gossip_);
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 ack_id = 6;
    if (has_ack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_id());
    }

    // optional uint32 hop_num = 7;
    if (has_hop_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hop_num());
    }

    // optional uint64 src_service_type = 9;
    if (has_src_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_service_type());
    }

    // optional uint64 des_service_type = 10;
    if (has_des_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->des_service_type());
    }

    // optional uint32 msg_hash = 11;
    if (has_msg_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_hash());
    }

    // optional bool is_root = 12;
    if (has_is_root()) {
      total_size += 1 + 1;
    }

    // optional bool broadcast = 13;
    if (has_broadcast()) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 16;
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.RoutingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.RoutingMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.RoutingMessage)
    MergeFrom(*source);
  }
}

void RoutingMessage::MergeFrom(const RoutingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.RoutingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hop_nodes_.MergeFrom(from.hop_nodes_);
  bloomfilter_.MergeFrom(from.bloomfilter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_src_node_id();
      src_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_node_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_des_node_id();
      des_node_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.des_node_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_xid();
      xid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gossip()->::tcash::transport::protobuf::GossipParams::MergeFrom(from.gossip());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ack_id_ = from.ack_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      hop_num_ = from.hop_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      src_service_type_ = from.src_service_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      des_service_type_ = from.des_service_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      msg_hash_ = from.msg_hash_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_root_ = from.is_root_;
    }
    if (cached_has_bits & 0x00004000u) {
      broadcast_ = from.broadcast_;
    }
    if (cached_has_bits & 0x00008000u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.RoutingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingMessage::CopyFrom(const RoutingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.RoutingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingMessage::IsInitialized() const {
  return true;
}

void RoutingMessage::Swap(RoutingMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingMessage::InternalSwap(RoutingMessage* other) {
  using std::swap;
  CastToBase(&hop_nodes_)->InternalSwap(CastToBase(&other->hop_nodes_));
  bloomfilter_.InternalSwap(&other->bloomfilter_);
  src_node_id_.Swap(&other->src_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  des_node_id_.Swap(&other->des_node_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  xid_.Swap(&other->xid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  debug_.Swap(&other->debug_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gossip_, other->gossip_);
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(ack_id_, other->ack_id_);
  swap(hop_num_, other->hop_num_);
  swap(src_service_type_, other->src_service_type_);
  swap(des_service_type_, other->des_service_type_);
  swap(msg_hash_, other->msg_hash_);
  swap(is_root_, other->is_root_);
  swap(broadcast_, other->broadcast_);
  swap(priority_, other->priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoutingMessage::GetMetadata() const {
  protobuf_transport_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transport_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace transport
}  // namespace tcash
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tcash::transport::protobuf::HopInfo* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::HopInfo >(Arena* arena) {
  return Arena::CreateInternal< ::tcash::transport::protobuf::HopInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tcash::transport::protobuf::GossipParams* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::GossipParams >(Arena* arena) {
  return Arena::CreateInternal< ::tcash::transport::protobuf::GossipParams >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tcash::transport::protobuf::GossipSyncBlockData* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::GossipSyncBlockData >(Arena* arena) {
  return Arena::CreateInternal< ::tcash::transport::protobuf::GossipSyncBlockData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tcash::transport::protobuf::RoutingMessage* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::RoutingMessage >(Arena* arena) {
  return Arena::CreateInternal< ::tcash::transport::protobuf::RoutingMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
