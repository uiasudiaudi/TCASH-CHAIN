// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2eproto;
namespace tcash {
namespace transport {
namespace protobuf {
class GossipParams;
class GossipParamsDefaultTypeInternal;
extern GossipParamsDefaultTypeInternal _GossipParams_default_instance_;
class GossipSyncBlockData;
class GossipSyncBlockDataDefaultTypeInternal;
extern GossipSyncBlockDataDefaultTypeInternal _GossipSyncBlockData_default_instance_;
class HopInfo;
class HopInfoDefaultTypeInternal;
extern HopInfoDefaultTypeInternal _HopInfo_default_instance_;
class RoutingMessage;
class RoutingMessageDefaultTypeInternal;
extern RoutingMessageDefaultTypeInternal _RoutingMessage_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace tcash
PROTOBUF_NAMESPACE_OPEN
template<> ::tcash::transport::protobuf::GossipParams* Arena::CreateMaybeMessage<::tcash::transport::protobuf::GossipParams>(Arena*);
template<> ::tcash::transport::protobuf::GossipSyncBlockData* Arena::CreateMaybeMessage<::tcash::transport::protobuf::GossipSyncBlockData>(Arena*);
template<> ::tcash::transport::protobuf::HopInfo* Arena::CreateMaybeMessage<::tcash::transport::protobuf::HopInfo>(Arena*);
template<> ::tcash::transport::protobuf::RoutingMessage* Arena::CreateMaybeMessage<::tcash::transport::protobuf::RoutingMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tcash {
namespace transport {
namespace protobuf {

// ===================================================================

class HopInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.HopInfo) */ {
 public:
  inline HopInfo() : HopInfo(nullptr) {};
  virtual ~HopInfo();

  HopInfo(const HopInfo& from);
  HopInfo(HopInfo&& from) noexcept
    : HopInfo() {
    *this = ::std::move(from);
  }

  inline HopInfo& operator=(const HopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HopInfo& operator=(HopInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HopInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HopInfo* internal_default_instance() {
    return reinterpret_cast<const HopInfo*>(
               &_HopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HopInfo& a, HopInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HopInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HopInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HopInfo* New() const final {
    return CreateMaybeMessage<HopInfo>(nullptr);
  }

  HopInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HopInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HopInfo& from);
  void MergeFrom(const HopInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HopInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcash.transport.protobuf.HopInfo";
  }
  protected:
  explicit HopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // optional bytes node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_node_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_node_id(
      std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // optional bytes ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional int32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.HopInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class GossipParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.GossipParams) */ {
 public:
  inline GossipParams() : GossipParams(nullptr) {};
  virtual ~GossipParams();

  GossipParams(const GossipParams& from);
  GossipParams(GossipParams&& from) noexcept
    : GossipParams() {
    *this = ::std::move(from);
  }

  inline GossipParams& operator=(const GossipParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipParams& operator=(GossipParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipParams* internal_default_instance() {
    return reinterpret_cast<const GossipParams*>(
               &_GossipParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GossipParams& a, GossipParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GossipParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GossipParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GossipParams* New() const final {
    return CreateMaybeMessage<GossipParams>(nullptr);
  }

  GossipParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipParams& from);
  void MergeFrom(const GossipParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcash.transport.protobuf.GossipParams";
  }
  protected:
  explicit GossipParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderHashFieldNumber = 10,
    kBlockFieldNumber = 11,
    kNeighberCountFieldNumber = 1,
    kStcashTimesFieldNumber = 2,
    kGossipTypeFieldNumber = 3,
    kMaxHopNumFieldNumber = 4,
    kSit1FieldNumber = 5,
    kSit2FieldNumber = 6,
    kSit3FieldNumber = 7,
    kSit4FieldNumber = 8,
    kOverlapRateFieldNumber = 9,
    kDiffNetFieldNumber = 12,
  };
  // optional bytes header_hash = 10;
  bool has_header_hash() const;
  private:
  bool _internal_has_header_hash() const;
  public:
  void clear_header_hash();
  const std::string& header_hash() const;
  void set_header_hash(const std::string& value);
  void set_header_hash(std::string&& value);
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  std::string* mutable_header_hash();
  std::string* release_header_hash();
  void set_allocated_header_hash(std::string* header_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_header_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_header_hash(
      std::string* header_hash);
  private:
  const std::string& _internal_header_hash() const;
  void _internal_set_header_hash(const std::string& value);
  std::string* _internal_mutable_header_hash();
  public:

  // optional bytes block = 11;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_block();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_block(
      std::string* block);
  private:
  const std::string& _internal_block() const;
  void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // optional uint32 neighber_count = 1;
  bool has_neighber_count() const;
  private:
  bool _internal_has_neighber_count() const;
  public:
  void clear_neighber_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 neighber_count() const;
  void set_neighber_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_neighber_count() const;
  void _internal_set_neighber_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stcash_times = 2;
  bool has_stcash_times() const;
  private:
  bool _internal_has_stcash_times() const;
  public:
  void clear_stcash_times();
  ::PROTOBUF_NAMESPACE_ID::uint32 stcash_times() const;
  void set_stcash_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stcash_times() const;
  void _internal_set_stcash_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 gossip_type = 3;
  bool has_gossip_type() const;
  private:
  bool _internal_has_gossip_type() const;
  public:
  void clear_gossip_type();
  ::PROTOBUF_NAMESPACE_ID::int32 gossip_type() const;
  void set_gossip_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gossip_type() const;
  void _internal_set_gossip_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 max_hop_num = 4;
  bool has_max_hop_num() const;
  private:
  bool _internal_has_max_hop_num() const;
  public:
  void clear_max_hop_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hop_num() const;
  void set_max_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_hop_num() const;
  void _internal_set_max_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 sit1 = 5;
  bool has_sit1() const;
  private:
  bool _internal_has_sit1() const;
  public:
  void clear_sit1();
  ::PROTOBUF_NAMESPACE_ID::uint64 sit1() const;
  void set_sit1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sit1() const;
  void _internal_set_sit1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 sit2 = 6;
  bool has_sit2() const;
  private:
  bool _internal_has_sit2() const;
  public:
  void clear_sit2();
  ::PROTOBUF_NAMESPACE_ID::uint64 sit2() const;
  void set_sit2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sit2() const;
  void _internal_set_sit2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 sit3 = 7;
  bool has_sit3() const;
  private:
  bool _internal_has_sit3() const;
  public:
  void clear_sit3();
  ::PROTOBUF_NAMESPACE_ID::uint64 sit3() const;
  void set_sit3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sit3() const;
  void _internal_set_sit3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 sit4 = 8;
  bool has_sit4() const;
  private:
  bool _internal_has_sit4() const;
  public:
  void clear_sit4();
  ::PROTOBUF_NAMESPACE_ID::uint64 sit4() const;
  void set_sit4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sit4() const;
  void _internal_set_sit4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 overlap_rate = 9;
  bool has_overlap_rate() const;
  private:
  bool _internal_has_overlap_rate() const;
  public:
  void clear_overlap_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 overlap_rate() const;
  void set_overlap_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_overlap_rate() const;
  void _internal_set_overlap_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool diff_net = 12;
  bool has_diff_net() const;
  private:
  bool _internal_has_diff_net() const;
  public:
  void clear_diff_net();
  bool diff_net() const;
  void set_diff_net(bool value);
  private:
  bool _internal_diff_net() const;
  void _internal_set_diff_net(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.GossipParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  ::PROTOBUF_NAMESPACE_ID::uint32 neighber_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stcash_times_;
  ::PROTOBUF_NAMESPACE_ID::int32 gossip_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_hop_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sit1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sit2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sit3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sit4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 overlap_rate_;
  bool diff_net_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class GossipSyncBlockData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.GossipSyncBlockData) */ {
 public:
  inline GossipSyncBlockData() : GossipSyncBlockData(nullptr) {};
  virtual ~GossipSyncBlockData();

  GossipSyncBlockData(const GossipSyncBlockData& from);
  GossipSyncBlockData(GossipSyncBlockData&& from) noexcept
    : GossipSyncBlockData() {
    *this = ::std::move(from);
  }

  inline GossipSyncBlockData& operator=(const GossipSyncBlockData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GossipSyncBlockData& operator=(GossipSyncBlockData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GossipSyncBlockData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipSyncBlockData* internal_default_instance() {
    return reinterpret_cast<const GossipSyncBlockData*>(
               &_GossipSyncBlockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GossipSyncBlockData& a, GossipSyncBlockData& b) {
    a.Swap(&b);
  }
  inline void Swap(GossipSyncBlockData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GossipSyncBlockData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GossipSyncBlockData* New() const final {
    return CreateMaybeMessage<GossipSyncBlockData>(nullptr);
  }

  GossipSyncBlockData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GossipSyncBlockData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GossipSyncBlockData& from);
  void MergeFrom(const GossipSyncBlockData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipSyncBlockData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcash.transport.protobuf.GossipSyncBlockData";
  }
  protected:
  explicit GossipSyncBlockData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderHashFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // optional bytes header_hash = 1;
  bool has_header_hash() const;
  private:
  bool _internal_has_header_hash() const;
  public:
  void clear_header_hash();
  const std::string& header_hash() const;
  void set_header_hash(const std::string& value);
  void set_header_hash(std::string&& value);
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  std::string* mutable_header_hash();
  std::string* release_header_hash();
  void set_allocated_header_hash(std::string* header_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_header_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_header_hash(
      std::string* header_hash);
  private:
  const std::string& _internal_header_hash() const;
  void _internal_set_header_hash(const std::string& value);
  std::string* _internal_mutable_header_hash();
  public:

  // optional bytes block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_block();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_block(
      std::string* block);
  private:
  const std::string& _internal_block() const;
  void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.GossipSyncBlockData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  friend struct ::TableStruct_transport_2eproto;
};
// -------------------------------------------------------------------

class RoutingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcash.transport.protobuf.RoutingMessage) */ {
 public:
  inline RoutingMessage() : RoutingMessage(nullptr) {};
  virtual ~RoutingMessage();

  RoutingMessage(const RoutingMessage& from);
  RoutingMessage(RoutingMessage&& from) noexcept
    : RoutingMessage() {
    *this = ::std::move(from);
  }

  inline RoutingMessage& operator=(const RoutingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingMessage& operator=(RoutingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingMessage* internal_default_instance() {
    return reinterpret_cast<const RoutingMessage*>(
               &_RoutingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutingMessage& a, RoutingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingMessage* New() const final {
    return CreateMaybeMessage<RoutingMessage>(nullptr);
  }

  RoutingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingMessage& from);
  void MergeFrom(const RoutingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcash.transport.protobuf.RoutingMessage";
  }
  protected:
  explicit RoutingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_2eproto);
    return ::descriptor_table_transport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopNodesFieldNumber = 8,
    kBloomfilterFieldNumber = 14,
    kSrcNodeIdFieldNumber = 1,
    kDesNodeIdFieldNumber = 2,
    kDataFieldNumber = 4,
    kXidFieldNumber = 15,
    kDebugFieldNumber = 18,
    kGossipFieldNumber = 17,
    kTypeFieldNumber = 3,
    kIdFieldNumber = 5,
    kAckIdFieldNumber = 6,
    kHopNumFieldNumber = 7,
    kSrcServiceTypeFieldNumber = 9,
    kDesServiceTypeFieldNumber = 10,
    kMsgHashFieldNumber = 11,
    kIsRootFieldNumber = 12,
    kBroadcastFieldNumber = 13,
    kPriorityFieldNumber = 16,
  };
  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  int hop_nodes_size() const;
  private:
  int _internal_hop_nodes_size() const;
  public:
  void clear_hop_nodes();
  ::tcash::transport::protobuf::HopInfo* mutable_hop_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >*
      mutable_hop_nodes();
  private:
  const ::tcash::transport::protobuf::HopInfo& _internal_hop_nodes(int index) const;
  ::tcash::transport::protobuf::HopInfo* _internal_add_hop_nodes();
  public:
  const ::tcash::transport::protobuf::HopInfo& hop_nodes(int index) const;
  ::tcash::transport::protobuf::HopInfo* add_hop_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >&
      hop_nodes() const;

  // repeated uint64 bloomfilter = 14;
  int bloomfilter_size() const;
  private:
  int _internal_bloomfilter_size() const;
  public:
  void clear_bloomfilter();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bloomfilter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bloomfilter() const;
  void _internal_add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bloomfilter();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bloomfilter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bloomfilter();

  // optional bytes src_node_id = 1;
  bool has_src_node_id() const;
  private:
  bool _internal_has_src_node_id() const;
  public:
  void clear_src_node_id();
  const std::string& src_node_id() const;
  void set_src_node_id(const std::string& value);
  void set_src_node_id(std::string&& value);
  void set_src_node_id(const char* value);
  void set_src_node_id(const void* value, size_t size);
  std::string* mutable_src_node_id();
  std::string* release_src_node_id();
  void set_allocated_src_node_id(std::string* src_node_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src_node_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src_node_id(
      std::string* src_node_id);
  private:
  const std::string& _internal_src_node_id() const;
  void _internal_set_src_node_id(const std::string& value);
  std::string* _internal_mutable_src_node_id();
  public:

  // optional bytes des_node_id = 2;
  bool has_des_node_id() const;
  private:
  bool _internal_has_des_node_id() const;
  public:
  void clear_des_node_id();
  const std::string& des_node_id() const;
  void set_des_node_id(const std::string& value);
  void set_des_node_id(std::string&& value);
  void set_des_node_id(const char* value);
  void set_des_node_id(const void* value, size_t size);
  std::string* mutable_des_node_id();
  std::string* release_des_node_id();
  void set_allocated_des_node_id(std::string* des_node_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_des_node_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_des_node_id(
      std::string* des_node_id);
  private:
  const std::string& _internal_des_node_id() const;
  void _internal_set_des_node_id(const std::string& value);
  std::string* _internal_mutable_des_node_id();
  public:

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional bytes xid = 15;
  bool has_xid() const;
  private:
  bool _internal_has_xid() const;
  public:
  void clear_xid();
  const std::string& xid() const;
  void set_xid(const std::string& value);
  void set_xid(std::string&& value);
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  std::string* mutable_xid();
  std::string* release_xid();
  void set_allocated_xid(std::string* xid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_xid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_xid(
      std::string* xid);
  private:
  const std::string& _internal_xid() const;
  void _internal_set_xid(const std::string& value);
  std::string* _internal_mutable_xid();
  public:

  // optional string debug = 18;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const std::string& debug() const;
  void set_debug(const std::string& value);
  void set_debug(std::string&& value);
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  std::string* mutable_debug();
  std::string* release_debug();
  void set_allocated_debug(std::string* debug);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_debug();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_debug(
      std::string* debug);
  private:
  const std::string& _internal_debug() const;
  void _internal_set_debug(const std::string& value);
  std::string* _internal_mutable_debug();
  public:

  // optional .tcash.transport.protobuf.GossipParams gossip = 17;
  bool has_gossip() const;
  private:
  bool _internal_has_gossip() const;
  public:
  void clear_gossip();
  const ::tcash::transport::protobuf::GossipParams& gossip() const;
  ::tcash::transport::protobuf::GossipParams* release_gossip();
  ::tcash::transport::protobuf::GossipParams* mutable_gossip();
  void set_allocated_gossip(::tcash::transport::protobuf::GossipParams* gossip);
  private:
  const ::tcash::transport::protobuf::GossipParams& _internal_gossip() const;
  ::tcash::transport::protobuf::GossipParams* _internal_mutable_gossip();
  public:
  void unsafe_arena_set_allocated_gossip(
      ::tcash::transport::protobuf::GossipParams* gossip);
  ::tcash::transport::protobuf::GossipParams* unsafe_arena_release_gossip();

  // optional int32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ack_id = 6;
  bool has_ack_id() const;
  private:
  bool _internal_has_ack_id() const;
  public:
  void clear_ack_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_id() const;
  void set_ack_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack_id() const;
  void _internal_set_ack_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hop_num = 7;
  bool has_hop_num() const;
  private:
  bool _internal_has_hop_num() const;
  public:
  void clear_hop_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 hop_num() const;
  void set_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hop_num() const;
  void _internal_set_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 src_service_type = 9;
  bool has_src_service_type() const;
  private:
  bool _internal_has_src_service_type() const;
  public:
  void clear_src_service_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 src_service_type() const;
  void set_src_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_src_service_type() const;
  void _internal_set_src_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 des_service_type = 10;
  bool has_des_service_type() const;
  private:
  bool _internal_has_des_service_type() const;
  public:
  void clear_des_service_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 des_service_type() const;
  void set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_des_service_type() const;
  void _internal_set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 msg_hash = 11;
  bool has_msg_hash() const;
  private:
  bool _internal_has_msg_hash() const;
  public:
  void clear_msg_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_hash() const;
  void set_msg_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_hash() const;
  void _internal_set_msg_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_root = 12;
  bool has_is_root() const;
  private:
  bool _internal_has_is_root() const;
  public:
  void clear_is_root();
  bool is_root() const;
  void set_is_root(bool value);
  private:
  bool _internal_is_root() const;
  void _internal_set_is_root(bool value);
  public:

  // optional bool broadcast = 13;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // optional uint32 priority = 16;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tcash.transport.protobuf.RoutingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo > hop_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bloomfilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr des_node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_;
  ::tcash::transport::protobuf::GossipParams* gossip_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hop_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 src_service_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 des_service_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_hash_;
  bool is_root_;
  bool broadcast_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  friend struct ::TableStruct_transport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HopInfo

// optional bytes node_id = 1;
inline bool HopInfo::_internal_has_node_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HopInfo::has_node_id() const {
  return _internal_has_node_id();
}
inline void HopInfo::clear_node_id() {
  node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HopInfo::node_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.HopInfo.node_id)
  return _internal_node_id();
}
inline void HopInfo::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.HopInfo.node_id)
}
inline std::string* HopInfo::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.HopInfo.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& HopInfo::_internal_node_id() const {
  return node_id_.Get();
}
inline void HopInfo::_internal_set_node_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HopInfo::set_node_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  node_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.HopInfo.node_id)
}
inline void HopInfo::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.HopInfo.node_id)
}
inline void HopInfo::set_node_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.HopInfo.node_id)
}
inline std::string* HopInfo::_internal_mutable_node_id() {
  _has_bits_[0] |= 0x00000001u;
  return node_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HopInfo::release_node_id() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.HopInfo.node_id)
  if (!_internal_has_node_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return node_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HopInfo::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.HopInfo.node_id)
}
inline std::string* HopInfo::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.HopInfo.node_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return node_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HopInfo::unsafe_arena_set_allocated_node_id(
    std::string* node_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (node_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.HopInfo.node_id)
}

// optional bytes ip = 2;
inline bool HopInfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HopInfo::has_ip() const {
  return _internal_has_ip();
}
inline void HopInfo::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HopInfo::ip() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.HopInfo.ip)
  return _internal_ip();
}
inline void HopInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.HopInfo.ip)
}
inline std::string* HopInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.HopInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& HopInfo::_internal_ip() const {
  return ip_.Get();
}
inline void HopInfo::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HopInfo::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.HopInfo.ip)
}
inline void HopInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.HopInfo.ip)
}
inline void HopInfo::set_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.HopInfo.ip)
}
inline std::string* HopInfo::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000002u;
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HopInfo::release_ip() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.HopInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HopInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.HopInfo.ip)
}
inline std::string* HopInfo::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.HopInfo.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HopInfo::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.HopInfo.ip)
}

// optional int32 port = 3;
inline bool HopInfo::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HopInfo::has_port() const {
  return _internal_has_port();
}
inline void HopInfo::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HopInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HopInfo::port() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.HopInfo.port)
  return _internal_port();
}
inline void HopInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void HopInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.HopInfo.port)
}

// -------------------------------------------------------------------

// GossipParams

// optional uint32 neighber_count = 1;
inline bool GossipParams::_internal_has_neighber_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GossipParams::has_neighber_count() const {
  return _internal_has_neighber_count();
}
inline void GossipParams::clear_neighber_count() {
  neighber_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::_internal_neighber_count() const {
  return neighber_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::neighber_count() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.neighber_count)
  return _internal_neighber_count();
}
inline void GossipParams::_internal_set_neighber_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  neighber_count_ = value;
}
inline void GossipParams::set_neighber_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_neighber_count(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.neighber_count)
}

// optional uint32 stcash_times = 2;
inline bool GossipParams::_internal_has_stcash_times() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GossipParams::has_stcash_times() const {
  return _internal_has_stcash_times();
}
inline void GossipParams::clear_stcash_times() {
  stcash_times_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::_internal_stcash_times() const {
  return stcash_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::stcash_times() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.stcash_times)
  return _internal_stcash_times();
}
inline void GossipParams::_internal_set_stcash_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  stcash_times_ = value;
}
inline void GossipParams::set_stcash_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stcash_times(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.stcash_times)
}

// optional int32 gossip_type = 3;
inline bool GossipParams::_internal_has_gossip_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GossipParams::has_gossip_type() const {
  return _internal_has_gossip_type();
}
inline void GossipParams::clear_gossip_type() {
  gossip_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GossipParams::_internal_gossip_type() const {
  return gossip_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GossipParams::gossip_type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.gossip_type)
  return _internal_gossip_type();
}
inline void GossipParams::_internal_set_gossip_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  gossip_type_ = value;
}
inline void GossipParams::set_gossip_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gossip_type(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.gossip_type)
}

// optional uint32 max_hop_num = 4;
inline bool GossipParams::_internal_has_max_hop_num() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GossipParams::has_max_hop_num() const {
  return _internal_has_max_hop_num();
}
inline void GossipParams::clear_max_hop_num() {
  max_hop_num_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::_internal_max_hop_num() const {
  return max_hop_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::max_hop_num() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.max_hop_num)
  return _internal_max_hop_num();
}
inline void GossipParams::_internal_set_max_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_hop_num_ = value;
}
inline void GossipParams::set_max_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_hop_num(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.max_hop_num)
}

// optional uint64 sit1 = 5;
inline bool GossipParams::_internal_has_sit1() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GossipParams::has_sit1() const {
  return _internal_has_sit1();
}
inline void GossipParams::clear_sit1() {
  sit1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::_internal_sit1() const {
  return sit1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::sit1() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit1)
  return _internal_sit1();
}
inline void GossipParams::_internal_set_sit1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  sit1_ = value;
}
inline void GossipParams::set_sit1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sit1(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit1)
}

// optional uint64 sit2 = 6;
inline bool GossipParams::_internal_has_sit2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GossipParams::has_sit2() const {
  return _internal_has_sit2();
}
inline void GossipParams::clear_sit2() {
  sit2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::_internal_sit2() const {
  return sit2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::sit2() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit2)
  return _internal_sit2();
}
inline void GossipParams::_internal_set_sit2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  sit2_ = value;
}
inline void GossipParams::set_sit2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sit2(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit2)
}

// optional uint64 sit3 = 7;
inline bool GossipParams::_internal_has_sit3() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GossipParams::has_sit3() const {
  return _internal_has_sit3();
}
inline void GossipParams::clear_sit3() {
  sit3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::_internal_sit3() const {
  return sit3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::sit3() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit3)
  return _internal_sit3();
}
inline void GossipParams::_internal_set_sit3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  sit3_ = value;
}
inline void GossipParams::set_sit3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sit3(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit3)
}

// optional uint64 sit4 = 8;
inline bool GossipParams::_internal_has_sit4() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GossipParams::has_sit4() const {
  return _internal_has_sit4();
}
inline void GossipParams::clear_sit4() {
  sit4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::_internal_sit4() const {
  return sit4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GossipParams::sit4() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.sit4)
  return _internal_sit4();
}
inline void GossipParams::_internal_set_sit4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  sit4_ = value;
}
inline void GossipParams::set_sit4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sit4(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.sit4)
}

// optional uint32 overlap_rate = 9;
inline bool GossipParams::_internal_has_overlap_rate() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GossipParams::has_overlap_rate() const {
  return _internal_has_overlap_rate();
}
inline void GossipParams::clear_overlap_rate() {
  overlap_rate_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::_internal_overlap_rate() const {
  return overlap_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GossipParams::overlap_rate() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.overlap_rate)
  return _internal_overlap_rate();
}
inline void GossipParams::_internal_set_overlap_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  overlap_rate_ = value;
}
inline void GossipParams::set_overlap_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_overlap_rate(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.overlap_rate)
}

// optional bytes header_hash = 10;
inline bool GossipParams::_internal_has_header_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GossipParams::has_header_hash() const {
  return _internal_has_header_hash();
}
inline void GossipParams::clear_header_hash() {
  header_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GossipParams::header_hash() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.header_hash)
  return _internal_header_hash();
}
inline void GossipParams::set_header_hash(const std::string& value) {
  _internal_set_header_hash(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.header_hash)
}
inline std::string* GossipParams::mutable_header_hash() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipParams.header_hash)
  return _internal_mutable_header_hash();
}
inline const std::string& GossipParams::_internal_header_hash() const {
  return header_hash_.Get();
}
inline void GossipParams::_internal_set_header_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GossipParams::set_header_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipParams.header_hash)
}
inline void GossipParams::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipParams.header_hash)
}
inline void GossipParams::set_header_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipParams.header_hash)
}
inline std::string* GossipParams::_internal_mutable_header_hash() {
  _has_bits_[0] |= 0x00000001u;
  return header_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GossipParams::release_header_hash() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipParams.header_hash)
  if (!_internal_has_header_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return header_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GossipParams::set_allocated_header_hash(std::string* header_hash) {
  if (header_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipParams.header_hash)
}
inline std::string* GossipParams::unsafe_arena_release_header_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.GossipParams.header_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return header_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GossipParams::unsafe_arena_set_allocated_header_hash(
    std::string* header_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (header_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      header_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.GossipParams.header_hash)
}

// optional bytes block = 11;
inline bool GossipParams::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GossipParams::has_block() const {
  return _internal_has_block();
}
inline void GossipParams::clear_block() {
  block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GossipParams::block() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.block)
  return _internal_block();
}
inline void GossipParams::set_block(const std::string& value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.block)
}
inline std::string* GossipParams::mutable_block() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipParams.block)
  return _internal_mutable_block();
}
inline const std::string& GossipParams::_internal_block() const {
  return block_.Get();
}
inline void GossipParams::_internal_set_block(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GossipParams::set_block(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  block_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipParams.block)
}
inline void GossipParams::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipParams.block)
}
inline void GossipParams::set_block(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipParams.block)
}
inline std::string* GossipParams::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  return block_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GossipParams::release_block() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipParams.block)
  if (!_internal_has_block()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return block_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GossipParams::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipParams.block)
}
inline std::string* GossipParams::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.GossipParams.block)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return block_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GossipParams::unsafe_arena_set_allocated_block(
    std::string* block) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (block != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      block, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.GossipParams.block)
}

// optional bool diff_net = 12;
inline bool GossipParams::_internal_has_diff_net() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GossipParams::has_diff_net() const {
  return _internal_has_diff_net();
}
inline void GossipParams::clear_diff_net() {
  diff_net_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool GossipParams::_internal_diff_net() const {
  return diff_net_;
}
inline bool GossipParams::diff_net() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipParams.diff_net)
  return _internal_diff_net();
}
inline void GossipParams::_internal_set_diff_net(bool value) {
  _has_bits_[0] |= 0x00000800u;
  diff_net_ = value;
}
inline void GossipParams::set_diff_net(bool value) {
  _internal_set_diff_net(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipParams.diff_net)
}

// -------------------------------------------------------------------

// GossipSyncBlockData

// optional bytes header_hash = 1;
inline bool GossipSyncBlockData::_internal_has_header_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GossipSyncBlockData::has_header_hash() const {
  return _internal_has_header_hash();
}
inline void GossipSyncBlockData::clear_header_hash() {
  header_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GossipSyncBlockData::header_hash() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  return _internal_header_hash();
}
inline void GossipSyncBlockData::set_header_hash(const std::string& value) {
  _internal_set_header_hash(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline std::string* GossipSyncBlockData::mutable_header_hash() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  return _internal_mutable_header_hash();
}
inline const std::string& GossipSyncBlockData::_internal_header_hash() const {
  return header_hash_.Get();
}
inline void GossipSyncBlockData::_internal_set_header_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GossipSyncBlockData::set_header_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline void GossipSyncBlockData::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline void GossipSyncBlockData::set_header_hash(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline std::string* GossipSyncBlockData::_internal_mutable_header_hash() {
  _has_bits_[0] |= 0x00000001u;
  return header_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GossipSyncBlockData::release_header_hash() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  if (!_internal_has_header_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return header_hash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GossipSyncBlockData::set_allocated_header_hash(std::string* header_hash) {
  if (header_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline std::string* GossipSyncBlockData::unsafe_arena_release_header_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return header_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GossipSyncBlockData::unsafe_arena_set_allocated_header_hash(
    std::string* header_hash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (header_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      header_hash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.GossipSyncBlockData.header_hash)
}

// optional bytes block = 2;
inline bool GossipSyncBlockData::_internal_has_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GossipSyncBlockData::has_block() const {
  return _internal_has_block();
}
inline void GossipSyncBlockData::clear_block() {
  block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GossipSyncBlockData::block() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.GossipSyncBlockData.block)
  return _internal_block();
}
inline void GossipSyncBlockData::set_block(const std::string& value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline std::string* GossipSyncBlockData::mutable_block() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.GossipSyncBlockData.block)
  return _internal_mutable_block();
}
inline const std::string& GossipSyncBlockData::_internal_block() const {
  return block_.Get();
}
inline void GossipSyncBlockData::_internal_set_block(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GossipSyncBlockData::set_block(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  block_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline void GossipSyncBlockData::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline void GossipSyncBlockData::set_block(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline std::string* GossipSyncBlockData::_internal_mutable_block() {
  _has_bits_[0] |= 0x00000002u;
  return block_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GossipSyncBlockData::release_block() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.GossipSyncBlockData.block)
  if (!_internal_has_block()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return block_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GossipSyncBlockData::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.GossipSyncBlockData.block)
}
inline std::string* GossipSyncBlockData::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.GossipSyncBlockData.block)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return block_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GossipSyncBlockData::unsafe_arena_set_allocated_block(
    std::string* block) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (block != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  block_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      block, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.GossipSyncBlockData.block)
}

// -------------------------------------------------------------------

// RoutingMessage

// optional bytes src_node_id = 1;
inline bool RoutingMessage::_internal_has_src_node_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoutingMessage::has_src_node_id() const {
  return _internal_has_src_node_id();
}
inline void RoutingMessage::clear_src_node_id() {
  src_node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoutingMessage::src_node_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.src_node_id)
  return _internal_src_node_id();
}
inline void RoutingMessage::set_src_node_id(const std::string& value) {
  _internal_set_src_node_id(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline std::string* RoutingMessage::mutable_src_node_id() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.src_node_id)
  return _internal_mutable_src_node_id();
}
inline const std::string& RoutingMessage::_internal_src_node_id() const {
  return src_node_id_.Get();
}
inline void RoutingMessage::_internal_set_src_node_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingMessage::set_src_node_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline void RoutingMessage::set_src_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline void RoutingMessage::set_src_node_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline std::string* RoutingMessage::_internal_mutable_src_node_id() {
  _has_bits_[0] |= 0x00000001u;
  return src_node_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingMessage::release_src_node_id() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.src_node_id)
  if (!_internal_has_src_node_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_node_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingMessage::set_allocated_src_node_id(std::string* src_node_id) {
  if (src_node_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.src_node_id)
}
inline std::string* RoutingMessage::unsafe_arena_release_src_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.RoutingMessage.src_node_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return src_node_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoutingMessage::unsafe_arena_set_allocated_src_node_id(
    std::string* src_node_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src_node_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_node_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src_node_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.RoutingMessage.src_node_id)
}

// optional bytes des_node_id = 2;
inline bool RoutingMessage::_internal_has_des_node_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoutingMessage::has_des_node_id() const {
  return _internal_has_des_node_id();
}
inline void RoutingMessage::clear_des_node_id() {
  des_node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoutingMessage::des_node_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.des_node_id)
  return _internal_des_node_id();
}
inline void RoutingMessage::set_des_node_id(const std::string& value) {
  _internal_set_des_node_id(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline std::string* RoutingMessage::mutable_des_node_id() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.des_node_id)
  return _internal_mutable_des_node_id();
}
inline const std::string& RoutingMessage::_internal_des_node_id() const {
  return des_node_id_.Get();
}
inline void RoutingMessage::_internal_set_des_node_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingMessage::set_des_node_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline void RoutingMessage::set_des_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline void RoutingMessage::set_des_node_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  des_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline std::string* RoutingMessage::_internal_mutable_des_node_id() {
  _has_bits_[0] |= 0x00000002u;
  return des_node_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingMessage::release_des_node_id() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.des_node_id)
  if (!_internal_has_des_node_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return des_node_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingMessage::set_allocated_des_node_id(std::string* des_node_id) {
  if (des_node_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  des_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), des_node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.des_node_id)
}
inline std::string* RoutingMessage::unsafe_arena_release_des_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.RoutingMessage.des_node_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return des_node_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoutingMessage::unsafe_arena_set_allocated_des_node_id(
    std::string* des_node_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (des_node_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  des_node_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      des_node_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.RoutingMessage.des_node_id)
}

// optional int32 type = 3;
inline bool RoutingMessage::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoutingMessage::has_type() const {
  return _internal_has_type();
}
inline void RoutingMessage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingMessage::type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.type)
  return _internal_type();
}
inline void RoutingMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void RoutingMessage::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.type)
}

// optional bytes data = 4;
inline bool RoutingMessage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoutingMessage::has_data() const {
  return _internal_has_data();
}
inline void RoutingMessage::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoutingMessage::data() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.data)
  return _internal_data();
}
inline void RoutingMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.data)
}
inline std::string* RoutingMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.data)
  return _internal_mutable_data();
}
inline const std::string& RoutingMessage::_internal_data() const {
  return data_.Get();
}
inline void RoutingMessage::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingMessage::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.data)
}
inline void RoutingMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.data)
}
inline void RoutingMessage::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.data)
}
inline std::string* RoutingMessage::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingMessage::release_data() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.data)
}
inline std::string* RoutingMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.RoutingMessage.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoutingMessage::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.RoutingMessage.data)
}

// optional uint32 id = 5;
inline bool RoutingMessage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoutingMessage::has_id() const {
  return _internal_has_id();
}
inline void RoutingMessage::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.id)
  return _internal_id();
}
inline void RoutingMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void RoutingMessage::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.id)
}

// optional uint32 ack_id = 6;
inline bool RoutingMessage::_internal_has_ack_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RoutingMessage::has_ack_id() const {
  return _internal_has_ack_id();
}
inline void RoutingMessage::clear_ack_id() {
  ack_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::_internal_ack_id() const {
  return ack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.ack_id)
  return _internal_ack_id();
}
inline void RoutingMessage::_internal_set_ack_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  ack_id_ = value;
}
inline void RoutingMessage::set_ack_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack_id(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.ack_id)
}

// optional uint32 hop_num = 7;
inline bool RoutingMessage::_internal_has_hop_num() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoutingMessage::has_hop_num() const {
  return _internal_has_hop_num();
}
inline void RoutingMessage::clear_hop_num() {
  hop_num_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::_internal_hop_num() const {
  return hop_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::hop_num() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.hop_num)
  return _internal_hop_num();
}
inline void RoutingMessage::_internal_set_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  hop_num_ = value;
}
inline void RoutingMessage::set_hop_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hop_num(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.hop_num)
}

// repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
inline int RoutingMessage::_internal_hop_nodes_size() const {
  return hop_nodes_.size();
}
inline int RoutingMessage::hop_nodes_size() const {
  return _internal_hop_nodes_size();
}
inline void RoutingMessage::clear_hop_nodes() {
  hop_nodes_.Clear();
}
inline ::tcash::transport::protobuf::HopInfo* RoutingMessage::mutable_hop_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >*
RoutingMessage::mutable_hop_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return &hop_nodes_;
}
inline const ::tcash::transport::protobuf::HopInfo& RoutingMessage::_internal_hop_nodes(int index) const {
  return hop_nodes_.Get(index);
}
inline const ::tcash::transport::protobuf::HopInfo& RoutingMessage::hop_nodes(int index) const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return _internal_hop_nodes(index);
}
inline ::tcash::transport::protobuf::HopInfo* RoutingMessage::_internal_add_hop_nodes() {
  return hop_nodes_.Add();
}
inline ::tcash::transport::protobuf::HopInfo* RoutingMessage::add_hop_nodes() {
  // @@protoc_insertion_point(field_add:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return _internal_add_hop_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcash::transport::protobuf::HopInfo >&
RoutingMessage::hop_nodes() const {
  // @@protoc_insertion_point(field_list:tcash.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_;
}

// optional uint64 src_service_type = 9;
inline bool RoutingMessage::_internal_has_src_service_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RoutingMessage::has_src_service_type() const {
  return _internal_has_src_service_type();
}
inline void RoutingMessage::clear_src_service_type() {
  src_service_type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingMessage::_internal_src_service_type() const {
  return src_service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingMessage::src_service_type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.src_service_type)
  return _internal_src_service_type();
}
inline void RoutingMessage::_internal_set_src_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  src_service_type_ = value;
}
inline void RoutingMessage::set_src_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_src_service_type(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.src_service_type)
}

// optional uint64 des_service_type = 10;
inline bool RoutingMessage::_internal_has_des_service_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RoutingMessage::has_des_service_type() const {
  return _internal_has_des_service_type();
}
inline void RoutingMessage::clear_des_service_type() {
  des_service_type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingMessage::_internal_des_service_type() const {
  return des_service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingMessage::des_service_type() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.des_service_type)
  return _internal_des_service_type();
}
inline void RoutingMessage::_internal_set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  des_service_type_ = value;
}
inline void RoutingMessage::set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_des_service_type(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.des_service_type)
}

// optional uint32 msg_hash = 11;
inline bool RoutingMessage::_internal_has_msg_hash() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RoutingMessage::has_msg_hash() const {
  return _internal_has_msg_hash();
}
inline void RoutingMessage::clear_msg_hash() {
  msg_hash_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::_internal_msg_hash() const {
  return msg_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::msg_hash() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.msg_hash)
  return _internal_msg_hash();
}
inline void RoutingMessage::_internal_set_msg_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  msg_hash_ = value;
}
inline void RoutingMessage::set_msg_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_hash(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.msg_hash)
}

// optional bool is_root = 12;
inline bool RoutingMessage::_internal_has_is_root() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RoutingMessage::has_is_root() const {
  return _internal_has_is_root();
}
inline void RoutingMessage::clear_is_root() {
  is_root_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool RoutingMessage::_internal_is_root() const {
  return is_root_;
}
inline bool RoutingMessage::is_root() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.is_root)
  return _internal_is_root();
}
inline void RoutingMessage::_internal_set_is_root(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_root_ = value;
}
inline void RoutingMessage::set_is_root(bool value) {
  _internal_set_is_root(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.is_root)
}

// optional bool broadcast = 13;
inline bool RoutingMessage::_internal_has_broadcast() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RoutingMessage::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void RoutingMessage::clear_broadcast() {
  broadcast_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool RoutingMessage::_internal_broadcast() const {
  return broadcast_;
}
inline bool RoutingMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.broadcast)
  return _internal_broadcast();
}
inline void RoutingMessage::_internal_set_broadcast(bool value) {
  _has_bits_[0] |= 0x00004000u;
  broadcast_ = value;
}
inline void RoutingMessage::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.broadcast)
}

// repeated uint64 bloomfilter = 14;
inline int RoutingMessage::_internal_bloomfilter_size() const {
  return bloomfilter_.size();
}
inline int RoutingMessage::bloomfilter_size() const {
  return _internal_bloomfilter_size();
}
inline void RoutingMessage::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingMessage::_internal_bloomfilter(int index) const {
  return bloomfilter_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingMessage::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.bloomfilter)
  return _internal_bloomfilter(index);
}
inline void RoutingMessage::set_bloomfilter(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.bloomfilter)
}
inline void RoutingMessage::_internal_add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bloomfilter_.Add(value);
}
inline void RoutingMessage::add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bloomfilter(value);
  // @@protoc_insertion_point(field_add:tcash.transport.protobuf.RoutingMessage.bloomfilter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RoutingMessage::_internal_bloomfilter() const {
  return bloomfilter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
RoutingMessage::bloomfilter() const {
  // @@protoc_insertion_point(field_list:tcash.transport.protobuf.RoutingMessage.bloomfilter)
  return _internal_bloomfilter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RoutingMessage::_internal_mutable_bloomfilter() {
  return &bloomfilter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
RoutingMessage::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:tcash.transport.protobuf.RoutingMessage.bloomfilter)
  return _internal_mutable_bloomfilter();
}

// optional bytes xid = 15;
inline bool RoutingMessage::_internal_has_xid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoutingMessage::has_xid() const {
  return _internal_has_xid();
}
inline void RoutingMessage::clear_xid() {
  xid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RoutingMessage::xid() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.xid)
  return _internal_xid();
}
inline void RoutingMessage::set_xid(const std::string& value) {
  _internal_set_xid(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.xid)
}
inline std::string* RoutingMessage::mutable_xid() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.xid)
  return _internal_mutable_xid();
}
inline const std::string& RoutingMessage::_internal_xid() const {
  return xid_.Get();
}
inline void RoutingMessage::_internal_set_xid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingMessage::set_xid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  xid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.xid)
}
inline void RoutingMessage::set_xid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.xid)
}
inline void RoutingMessage::set_xid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.xid)
}
inline std::string* RoutingMessage::_internal_mutable_xid() {
  _has_bits_[0] |= 0x00000008u;
  return xid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingMessage::release_xid() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.xid)
  if (!_internal_has_xid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return xid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingMessage::set_allocated_xid(std::string* xid) {
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  xid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.xid)
}
inline std::string* RoutingMessage::unsafe_arena_release_xid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.RoutingMessage.xid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return xid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoutingMessage::unsafe_arena_set_allocated_xid(
    std::string* xid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  xid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      xid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.RoutingMessage.xid)
}

// optional uint32 priority = 16;
inline bool RoutingMessage::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RoutingMessage::has_priority() const {
  return _internal_has_priority();
}
inline void RoutingMessage::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingMessage::priority() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.priority)
  return _internal_priority();
}
inline void RoutingMessage::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  priority_ = value;
}
inline void RoutingMessage::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.priority)
}

// optional .tcash.transport.protobuf.GossipParams gossip = 17;
inline bool RoutingMessage::_internal_has_gossip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || gossip_ != nullptr);
  return value;
}
inline bool RoutingMessage::has_gossip() const {
  return _internal_has_gossip();
}
inline void RoutingMessage::clear_gossip() {
  if (gossip_ != nullptr) gossip_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::tcash::transport::protobuf::GossipParams& RoutingMessage::_internal_gossip() const {
  const ::tcash::transport::protobuf::GossipParams* p = gossip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tcash::transport::protobuf::GossipParams*>(
      &::tcash::transport::protobuf::_GossipParams_default_instance_);
}
inline const ::tcash::transport::protobuf::GossipParams& RoutingMessage::gossip() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.gossip)
  return _internal_gossip();
}
inline void RoutingMessage::unsafe_arena_set_allocated_gossip(
    ::tcash::transport::protobuf::GossipParams* gossip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gossip_);
  }
  gossip_ = gossip;
  if (gossip) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.RoutingMessage.gossip)
}
inline ::tcash::transport::protobuf::GossipParams* RoutingMessage::release_gossip() {
  auto temp = unsafe_arena_release_gossip();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tcash::transport::protobuf::GossipParams* RoutingMessage::unsafe_arena_release_gossip() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.gossip)
  _has_bits_[0] &= ~0x00000020u;
  ::tcash::transport::protobuf::GossipParams* temp = gossip_;
  gossip_ = nullptr;
  return temp;
}
inline ::tcash::transport::protobuf::GossipParams* RoutingMessage::_internal_mutable_gossip() {
  _has_bits_[0] |= 0x00000020u;
  if (gossip_ == nullptr) {
    auto* p = CreateMaybeMessage<::tcash::transport::protobuf::GossipParams>(GetArena());
    gossip_ = p;
  }
  return gossip_;
}
inline ::tcash::transport::protobuf::GossipParams* RoutingMessage::mutable_gossip() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.gossip)
  return _internal_mutable_gossip();
}
inline void RoutingMessage::set_allocated_gossip(::tcash::transport::protobuf::GossipParams* gossip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gossip_;
  }
  if (gossip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gossip);
    if (message_arena != submessage_arena) {
      gossip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gossip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gossip_ = gossip;
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.gossip)
}

// optional string debug = 18;
inline bool RoutingMessage::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoutingMessage::has_debug() const {
  return _internal_has_debug();
}
inline void RoutingMessage::clear_debug() {
  debug_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RoutingMessage::debug() const {
  // @@protoc_insertion_point(field_get:tcash.transport.protobuf.RoutingMessage.debug)
  return _internal_debug();
}
inline void RoutingMessage::set_debug(const std::string& value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:tcash.transport.protobuf.RoutingMessage.debug)
}
inline std::string* RoutingMessage::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:tcash.transport.protobuf.RoutingMessage.debug)
  return _internal_mutable_debug();
}
inline const std::string& RoutingMessage::_internal_debug() const {
  return debug_.Get();
}
inline void RoutingMessage::_internal_set_debug(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoutingMessage::set_debug(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  debug_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcash.transport.protobuf.RoutingMessage.debug)
}
inline void RoutingMessage::set_debug(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tcash.transport.protobuf.RoutingMessage.debug)
}
inline void RoutingMessage::set_debug(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcash.transport.protobuf.RoutingMessage.debug)
}
inline std::string* RoutingMessage::_internal_mutable_debug() {
  _has_bits_[0] |= 0x00000010u;
  return debug_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoutingMessage::release_debug() {
  // @@protoc_insertion_point(field_release:tcash.transport.protobuf.RoutingMessage.debug)
  if (!_internal_has_debug()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return debug_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoutingMessage::set_allocated_debug(std::string* debug) {
  if (debug != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  debug_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcash.transport.protobuf.RoutingMessage.debug)
}
inline std::string* RoutingMessage::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcash.transport.protobuf.RoutingMessage.debug)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return debug_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RoutingMessage::unsafe_arena_set_allocated_debug(
    std::string* debug) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (debug != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  debug_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      debug, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcash.transport.protobuf.RoutingMessage.debug)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace tcash

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_2eproto
