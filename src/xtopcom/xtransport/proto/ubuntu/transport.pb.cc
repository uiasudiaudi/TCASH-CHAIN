// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GossipParams_transport_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HopInfo_transport_2eproto;
namespace tcash {
namespace transport {
namespace protobuf {
class HopInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopInfo> _instance;
} _HopInfo_default_instance_;
class GossipParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GossipParams> _instance;
} _GossipParams_default_instance_;
class GossipSyncBlockDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GossipSyncBlockData> _instance;
} _GossipSyncBlockData_default_instance_;
class RoutingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingMessage> _instance;
} _RoutingMessage_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace tcash
static void InitDefaultsscc_info_GossipParams_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_GossipParams_default_instance_;
    new (ptr) ::tcash::transport::protobuf::GossipParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::GossipParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GossipParams_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GossipParams_transport_2eproto}, {}};

static void InitDefaultsscc_info_GossipSyncBlockData_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_GossipSyncBlockData_default_instance_;
    new (ptr) ::tcash::transport::protobuf::GossipSyncBlockData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::GossipSyncBlockData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GossipSyncBlockData_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GossipSyncBlockData_transport_2eproto}, {}};

static void InitDefaultsscc_info_HopInfo_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_HopInfo_default_instance_;
    new (ptr) ::tcash::transport::protobuf::HopInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::HopInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HopInfo_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HopInfo_transport_2eproto}, {}};

static void InitDefaultsscc_info_RoutingMessage_transport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tcash::transport::protobuf::_RoutingMessage_default_instance_;
    new (ptr) ::tcash::transport::protobuf::RoutingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcash::transport::protobuf::RoutingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoutingMessage_transport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoutingMessage_transport_2eproto}, {
      &scc_info_HopInfo_transport_2eproto.base,
      &scc_info_GossipParams_transport_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::HopInfo, port_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, neighber_count_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, stcash_times_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, gossip_type_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, max_hop_num_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit1_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit2_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit3_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, sit4_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, overlap_rate_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, header_hash_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, block_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipParams, diff_net_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  1,
  11,
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, header_hash_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::GossipSyncBlockData, block_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, src_node_id_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, des_node_id_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, type_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, data_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, id_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, ack_id_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, hop_num_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, hop_nodes_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, src_service_type_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, des_service_type_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, msg_hash_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, is_root_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, broadcast_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, bloomfilter_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, xid_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, priority_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, gossip_),
  PROTOBUF_FIELD_OFFSET(::tcash::transport::protobuf::RoutingMessage, debug_),
  0,
  1,
  6,
  2,
  7,
  8,
  9,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  ~0u,
  3,
  15,
  5,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::tcash::transport::protobuf::HopInfo)},
  { 11, 28, sizeof(::tcash::transport::protobuf::GossipParams)},
  { 40, 47, sizeof(::tcash::transport::protobuf::GossipSyncBlockData)},
  { 49, 72, sizeof(::tcash::transport::protobuf::RoutingMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tcash::transport::protobuf::_HopInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tcash::transport::protobuf::_GossipParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tcash::transport::protobuf::_GossipSyncBlockData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tcash::transport::protobuf::_RoutingMessage_default_instance_),
};

const char descriptor_table_protodef_transport_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017transport.proto\022\026tcash.transport.protobu"
  "f\"4\n\007HopInfo\022\017\n\007node_id\030\001 \001(\014\022\n\n\002ip\030\002 \001("
  "\014\022\014\n\004port\030\003 \001(\005\"\350\001\n\014GossipParams\022\026\n\016neig"
  "hber_count\030\001 \001(\r\022\022\n\nstcash_times\030\002 \001(\r\022\023\n\013"
  "gossip_type\030\003 \001(\005\022\023\n\013max_hop_num\030\004 \001(\r\022\014"
  "\n\004sit1\030\005 \001(\004\022\014\n\004sit2\030\006 \001(\004\022\014\n\004sit3\030\007 \001(\004"
  "\022\014\n\004sit4\030\010 \001(\004\022\024\n\014overlap_rate\030\t \001(\r\022\023\n\013"
  "header_hash\030\n \001(\014\022\r\n\005block\030\013 \001(\014\022\020\n\010diff"
  "_net\030\014 \001(\010\"9\n\023GossipSyncBlockData\022\023\n\013hea"
  "der_hash\030\001 \001(\014\022\r\n\005block\030\002 \001(\014\"\232\003\n\016Routin"
  "gMessage\022\023\n\013src_node_id\030\001 \001(\014\022\023\n\013des_nod"
  "e_id\030\002 \001(\014\022\014\n\004type\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\n"
  "\n\002id\030\005 \001(\r\022\016\n\006ack_id\030\006 \001(\r\022\017\n\007hop_num\030\007 "
  "\001(\r\0222\n\thop_nodes\030\010 \003(\0132\037.tcash.transport.p"
  "rotobuf.HopInfo\022\030\n\020src_service_type\030\t \001("
  "\004\022\030\n\020des_service_type\030\n \001(\004\022\020\n\010msg_hash\030"
  "\013 \001(\r\022\017\n\007is_root\030\014 \001(\010\022\021\n\tbroadcast\030\r \001("
  "\010\022\023\n\013bloomfilter\030\016 \003(\004\022\013\n\003xid\030\017 \001(\014\022\020\n\010p"
  "riority\030\020 \001(\r\0224\n\006gossip\030\021 \001(\0132$.tcash.tran"
  "sport.protobuf.GossipParams\022\r\n\005debug\030\022 \001"
  "(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_2eproto_sccs[4] = {
  &scc_info_GossipParams_transport_2eproto.base,
  &scc_info_GossipSyncBlockData_transport_2eproto.base,
  &scc_info_HopInfo_transport_2eproto.base,
  &scc_info_RoutingMessage_transport_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_2eproto = {
  false, false, descriptor_table_protodef_transport_2eproto, "transport.proto", 802,
  &descriptor_table_transport_2eproto_once, descriptor_table_transport_2eproto_sccs, descriptor_table_transport_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_transport_2eproto::offsets,
  file_level_metadata_transport_2eproto, 4, file_level_enum_descriptors_transport_2eproto, file_level_service_descriptors_transport_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_2eproto)), true);
namespace tcash {
namespace transport {
namespace protobuf {

// ===================================================================

void HopInfo::InitAsDefaultInstance() {
}
class HopInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<HopInfo>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HopInfo::HopInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tcash.transport.protobuf.HopInfo)
}
HopInfo::HopInfo(const HopInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_id()) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_id(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.HopInfo)
}

void HopInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopInfo_transport_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

HopInfo::~HopInfo() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.HopInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HopInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HopInfo::ArenaDtor(void* object) {
  HopInfo* _this = reinterpret_cast< HopInfo* >(object);
  (void)_this;
}
void HopInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HopInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopInfo& HopInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopInfo_transport_2eproto.base);
  return *internal_default_instance();
}


void HopInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.HopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmpty();
    }
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HopInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.HopInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // optional bytes ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.HopInfo)
  return target;
}

size_t HopInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.HopInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_node_id());
    }

    // optional bytes ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ip());
    }

    // optional int32 port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.HopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HopInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.HopInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.HopInfo)
    MergeFrom(*source);
  }
}

void HopInfo::MergeFrom(const HopInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.HopInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_node_id(from._internal_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HopInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.HopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopInfo::CopyFrom(const HopInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.HopInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopInfo::IsInitialized() const {
  return true;
}

void HopInfo::InternalSwap(HopInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HopInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GossipParams::InitAsDefaultInstance() {
}
class GossipParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GossipParams>()._has_bits_);
  static void set_has_neighber_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stcash_times(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gossip_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_hop_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sit1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sit2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sit3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sit4(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_overlap_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_header_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diff_net(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

GossipParams::GossipParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tcash.transport.protobuf.GossipParams)
}
GossipParams::GossipParams(const GossipParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_header_hash()) {
    header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_header_hash(),
      GetArena());
  }
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_block()) {
    block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block(),
      GetArena());
  }
  ::memcpy(&neighber_count_, &from.neighber_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&diff_net_) -
    reinterpret_cast<char*>(&neighber_count_)) + sizeof(diff_net_));
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.GossipParams)
}

void GossipParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GossipParams_transport_2eproto.base);
  header_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&neighber_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diff_net_) -
      reinterpret_cast<char*>(&neighber_count_)) + sizeof(diff_net_));
}

GossipParams::~GossipParams() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.GossipParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GossipParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  header_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GossipParams::ArenaDtor(void* object) {
  GossipParams* _this = reinterpret_cast< GossipParams* >(object);
  (void)_this;
}
void GossipParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GossipParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GossipParams& GossipParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GossipParams_transport_2eproto.base);
  return *internal_default_instance();
}


void GossipParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.GossipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      header_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      block_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&neighber_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sit2_) -
        reinterpret_cast<char*>(&neighber_count_)) + sizeof(sit2_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&sit3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diff_net_) -
        reinterpret_cast<char*>(&sit3_)) + sizeof(diff_net_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GossipParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 neighber_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_neighber_count(&has_bits);
          neighber_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stcash_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stcash_times(&has_bits);
          stcash_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gossip_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gossip_type(&has_bits);
          gossip_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_hop_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_hop_num(&has_bits);
          max_hop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sit1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sit1(&has_bits);
          sit1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sit2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sit2(&has_bits);
          sit2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sit3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sit3(&has_bits);
          sit3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sit4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sit4(&has_bits);
          sit4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 overlap_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_overlap_rate(&has_bits);
          overlap_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes header_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_header_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes block = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool diff_net = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_diff_net(&has_bits);
          diff_net_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GossipParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.GossipParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 neighber_count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_neighber_count(), target);
  }

  // optional uint32 stcash_times = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stcash_times(), target);
  }

  // optional int32 gossip_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gossip_type(), target);
  }

  // optional uint32 max_hop_num = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_hop_num(), target);
  }

  // optional uint64 sit1 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_sit1(), target);
  }

  // optional uint64 sit2 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sit2(), target);
  }

  // optional uint64 sit3 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_sit3(), target);
  }

  // optional uint64 sit4 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_sit4(), target);
  }

  // optional uint32 overlap_rate = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_overlap_rate(), target);
  }

  // optional bytes header_hash = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_header_hash(), target);
  }

  // optional bytes block = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_block(), target);
  }

  // optional bool diff_net = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_diff_net(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.GossipParams)
  return target;
}

size_t GossipParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.GossipParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes header_hash = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_header_hash());
    }

    // optional bytes block = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_block());
    }

    // optional uint32 neighber_count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_neighber_count());
    }

    // optional uint32 stcash_times = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stcash_times());
    }

    // optional int32 gossip_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gossip_type());
    }

    // optional uint32 max_hop_num = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_hop_num());
    }

    // optional uint64 sit1 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sit1());
    }

    // optional uint64 sit2 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sit2());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 sit3 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sit3());
    }

    // optional uint64 sit4 = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sit4());
    }

    // optional uint32 overlap_rate = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_overlap_rate());
    }

    // optional bool diff_net = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.GossipParams)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GossipParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.GossipParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.GossipParams)
    MergeFrom(*source);
  }
}

void GossipParams::MergeFrom(const GossipParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.GossipParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_header_hash(from._internal_header_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_block(from._internal_block());
    }
    if (cached_has_bits & 0x00000004u) {
      neighber_count_ = from.neighber_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      stcash_times_ = from.stcash_times_;
    }
    if (cached_has_bits & 0x00000010u) {
      gossip_type_ = from.gossip_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_hop_num_ = from.max_hop_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      sit1_ = from.sit1_;
    }
    if (cached_has_bits & 0x00000080u) {
      sit2_ = from.sit2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      sit3_ = from.sit3_;
    }
    if (cached_has_bits & 0x00000200u) {
      sit4_ = from.sit4_;
    }
    if (cached_has_bits & 0x00000400u) {
      overlap_rate_ = from.overlap_rate_;
    }
    if (cached_has_bits & 0x00000800u) {
      diff_net_ = from.diff_net_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GossipParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.GossipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipParams::CopyFrom(const GossipParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.GossipParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipParams::IsInitialized() const {
  return true;
}

void GossipParams::InternalSwap(GossipParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_hash_.Swap(&other->header_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GossipParams, diff_net_)
      + sizeof(GossipParams::diff_net_)
      - PROTOBUF_FIELD_OFFSET(GossipParams, neighber_count_)>(
          reinterpret_cast<char*>(&neighber_count_),
          reinterpret_cast<char*>(&other->neighber_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GossipParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GossipSyncBlockData::InitAsDefaultInstance() {
}
class GossipSyncBlockData::_Internal {
 public:
  using HasBits = decltype(std::declval<GossipSyncBlockData>()._has_bits_);
  static void set_has_header_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GossipSyncBlockData::GossipSyncBlockData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tcash.transport.protobuf.GossipSyncBlockData)
}
GossipSyncBlockData::GossipSyncBlockData(const GossipSyncBlockData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_header_hash()) {
    header_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_header_hash(),
      GetArena());
  }
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_block()) {
    block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.GossipSyncBlockData)
}

void GossipSyncBlockData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GossipSyncBlockData_transport_2eproto.base);
  header_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GossipSyncBlockData::~GossipSyncBlockData() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.GossipSyncBlockData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GossipSyncBlockData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  header_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GossipSyncBlockData::ArenaDtor(void* object) {
  GossipSyncBlockData* _this = reinterpret_cast< GossipSyncBlockData* >(object);
  (void)_this;
}
void GossipSyncBlockData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GossipSyncBlockData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GossipSyncBlockData& GossipSyncBlockData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GossipSyncBlockData_transport_2eproto.base);
  return *internal_default_instance();
}


void GossipSyncBlockData::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.GossipSyncBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      header_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      block_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GossipSyncBlockData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes header_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_header_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GossipSyncBlockData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.GossipSyncBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes header_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_header_hash(), target);
  }

  // optional bytes block = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.GossipSyncBlockData)
  return target;
}

size_t GossipSyncBlockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.GossipSyncBlockData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes header_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_header_hash());
    }

    // optional bytes block = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_block());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GossipSyncBlockData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  const GossipSyncBlockData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GossipSyncBlockData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.GossipSyncBlockData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.GossipSyncBlockData)
    MergeFrom(*source);
  }
}

void GossipSyncBlockData::MergeFrom(const GossipSyncBlockData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_header_hash(from._internal_header_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_block(from._internal_block());
    }
  }
}

void GossipSyncBlockData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GossipSyncBlockData::CopyFrom(const GossipSyncBlockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.GossipSyncBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GossipSyncBlockData::IsInitialized() const {
  return true;
}

void GossipSyncBlockData::InternalSwap(GossipSyncBlockData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  header_hash_.Swap(&other->header_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GossipSyncBlockData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingMessage::InitAsDefaultInstance() {
  ::tcash::transport::protobuf::_RoutingMessage_default_instance_._instance.get_mutable()->gossip_ = const_cast< ::tcash::transport::protobuf::GossipParams*>(
      ::tcash::transport::protobuf::GossipParams::internal_default_instance());
}
class RoutingMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingMessage>()._has_bits_);
  static void set_has_src_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_des_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ack_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hop_num(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_src_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_des_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_msg_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_root(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_xid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::tcash::transport::protobuf::GossipParams& gossip(const RoutingMessage* msg);
  static void set_has_gossip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tcash::transport::protobuf::GossipParams&
RoutingMessage::_Internal::gossip(const RoutingMessage* msg) {
  return *msg->gossip_;
}
RoutingMessage::RoutingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hop_nodes_(arena),
  bloomfilter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tcash.transport.protobuf.RoutingMessage)
}
RoutingMessage::RoutingMessage(const RoutingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hop_nodes_(from.hop_nodes_),
      bloomfilter_(from.bloomfilter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  src_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_node_id()) {
    src_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src_node_id(),
      GetArena());
  }
  des_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_des_node_id()) {
    des_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_des_node_id(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_xid()) {
    xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_xid(),
      GetArena());
  }
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_debug()) {
    debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_debug(),
      GetArena());
  }
  if (from._internal_has_gossip()) {
    gossip_ = new ::tcash::transport::protobuf::GossipParams(*from.gossip_);
  } else {
    gossip_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&type_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:tcash.transport.protobuf.RoutingMessage)
}

void RoutingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingMessage_transport_2eproto.base);
  src_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  des_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gossip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&gossip_)) + sizeof(priority_));
}

RoutingMessage::~RoutingMessage() {
  // @@protoc_insertion_point(destructor:tcash.transport.protobuf.RoutingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  des_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  debug_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gossip_;
}

void RoutingMessage::ArenaDtor(void* object) {
  RoutingMessage* _this = reinterpret_cast< RoutingMessage* >(object);
  (void)_this;
}
void RoutingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingMessage& RoutingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingMessage_transport_2eproto.base);
  return *internal_default_instance();
}


void RoutingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tcash.transport.protobuf.RoutingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hop_nodes_.Clear();
  bloomfilter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      src_node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      des_node_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      xid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      debug_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gossip_ != nullptr);
      gossip_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&ack_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&ack_id_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes src_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_src_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes des_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_des_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ack_id(&has_bits);
          ack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hop_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hop_num(&has_bits);
          hop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hop_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 src_service_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_src_service_type(&has_bits);
          src_service_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 des_service_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_des_service_type(&has_bits);
          des_service_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msg_hash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_msg_hash(&has_bits);
          msg_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_root = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_root(&has_bits);
          is_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_broadcast(&has_bits);
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 bloomfilter = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bloomfilter(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bloomfilter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes xid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_xid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 priority = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_priority(&has_bits);
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tcash.transport.protobuf.GossipParams gossip = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_gossip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string debug = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_debug();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tcash.transport.protobuf.RoutingMessage.debug");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcash.transport.protobuf.RoutingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes src_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_src_node_id(), target);
  }

  // optional bytes des_node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_des_node_id(), target);
  }

  // optional int32 type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  // optional uint32 ack_id = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ack_id(), target);
  }

  // optional uint32 hop_num = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hop_num(), target);
  }

  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hop_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_hop_nodes(i), target, stream);
  }

  // optional uint64 src_service_type = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_src_service_type(), target);
  }

  // optional uint64 des_service_type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_des_service_type(), target);
  }

  // optional uint32 msg_hash = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_msg_hash(), target);
  }

  // optional bool is_root = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_root(), target);
  }

  // optional bool broadcast = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_broadcast(), target);
  }

  // repeated uint64 bloomfilter = 14;
  for (int i = 0, n = this->_internal_bloomfilter_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_bloomfilter(i), target);
  }

  // optional bytes xid = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_xid(), target);
  }

  // optional uint32 priority = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_priority(), target);
  }

  // optional .tcash.transport.protobuf.GossipParams gossip = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::gossip(this), target, stream);
  }

  // optional string debug = 18;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug().data(), static_cast<int>(this->_internal_debug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tcash.transport.protobuf.RoutingMessage.debug");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcash.transport.protobuf.RoutingMessage)
  return target;
}

size_t RoutingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcash.transport.protobuf.RoutingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tcash.transport.protobuf.HopInfo hop_nodes = 8;
  total_size += 1UL * this->_internal_hop_nodes_size();
  for (const auto& msg : this->hop_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 bloomfilter = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bloomfilter_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bloomfilter_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes src_node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_src_node_id());
    }

    // optional bytes des_node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_des_node_id());
    }

    // optional bytes data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional bytes xid = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_xid());
    }

    // optional string debug = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug());
    }

    // optional .tcash.transport.protobuf.GossipParams gossip = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gossip_);
    }

    // optional int32 type = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional uint32 id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 ack_id = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_id());
    }

    // optional uint32 hop_num = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hop_num());
    }

    // optional uint64 src_service_type = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_src_service_type());
    }

    // optional uint64 des_service_type = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_des_service_type());
    }

    // optional uint32 msg_hash = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_hash());
    }

    // optional bool is_root = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool broadcast = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional uint32 priority = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_priority());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcash.transport.protobuf.RoutingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcash.transport.protobuf.RoutingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcash.transport.protobuf.RoutingMessage)
    MergeFrom(*source);
  }
}

void RoutingMessage::MergeFrom(const RoutingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcash.transport.protobuf.RoutingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hop_nodes_.MergeFrom(from.hop_nodes_);
  bloomfilter_.MergeFrom(from.bloomfilter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src_node_id(from._internal_src_node_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_des_node_id(from._internal_des_node_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_xid(from._internal_xid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_debug(from._internal_debug());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_gossip()->::tcash::transport::protobuf::GossipParams::MergeFrom(from._internal_gossip());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ack_id_ = from.ack_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      hop_num_ = from.hop_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      src_service_type_ = from.src_service_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      des_service_type_ = from.des_service_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      msg_hash_ = from.msg_hash_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_root_ = from.is_root_;
    }
    if (cached_has_bits & 0x00004000u) {
      broadcast_ = from.broadcast_;
    }
    if (cached_has_bits & 0x00008000u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcash.transport.protobuf.RoutingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingMessage::CopyFrom(const RoutingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcash.transport.protobuf.RoutingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingMessage::IsInitialized() const {
  return true;
}

void RoutingMessage::InternalSwap(RoutingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hop_nodes_.InternalSwap(&other->hop_nodes_);
  bloomfilter_.InternalSwap(&other->bloomfilter_);
  src_node_id_.Swap(&other->src_node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  des_node_id_.Swap(&other->des_node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xid_.Swap(&other->xid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  debug_.Swap(&other->debug_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingMessage, priority_)
      + sizeof(RoutingMessage::priority_)
      - PROTOBUF_FIELD_OFFSET(RoutingMessage, gossip_)>(
          reinterpret_cast<char*>(&gossip_),
          reinterpret_cast<char*>(&other->gossip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace transport
}  // namespace tcash
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tcash::transport::protobuf::HopInfo* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::HopInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcash::transport::protobuf::HopInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tcash::transport::protobuf::GossipParams* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::GossipParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcash::transport::protobuf::GossipParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tcash::transport::protobuf::GossipSyncBlockData* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::GossipSyncBlockData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcash::transport::protobuf::GossipSyncBlockData >(arena);
}
template<> PROTOBUF_NOINLINE ::tcash::transport::protobuf::RoutingMessage* Arena::CreateMaybeMessage< ::tcash::transport::protobuf::RoutingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcash::transport::protobuf::RoutingMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
