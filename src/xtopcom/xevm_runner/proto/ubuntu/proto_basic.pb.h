// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_basic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fbasic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fbasic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fbasic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fbasic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fbasic_2eproto;
namespace top {
namespace evm_engine {
namespace basic {
class ProtoAddress;
class ProtoAddressDefaultTypeInternal;
extern ProtoAddressDefaultTypeInternal _ProtoAddress_default_instance_;
class RawU256;
class RawU256DefaultTypeInternal;
extern RawU256DefaultTypeInternal _RawU256_default_instance_;
class ResultLog;
class ResultLogDefaultTypeInternal;
extern ResultLogDefaultTypeInternal _ResultLog_default_instance_;
class WeiU256;
class WeiU256DefaultTypeInternal;
extern WeiU256DefaultTypeInternal _WeiU256_default_instance_;
}  // namespace basic
}  // namespace evm_engine
}  // namespace top
PROTOBUF_NAMESPACE_OPEN
template<> ::top::evm_engine::basic::ProtoAddress* Arena::CreateMaybeMessage<::top::evm_engine::basic::ProtoAddress>(Arena*);
template<> ::top::evm_engine::basic::RawU256* Arena::CreateMaybeMessage<::top::evm_engine::basic::RawU256>(Arena*);
template<> ::top::evm_engine::basic::ResultLog* Arena::CreateMaybeMessage<::top::evm_engine::basic::ResultLog>(Arena*);
template<> ::top::evm_engine::basic::WeiU256* Arena::CreateMaybeMessage<::top::evm_engine::basic::WeiU256>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace top {
namespace evm_engine {
namespace basic {

// ===================================================================

class ProtoAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.evm_engine.basic.ProtoAddress) */ {
 public:
  inline ProtoAddress() : ProtoAddress(nullptr) {};
  virtual ~ProtoAddress();

  ProtoAddress(const ProtoAddress& from);
  ProtoAddress(ProtoAddress&& from) noexcept
    : ProtoAddress() {
    *this = ::std::move(from);
  }

  inline ProtoAddress& operator=(const ProtoAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoAddress& operator=(ProtoAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoAddress* internal_default_instance() {
    return reinterpret_cast<const ProtoAddress*>(
               &_ProtoAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoAddress& a, ProtoAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoAddress* New() const final {
    return CreateMaybeMessage<ProtoAddress>(nullptr);
  }

  ProtoAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoAddress& from);
  void MergeFrom(const ProtoAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.evm_engine.basic.ProtoAddress";
  }
  protected:
  explicit ProtoAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fbasic_2eproto);
    return ::descriptor_table_proto_5fbasic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:top.evm_engine.basic.ProtoAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fbasic_2eproto;
};
// -------------------------------------------------------------------

class RawU256 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.evm_engine.basic.RawU256) */ {
 public:
  inline RawU256() : RawU256(nullptr) {};
  virtual ~RawU256();

  RawU256(const RawU256& from);
  RawU256(RawU256&& from) noexcept
    : RawU256() {
    *this = ::std::move(from);
  }

  inline RawU256& operator=(const RawU256& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawU256& operator=(RawU256&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawU256& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawU256* internal_default_instance() {
    return reinterpret_cast<const RawU256*>(
               &_RawU256_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawU256& a, RawU256& b) {
    a.Swap(&b);
  }
  inline void Swap(RawU256* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawU256* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawU256* New() const final {
    return CreateMaybeMessage<RawU256>(nullptr);
  }

  RawU256* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawU256>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawU256& from);
  void MergeFrom(const RawU256& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawU256* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.evm_engine.basic.RawU256";
  }
  protected:
  explicit RawU256(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fbasic_2eproto);
    return ::descriptor_table_proto_5fbasic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:top.evm_engine.basic.RawU256)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fbasic_2eproto;
};
// -------------------------------------------------------------------

class WeiU256 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.evm_engine.basic.WeiU256) */ {
 public:
  inline WeiU256() : WeiU256(nullptr) {};
  virtual ~WeiU256();

  WeiU256(const WeiU256& from);
  WeiU256(WeiU256&& from) noexcept
    : WeiU256() {
    *this = ::std::move(from);
  }

  inline WeiU256& operator=(const WeiU256& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeiU256& operator=(WeiU256&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeiU256& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeiU256* internal_default_instance() {
    return reinterpret_cast<const WeiU256*>(
               &_WeiU256_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WeiU256& a, WeiU256& b) {
    a.Swap(&b);
  }
  inline void Swap(WeiU256* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeiU256* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeiU256* New() const final {
    return CreateMaybeMessage<WeiU256>(nullptr);
  }

  WeiU256* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeiU256>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeiU256& from);
  void MergeFrom(const WeiU256& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeiU256* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.evm_engine.basic.WeiU256";
  }
  protected:
  explicit WeiU256(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fbasic_2eproto);
    return ::descriptor_table_proto_5fbasic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:top.evm_engine.basic.WeiU256)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fbasic_2eproto;
};
// -------------------------------------------------------------------

class ResultLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.evm_engine.basic.ResultLog) */ {
 public:
  inline ResultLog() : ResultLog(nullptr) {};
  virtual ~ResultLog();

  ResultLog(const ResultLog& from);
  ResultLog(ResultLog&& from) noexcept
    : ResultLog() {
    *this = ::std::move(from);
  }

  inline ResultLog& operator=(const ResultLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultLog& operator=(ResultLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultLog* internal_default_instance() {
    return reinterpret_cast<const ResultLog*>(
               &_ResultLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResultLog& a, ResultLog& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultLog* New() const final {
    return CreateMaybeMessage<ResultLog>(nullptr);
  }

  ResultLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultLog& from);
  void MergeFrom(const ResultLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.evm_engine.basic.ResultLog";
  }
  protected:
  explicit ResultLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fbasic_2eproto);
    return ::descriptor_table_proto_5fbasic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 2,
    kDataFieldNumber = 3,
    kAddressFieldNumber = 1,
  };
  // repeated .top.evm_engine.basic.RawU256 topics = 2;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::top::evm_engine::basic::RawU256* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::evm_engine::basic::RawU256 >*
      mutable_topics();
  private:
  const ::top::evm_engine::basic::RawU256& _internal_topics(int index) const;
  ::top::evm_engine::basic::RawU256* _internal_add_topics();
  public:
  const ::top::evm_engine::basic::RawU256& topics(int index) const;
  ::top::evm_engine::basic::RawU256* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::evm_engine::basic::RawU256 >&
      topics() const;

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .top.evm_engine.basic.ProtoAddress address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::top::evm_engine::basic::ProtoAddress& address() const;
  ::top::evm_engine::basic::ProtoAddress* release_address();
  ::top::evm_engine::basic::ProtoAddress* mutable_address();
  void set_allocated_address(::top::evm_engine::basic::ProtoAddress* address);
  private:
  const ::top::evm_engine::basic::ProtoAddress& _internal_address() const;
  ::top::evm_engine::basic::ProtoAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::top::evm_engine::basic::ProtoAddress* address);
  ::top::evm_engine::basic::ProtoAddress* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:top.evm_engine.basic.ResultLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::evm_engine::basic::RawU256 > topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::top::evm_engine::basic::ProtoAddress* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fbasic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoAddress

// bytes value = 1;
inline void ProtoAddress::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoAddress::value() const {
  // @@protoc_insertion_point(field_get:top.evm_engine.basic.ProtoAddress.value)
  return _internal_value();
}
inline void ProtoAddress::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:top.evm_engine.basic.ProtoAddress.value)
}
inline std::string* ProtoAddress::mutable_value() {
  // @@protoc_insertion_point(field_mutable:top.evm_engine.basic.ProtoAddress.value)
  return _internal_mutable_value();
}
inline const std::string& ProtoAddress::_internal_value() const {
  return value_.Get();
}
inline void ProtoAddress::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoAddress::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.evm_engine.basic.ProtoAddress.value)
}
inline void ProtoAddress::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.evm_engine.basic.ProtoAddress.value)
}
inline void ProtoAddress::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.evm_engine.basic.ProtoAddress.value)
}
inline std::string* ProtoAddress::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoAddress::release_value() {
  // @@protoc_insertion_point(field_release:top.evm_engine.basic.ProtoAddress.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAddress::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.evm_engine.basic.ProtoAddress.value)
}
inline std::string* ProtoAddress::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.evm_engine.basic.ProtoAddress.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoAddress::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.evm_engine.basic.ProtoAddress.value)
}

// -------------------------------------------------------------------

// RawU256

// bytes data = 1;
inline void RawU256::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RawU256::data() const {
  // @@protoc_insertion_point(field_get:top.evm_engine.basic.RawU256.data)
  return _internal_data();
}
inline void RawU256::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:top.evm_engine.basic.RawU256.data)
}
inline std::string* RawU256::mutable_data() {
  // @@protoc_insertion_point(field_mutable:top.evm_engine.basic.RawU256.data)
  return _internal_mutable_data();
}
inline const std::string& RawU256::_internal_data() const {
  return data_.Get();
}
inline void RawU256::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RawU256::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.evm_engine.basic.RawU256.data)
}
inline void RawU256::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.evm_engine.basic.RawU256.data)
}
inline void RawU256::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.evm_engine.basic.RawU256.data)
}
inline std::string* RawU256::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RawU256::release_data() {
  // @@protoc_insertion_point(field_release:top.evm_engine.basic.RawU256.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawU256::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.evm_engine.basic.RawU256.data)
}
inline std::string* RawU256::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.evm_engine.basic.RawU256.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RawU256::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.evm_engine.basic.RawU256.data)
}

// -------------------------------------------------------------------

// WeiU256

// bytes data = 1;
inline void WeiU256::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WeiU256::data() const {
  // @@protoc_insertion_point(field_get:top.evm_engine.basic.WeiU256.data)
  return _internal_data();
}
inline void WeiU256::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:top.evm_engine.basic.WeiU256.data)
}
inline std::string* WeiU256::mutable_data() {
  // @@protoc_insertion_point(field_mutable:top.evm_engine.basic.WeiU256.data)
  return _internal_mutable_data();
}
inline const std::string& WeiU256::_internal_data() const {
  return data_.Get();
}
inline void WeiU256::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WeiU256::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.evm_engine.basic.WeiU256.data)
}
inline void WeiU256::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.evm_engine.basic.WeiU256.data)
}
inline void WeiU256::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.evm_engine.basic.WeiU256.data)
}
inline std::string* WeiU256::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WeiU256::release_data() {
  // @@protoc_insertion_point(field_release:top.evm_engine.basic.WeiU256.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WeiU256::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.evm_engine.basic.WeiU256.data)
}
inline std::string* WeiU256::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.evm_engine.basic.WeiU256.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WeiU256::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.evm_engine.basic.WeiU256.data)
}

// -------------------------------------------------------------------

// ResultLog

// .top.evm_engine.basic.ProtoAddress address = 1;
inline bool ResultLog::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool ResultLog::has_address() const {
  return _internal_has_address();
}
inline void ResultLog::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::top::evm_engine::basic::ProtoAddress& ResultLog::_internal_address() const {
  const ::top::evm_engine::basic::ProtoAddress* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::top::evm_engine::basic::ProtoAddress*>(
      &::top::evm_engine::basic::_ProtoAddress_default_instance_);
}
inline const ::top::evm_engine::basic::ProtoAddress& ResultLog::address() const {
  // @@protoc_insertion_point(field_get:top.evm_engine.basic.ResultLog.address)
  return _internal_address();
}
inline void ResultLog::unsafe_arena_set_allocated_address(
    ::top::evm_engine::basic::ProtoAddress* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.evm_engine.basic.ResultLog.address)
}
inline ::top::evm_engine::basic::ProtoAddress* ResultLog::release_address() {
  auto temp = unsafe_arena_release_address();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::top::evm_engine::basic::ProtoAddress* ResultLog::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:top.evm_engine.basic.ResultLog.address)
  
  ::top::evm_engine::basic::ProtoAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::top::evm_engine::basic::ProtoAddress* ResultLog::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::top::evm_engine::basic::ProtoAddress>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::top::evm_engine::basic::ProtoAddress* ResultLog::mutable_address() {
  // @@protoc_insertion_point(field_mutable:top.evm_engine.basic.ResultLog.address)
  return _internal_mutable_address();
}
inline void ResultLog::set_allocated_address(::top::evm_engine::basic::ProtoAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:top.evm_engine.basic.ResultLog.address)
}

// repeated .top.evm_engine.basic.RawU256 topics = 2;
inline int ResultLog::_internal_topics_size() const {
  return topics_.size();
}
inline int ResultLog::topics_size() const {
  return _internal_topics_size();
}
inline void ResultLog::clear_topics() {
  topics_.Clear();
}
inline ::top::evm_engine::basic::RawU256* ResultLog::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:top.evm_engine.basic.ResultLog.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::evm_engine::basic::RawU256 >*
ResultLog::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:top.evm_engine.basic.ResultLog.topics)
  return &topics_;
}
inline const ::top::evm_engine::basic::RawU256& ResultLog::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::top::evm_engine::basic::RawU256& ResultLog::topics(int index) const {
  // @@protoc_insertion_point(field_get:top.evm_engine.basic.ResultLog.topics)
  return _internal_topics(index);
}
inline ::top::evm_engine::basic::RawU256* ResultLog::_internal_add_topics() {
  return topics_.Add();
}
inline ::top::evm_engine::basic::RawU256* ResultLog::add_topics() {
  // @@protoc_insertion_point(field_add:top.evm_engine.basic.ResultLog.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::evm_engine::basic::RawU256 >&
ResultLog::topics() const {
  // @@protoc_insertion_point(field_list:top.evm_engine.basic.ResultLog.topics)
  return topics_;
}

// bytes data = 3;
inline void ResultLog::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultLog::data() const {
  // @@protoc_insertion_point(field_get:top.evm_engine.basic.ResultLog.data)
  return _internal_data();
}
inline void ResultLog::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:top.evm_engine.basic.ResultLog.data)
}
inline std::string* ResultLog::mutable_data() {
  // @@protoc_insertion_point(field_mutable:top.evm_engine.basic.ResultLog.data)
  return _internal_mutable_data();
}
inline const std::string& ResultLog::_internal_data() const {
  return data_.Get();
}
inline void ResultLog::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultLog::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.evm_engine.basic.ResultLog.data)
}
inline void ResultLog::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.evm_engine.basic.ResultLog.data)
}
inline void ResultLog::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.evm_engine.basic.ResultLog.data)
}
inline std::string* ResultLog::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultLog::release_data() {
  // @@protoc_insertion_point(field_release:top.evm_engine.basic.ResultLog.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultLog::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.evm_engine.basic.ResultLog.data)
}
inline std::string* ResultLog::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.evm_engine.basic.ResultLog.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultLog::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.evm_engine.basic.ResultLog.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace basic
}  // namespace evm_engine
}  // namespace top

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fbasic_2eproto
