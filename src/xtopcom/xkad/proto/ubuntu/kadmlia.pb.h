// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kadmlia.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kadmlia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kadmlia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kadmlia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kadmlia_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kadmlia_2eproto;
namespace top {
namespace kadmlia {
namespace protobuf {
class BootstrapJoinRequest;
class BootstrapJoinRequestDefaultTypeInternal;
extern BootstrapJoinRequestDefaultTypeInternal _BootstrapJoinRequest_default_instance_;
class BootstrapJoinResponse;
class BootstrapJoinResponseDefaultTypeInternal;
extern BootstrapJoinResponseDefaultTypeInternal _BootstrapJoinResponse_default_instance_;
class FindClosestNodesRequest;
class FindClosestNodesRequestDefaultTypeInternal;
extern FindClosestNodesRequestDefaultTypeInternal _FindClosestNodesRequest_default_instance_;
class FindClosestNodesResponse;
class FindClosestNodesResponseDefaultTypeInternal;
extern FindClosestNodesResponseDefaultTypeInternal _FindClosestNodesResponse_default_instance_;
class Handshake;
class HandshakeDefaultTypeInternal;
extern HandshakeDefaultTypeInternal _Handshake_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class RootCacheElectNodesRequest;
class RootCacheElectNodesRequestDefaultTypeInternal;
extern RootCacheElectNodesRequestDefaultTypeInternal _RootCacheElectNodesRequest_default_instance_;
class RootCacheElectNodesResponse;
class RootCacheElectNodesResponseDefaultTypeInternal;
extern RootCacheElectNodesResponseDefaultTypeInternal _RootCacheElectNodesResponse_default_instance_;
class RootCompleteNodeResponse;
class RootCompleteNodeResponseDefaultTypeInternal;
extern RootCompleteNodeResponseDefaultTypeInternal _RootCompleteNodeResponse_default_instance_;
class RootMessage;
class RootMessageDefaultTypeInternal;
extern RootMessageDefaultTypeInternal _RootMessage_default_instance_;
}  // namespace protobuf
}  // namespace kadmlia
}  // namespace top
PROTOBUF_NAMESPACE_OPEN
template<> ::top::kadmlia::protobuf::BootstrapJoinRequest* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::BootstrapJoinRequest>(Arena*);
template<> ::top::kadmlia::protobuf::BootstrapJoinResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::BootstrapJoinResponse>(Arena*);
template<> ::top::kadmlia::protobuf::FindClosestNodesRequest* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::FindClosestNodesRequest>(Arena*);
template<> ::top::kadmlia::protobuf::FindClosestNodesResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::FindClosestNodesResponse>(Arena*);
template<> ::top::kadmlia::protobuf::Handshake* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::Handshake>(Arena*);
template<> ::top::kadmlia::protobuf::NodeInfo* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::NodeInfo>(Arena*);
template<> ::top::kadmlia::protobuf::RootCacheElectNodesRequest* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootCacheElectNodesRequest>(Arena*);
template<> ::top::kadmlia::protobuf::RootCacheElectNodesResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootCacheElectNodesResponse>(Arena*);
template<> ::top::kadmlia::protobuf::RootCompleteNodeResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootCompleteNodeResponse>(Arena*);
template<> ::top::kadmlia::protobuf::RootMessage* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace top {
namespace kadmlia {
namespace protobuf {

// ===================================================================

class BootstrapJoinRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.BootstrapJoinRequest) */ {
 public:
  inline BootstrapJoinRequest() : BootstrapJoinRequest(nullptr) {};
  virtual ~BootstrapJoinRequest();

  BootstrapJoinRequest(const BootstrapJoinRequest& from);
  BootstrapJoinRequest(BootstrapJoinRequest&& from) noexcept
    : BootstrapJoinRequest() {
    *this = ::std::move(from);
  }

  inline BootstrapJoinRequest& operator=(const BootstrapJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BootstrapJoinRequest& operator=(BootstrapJoinRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BootstrapJoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapJoinRequest* internal_default_instance() {
    return reinterpret_cast<const BootstrapJoinRequest*>(
               &_BootstrapJoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BootstrapJoinRequest& a, BootstrapJoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BootstrapJoinRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BootstrapJoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BootstrapJoinRequest* New() const final {
    return CreateMaybeMessage<BootstrapJoinRequest>(nullptr);
  }

  BootstrapJoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapJoinRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BootstrapJoinRequest& from);
  void MergeFrom(const BootstrapJoinRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapJoinRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.BootstrapJoinRequest";
  }
  protected:
  explicit BootstrapJoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXidFieldNumber = 1,
  };
  // optional bytes xid = 1;
  bool has_xid() const;
  private:
  bool _internal_has_xid() const;
  public:
  void clear_xid();
  const std::string& xid() const;
  void set_xid(const std::string& value);
  void set_xid(std::string&& value);
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  std::string* mutable_xid();
  std::string* release_xid();
  void set_allocated_xid(std::string* xid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_xid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_xid(
      std::string* xid);
  private:
  const std::string& _internal_xid() const;
  void _internal_set_xid(const std::string& value);
  std::string* _internal_mutable_xid();
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.BootstrapJoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xid_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class BootstrapJoinResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.BootstrapJoinResponse) */ {
 public:
  inline BootstrapJoinResponse() : BootstrapJoinResponse(nullptr) {};
  virtual ~BootstrapJoinResponse();

  BootstrapJoinResponse(const BootstrapJoinResponse& from);
  BootstrapJoinResponse(BootstrapJoinResponse&& from) noexcept
    : BootstrapJoinResponse() {
    *this = ::std::move(from);
  }

  inline BootstrapJoinResponse& operator=(const BootstrapJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BootstrapJoinResponse& operator=(BootstrapJoinResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BootstrapJoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapJoinResponse* internal_default_instance() {
    return reinterpret_cast<const BootstrapJoinResponse*>(
               &_BootstrapJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BootstrapJoinResponse& a, BootstrapJoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BootstrapJoinResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BootstrapJoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BootstrapJoinResponse* New() const final {
    return CreateMaybeMessage<BootstrapJoinResponse>(nullptr);
  }

  BootstrapJoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapJoinResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BootstrapJoinResponse& from);
  void MergeFrom(const BootstrapJoinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapJoinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.BootstrapJoinResponse";
  }
  protected:
  explicit BootstrapJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIpFieldNumber = 1,
    kBootstrapIdFieldNumber = 3,
    kXidFieldNumber = 4,
    kPublicPortFieldNumber = 2,
  };
  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  void set_public_ip(const std::string& value);
  void set_public_ip(std::string&& value);
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  std::string* mutable_public_ip();
  std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_ip(
      std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional bytes bootstrap_id = 3;
  bool has_bootstrap_id() const;
  private:
  bool _internal_has_bootstrap_id() const;
  public:
  void clear_bootstrap_id();
  const std::string& bootstrap_id() const;
  void set_bootstrap_id(const std::string& value);
  void set_bootstrap_id(std::string&& value);
  void set_bootstrap_id(const char* value);
  void set_bootstrap_id(const void* value, size_t size);
  std::string* mutable_bootstrap_id();
  std::string* release_bootstrap_id();
  void set_allocated_bootstrap_id(std::string* bootstrap_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bootstrap_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bootstrap_id(
      std::string* bootstrap_id);
  private:
  const std::string& _internal_bootstrap_id() const;
  void _internal_set_bootstrap_id(const std::string& value);
  std::string* _internal_mutable_bootstrap_id();
  public:

  // optional bytes xid = 4;
  bool has_xid() const;
  private:
  bool _internal_has_xid() const;
  public:
  void clear_xid();
  const std::string& xid() const;
  void set_xid(const std::string& value);
  void set_xid(std::string&& value);
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  std::string* mutable_xid();
  std::string* release_xid();
  void set_allocated_xid(std::string* xid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_xid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_xid(
      std::string* xid);
  private:
  const std::string& _internal_xid() const;
  void _internal_set_xid(const std::string& value);
  std::string* _internal_mutable_xid();
  public:

  // optional int32 public_port = 2;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  ::PROTOBUF_NAMESPACE_ID::int32 public_port() const;
  void set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_port() const;
  void _internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.BootstrapJoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bootstrap_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xid_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_port_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class Handshake PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.Handshake) */ {
 public:
  inline Handshake() : Handshake(nullptr) {};
  virtual ~Handshake();

  Handshake(const Handshake& from);
  Handshake(Handshake&& from) noexcept
    : Handshake() {
    *this = ::std::move(from);
  }

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Handshake& operator=(Handshake&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handshake* internal_default_instance() {
    return reinterpret_cast<const Handshake*>(
               &_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Handshake& a, Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Handshake* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Handshake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Handshake* New() const final {
    return CreateMaybeMessage<Handshake>(nullptr);
  }

  Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.Handshake";
  }
  protected:
  explicit Handshake(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIpFieldNumber = 2,
    kXidFieldNumber = 4,
    kTypeFieldNumber = 1,
    kPublicPortFieldNumber = 3,
  };
  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  void set_public_ip(const std::string& value);
  void set_public_ip(std::string&& value);
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  std::string* mutable_public_ip();
  std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_ip(
      std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional bytes xid = 4;
  bool has_xid() const;
  private:
  bool _internal_has_xid() const;
  public:
  void clear_xid();
  const std::string& xid() const;
  void set_xid(const std::string& value);
  void set_xid(std::string&& value);
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  std::string* mutable_xid();
  std::string* release_xid();
  void set_allocated_xid(std::string* xid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_xid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_xid(
      std::string* xid);
  private:
  const std::string& _internal_xid() const;
  void _internal_set_xid(const std::string& value);
  std::string* _internal_mutable_xid();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 public_port = 3;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  ::PROTOBUF_NAMESPACE_ID::int32 public_port() const;
  void set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_port() const;
  void _internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.Handshake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_port_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {};
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicIpFieldNumber = 1,
    kIdFieldNumber = 3,
    kXidFieldNumber = 4,
    kPublicPortFieldNumber = 2,
  };
  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  void set_public_ip(const std::string& value);
  void set_public_ip(std::string&& value);
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  std::string* mutable_public_ip();
  std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_ip(
      std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional bytes id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes xid = 4;
  bool has_xid() const;
  private:
  bool _internal_has_xid() const;
  public:
  void clear_xid();
  const std::string& xid() const;
  void set_xid(const std::string& value);
  void set_xid(std::string&& value);
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  std::string* mutable_xid();
  std::string* release_xid();
  void set_allocated_xid(std::string* xid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_xid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_xid(
      std::string* xid);
  private:
  const std::string& _internal_xid() const;
  void _internal_set_xid(const std::string& value);
  std::string* _internal_mutable_xid();
  public:

  // optional int32 public_port = 2;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  ::PROTOBUF_NAMESPACE_ID::int32 public_port() const;
  void set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_port() const;
  void _internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xid_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_port_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class FindClosestNodesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.FindClosestNodesRequest) */ {
 public:
  inline FindClosestNodesRequest() : FindClosestNodesRequest(nullptr) {};
  virtual ~FindClosestNodesRequest();

  FindClosestNodesRequest(const FindClosestNodesRequest& from);
  FindClosestNodesRequest(FindClosestNodesRequest&& from) noexcept
    : FindClosestNodesRequest() {
    *this = ::std::move(from);
  }

  inline FindClosestNodesRequest& operator=(const FindClosestNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindClosestNodesRequest& operator=(FindClosestNodesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindClosestNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindClosestNodesRequest* internal_default_instance() {
    return reinterpret_cast<const FindClosestNodesRequest*>(
               &_FindClosestNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FindClosestNodesRequest& a, FindClosestNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindClosestNodesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindClosestNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindClosestNodesRequest* New() const final {
    return CreateMaybeMessage<FindClosestNodesRequest>(nullptr);
  }

  FindClosestNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindClosestNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindClosestNodesRequest& from);
  void MergeFrom(const FindClosestNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindClosestNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.FindClosestNodesRequest";
  }
  protected:
  explicit FindClosestNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBloomfilterFieldNumber = 3,
    kTargetIdFieldNumber = 2,
    kSrcNodeinfoFieldNumber = 4,
    kCountFieldNumber = 1,
  };
  // repeated uint64 bloomfilter = 3;
  int bloomfilter_size() const;
  private:
  int _internal_bloomfilter_size() const;
  public:
  void clear_bloomfilter();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bloomfilter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bloomfilter() const;
  void _internal_add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bloomfilter();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bloomfilter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bloomfilter();

  // optional bytes target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const std::string& target_id() const;
  void set_target_id(const std::string& value);
  void set_target_id(std::string&& value);
  void set_target_id(const char* value);
  void set_target_id(const void* value, size_t size);
  std::string* mutable_target_id();
  std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_id(
      std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
  bool has_src_nodeinfo() const;
  private:
  bool _internal_has_src_nodeinfo() const;
  public:
  void clear_src_nodeinfo();
  const ::top::kadmlia::protobuf::NodeInfo& src_nodeinfo() const;
  ::top::kadmlia::protobuf::NodeInfo* release_src_nodeinfo();
  ::top::kadmlia::protobuf::NodeInfo* mutable_src_nodeinfo();
  void set_allocated_src_nodeinfo(::top::kadmlia::protobuf::NodeInfo* src_nodeinfo);
  private:
  const ::top::kadmlia::protobuf::NodeInfo& _internal_src_nodeinfo() const;
  ::top::kadmlia::protobuf::NodeInfo* _internal_mutable_src_nodeinfo();
  public:
  void unsafe_arena_set_allocated_src_nodeinfo(
      ::top::kadmlia::protobuf::NodeInfo* src_nodeinfo);
  ::top::kadmlia::protobuf::NodeInfo* unsafe_arena_release_src_nodeinfo();

  // optional uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.FindClosestNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bloomfilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
  ::top::kadmlia::protobuf::NodeInfo* src_nodeinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class FindClosestNodesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.FindClosestNodesResponse) */ {
 public:
  inline FindClosestNodesResponse() : FindClosestNodesResponse(nullptr) {};
  virtual ~FindClosestNodesResponse();

  FindClosestNodesResponse(const FindClosestNodesResponse& from);
  FindClosestNodesResponse(FindClosestNodesResponse&& from) noexcept
    : FindClosestNodesResponse() {
    *this = ::std::move(from);
  }

  inline FindClosestNodesResponse& operator=(const FindClosestNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindClosestNodesResponse& operator=(FindClosestNodesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindClosestNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindClosestNodesResponse* internal_default_instance() {
    return reinterpret_cast<const FindClosestNodesResponse*>(
               &_FindClosestNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FindClosestNodesResponse& a, FindClosestNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindClosestNodesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindClosestNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindClosestNodesResponse* New() const final {
    return CreateMaybeMessage<FindClosestNodesResponse>(nullptr);
  }

  FindClosestNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindClosestNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindClosestNodesResponse& from);
  void MergeFrom(const FindClosestNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindClosestNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.FindClosestNodesResponse";
  }
  protected:
  explicit FindClosestNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kPublicIpFieldNumber = 2,
    kPublicPortFieldNumber = 3,
  };
  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::top::kadmlia::protobuf::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
      mutable_nodes();
  private:
  const ::top::kadmlia::protobuf::NodeInfo& _internal_nodes(int index) const;
  ::top::kadmlia::protobuf::NodeInfo* _internal_add_nodes();
  public:
  const ::top::kadmlia::protobuf::NodeInfo& nodes(int index) const;
  ::top::kadmlia::protobuf::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
      nodes() const;

  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const std::string& public_ip() const;
  void set_public_ip(const std::string& value);
  void set_public_ip(std::string&& value);
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  std::string* mutable_public_ip();
  std::string* release_public_ip();
  void set_allocated_public_ip(std::string* public_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_ip(
      std::string* public_ip);
  private:
  const std::string& _internal_public_ip() const;
  void _internal_set_public_ip(const std::string& value);
  std::string* _internal_mutable_public_ip();
  public:

  // optional int32 public_port = 3;
  bool has_public_port() const;
  private:
  bool _internal_has_public_port() const;
  public:
  void clear_public_port();
  ::PROTOBUF_NAMESPACE_ID::int32 public_port() const;
  void set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_public_port() const;
  void _internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.FindClosestNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_port_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class RootCompleteNodeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootCompleteNodeResponse) */ {
 public:
  inline RootCompleteNodeResponse() : RootCompleteNodeResponse(nullptr) {};
  virtual ~RootCompleteNodeResponse();

  RootCompleteNodeResponse(const RootCompleteNodeResponse& from);
  RootCompleteNodeResponse(RootCompleteNodeResponse&& from) noexcept
    : RootCompleteNodeResponse() {
    *this = ::std::move(from);
  }

  inline RootCompleteNodeResponse& operator=(const RootCompleteNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootCompleteNodeResponse& operator=(RootCompleteNodeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootCompleteNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootCompleteNodeResponse* internal_default_instance() {
    return reinterpret_cast<const RootCompleteNodeResponse*>(
               &_RootCompleteNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RootCompleteNodeResponse& a, RootCompleteNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RootCompleteNodeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootCompleteNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootCompleteNodeResponse* New() const final {
    return CreateMaybeMessage<RootCompleteNodeResponse>(nullptr);
  }

  RootCompleteNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootCompleteNodeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootCompleteNodeResponse& from);
  void MergeFrom(const RootCompleteNodeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootCompleteNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.RootCompleteNodeResponse";
  }
  protected:
  explicit RootCompleteNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
  bool has_nodes() const;
  private:
  bool _internal_has_nodes() const;
  public:
  void clear_nodes();
  const ::top::kadmlia::protobuf::NodeInfo& nodes() const;
  ::top::kadmlia::protobuf::NodeInfo* release_nodes();
  ::top::kadmlia::protobuf::NodeInfo* mutable_nodes();
  void set_allocated_nodes(::top::kadmlia::protobuf::NodeInfo* nodes);
  private:
  const ::top::kadmlia::protobuf::NodeInfo& _internal_nodes() const;
  ::top::kadmlia::protobuf::NodeInfo* _internal_mutable_nodes();
  public:
  void unsafe_arena_set_allocated_nodes(
      ::top::kadmlia::protobuf::NodeInfo* nodes);
  ::top::kadmlia::protobuf::NodeInfo* unsafe_arena_release_nodes();

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootCompleteNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::top::kadmlia::protobuf::NodeInfo* nodes_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class RootCacheElectNodesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootCacheElectNodesRequest) */ {
 public:
  inline RootCacheElectNodesRequest() : RootCacheElectNodesRequest(nullptr) {};
  virtual ~RootCacheElectNodesRequest();

  RootCacheElectNodesRequest(const RootCacheElectNodesRequest& from);
  RootCacheElectNodesRequest(RootCacheElectNodesRequest&& from) noexcept
    : RootCacheElectNodesRequest() {
    *this = ::std::move(from);
  }

  inline RootCacheElectNodesRequest& operator=(const RootCacheElectNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootCacheElectNodesRequest& operator=(RootCacheElectNodesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootCacheElectNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootCacheElectNodesRequest* internal_default_instance() {
    return reinterpret_cast<const RootCacheElectNodesRequest*>(
               &_RootCacheElectNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RootCacheElectNodesRequest& a, RootCacheElectNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RootCacheElectNodesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootCacheElectNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootCacheElectNodesRequest* New() const final {
    return CreateMaybeMessage<RootCacheElectNodesRequest>(nullptr);
  }

  RootCacheElectNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootCacheElectNodesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootCacheElectNodesRequest& from);
  void MergeFrom(const RootCacheElectNodesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootCacheElectNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.RootCacheElectNodesRequest";
  }
  protected:
  explicit RootCacheElectNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDesServiceTypeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional uint64 des_service_type = 1;
  bool has_des_service_type() const;
  private:
  bool _internal_has_des_service_type() const;
  public:
  void clear_des_service_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 des_service_type() const;
  void set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_des_service_type() const;
  void _internal_set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootCacheElectNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 des_service_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class RootCacheElectNodesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootCacheElectNodesResponse) */ {
 public:
  inline RootCacheElectNodesResponse() : RootCacheElectNodesResponse(nullptr) {};
  virtual ~RootCacheElectNodesResponse();

  RootCacheElectNodesResponse(const RootCacheElectNodesResponse& from);
  RootCacheElectNodesResponse(RootCacheElectNodesResponse&& from) noexcept
    : RootCacheElectNodesResponse() {
    *this = ::std::move(from);
  }

  inline RootCacheElectNodesResponse& operator=(const RootCacheElectNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootCacheElectNodesResponse& operator=(RootCacheElectNodesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootCacheElectNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootCacheElectNodesResponse* internal_default_instance() {
    return reinterpret_cast<const RootCacheElectNodesResponse*>(
               &_RootCacheElectNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RootCacheElectNodesResponse& a, RootCacheElectNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RootCacheElectNodesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootCacheElectNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootCacheElectNodesResponse* New() const final {
    return CreateMaybeMessage<RootCacheElectNodesResponse>(nullptr);
  }

  RootCacheElectNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootCacheElectNodesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootCacheElectNodesResponse& from);
  void MergeFrom(const RootCacheElectNodesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootCacheElectNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.RootCacheElectNodesResponse";
  }
  protected:
  explicit RootCacheElectNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::top::kadmlia::protobuf::NodeInfo* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
      mutable_nodes();
  private:
  const ::top::kadmlia::protobuf::NodeInfo& _internal_nodes(int index) const;
  ::top::kadmlia::protobuf::NodeInfo* _internal_add_nodes();
  public:
  const ::top::kadmlia::protobuf::NodeInfo& nodes(int index) const;
  ::top::kadmlia::protobuf::NodeInfo* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootCacheElectNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// -------------------------------------------------------------------

class RootMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootMessage) */ {
 public:
  inline RootMessage() : RootMessage(nullptr) {};
  virtual ~RootMessage();

  RootMessage(const RootMessage& from);
  RootMessage(RootMessage&& from) noexcept
    : RootMessage() {
    *this = ::std::move(from);
  }

  inline RootMessage& operator=(const RootMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootMessage& operator=(RootMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootMessage* internal_default_instance() {
    return reinterpret_cast<const RootMessage*>(
               &_RootMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RootMessage& a, RootMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RootMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootMessage* New() const final {
    return CreateMaybeMessage<RootMessage>(nullptr);
  }

  RootMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootMessage& from);
  void MergeFrom(const RootMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "top.kadmlia.protobuf.RootMessage";
  }
  protected:
  explicit RootMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kadmlia_2eproto);
    return ::descriptor_table_kadmlia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMessageTypeFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 message_type = 1;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_type() const;
  void set_message_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_type() const;
  void _internal_set_message_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_type_;
  friend struct ::TableStruct_kadmlia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BootstrapJoinRequest

// optional bytes xid = 1;
inline bool BootstrapJoinRequest::_internal_has_xid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BootstrapJoinRequest::has_xid() const {
  return _internal_has_xid();
}
inline void BootstrapJoinRequest::clear_xid() {
  xid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BootstrapJoinRequest::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  return _internal_xid();
}
inline void BootstrapJoinRequest::set_xid(const std::string& value) {
  _internal_set_xid(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline std::string* BootstrapJoinRequest::mutable_xid() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  return _internal_mutable_xid();
}
inline const std::string& BootstrapJoinRequest::_internal_xid() const {
  return xid_.Get();
}
inline void BootstrapJoinRequest::_internal_set_xid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootstrapJoinRequest::set_xid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  xid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline void BootstrapJoinRequest::set_xid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline void BootstrapJoinRequest::set_xid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline std::string* BootstrapJoinRequest::_internal_mutable_xid() {
  _has_bits_[0] |= 0x00000001u;
  return xid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootstrapJoinRequest::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  if (!_internal_has_xid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return xid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootstrapJoinRequest::set_allocated_xid(std::string* xid) {
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  xid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline std::string* BootstrapJoinRequest::unsafe_arena_release_xid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return xid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootstrapJoinRequest::unsafe_arena_set_allocated_xid(
    std::string* xid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  xid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      xid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}

// -------------------------------------------------------------------

// BootstrapJoinResponse

// optional bytes public_ip = 1;
inline bool BootstrapJoinResponse::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BootstrapJoinResponse::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void BootstrapJoinResponse::clear_public_ip() {
  public_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BootstrapJoinResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  return _internal_public_ip();
}
inline void BootstrapJoinResponse::set_public_ip(const std::string& value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline std::string* BootstrapJoinResponse::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  return _internal_mutable_public_ip();
}
inline const std::string& BootstrapJoinResponse::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void BootstrapJoinResponse::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootstrapJoinResponse::set_public_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline void BootstrapJoinResponse::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline void BootstrapJoinResponse::set_public_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline std::string* BootstrapJoinResponse::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootstrapJoinResponse::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootstrapJoinResponse::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline std::string* BootstrapJoinResponse::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootstrapJoinResponse::unsafe_arena_set_allocated_public_ip(
    std::string* public_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}

// optional int32 public_port = 2;
inline bool BootstrapJoinResponse::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BootstrapJoinResponse::has_public_port() const {
  return _internal_has_public_port();
}
inline void BootstrapJoinResponse::clear_public_port() {
  public_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BootstrapJoinResponse::_internal_public_port() const {
  return public_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BootstrapJoinResponse::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.public_port)
  return _internal_public_port();
}
inline void BootstrapJoinResponse::_internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  public_port_ = value;
}
inline void BootstrapJoinResponse::set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.public_port)
}

// optional bytes bootstrap_id = 3;
inline bool BootstrapJoinResponse::_internal_has_bootstrap_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BootstrapJoinResponse::has_bootstrap_id() const {
  return _internal_has_bootstrap_id();
}
inline void BootstrapJoinResponse::clear_bootstrap_id() {
  bootstrap_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BootstrapJoinResponse::bootstrap_id() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  return _internal_bootstrap_id();
}
inline void BootstrapJoinResponse::set_bootstrap_id(const std::string& value) {
  _internal_set_bootstrap_id(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline std::string* BootstrapJoinResponse::mutable_bootstrap_id() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  return _internal_mutable_bootstrap_id();
}
inline const std::string& BootstrapJoinResponse::_internal_bootstrap_id() const {
  return bootstrap_id_.Get();
}
inline void BootstrapJoinResponse::_internal_set_bootstrap_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bootstrap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootstrapJoinResponse::set_bootstrap_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bootstrap_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline void BootstrapJoinResponse::set_bootstrap_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bootstrap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline void BootstrapJoinResponse::set_bootstrap_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bootstrap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline std::string* BootstrapJoinResponse::_internal_mutable_bootstrap_id() {
  _has_bits_[0] |= 0x00000002u;
  return bootstrap_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootstrapJoinResponse::release_bootstrap_id() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  if (!_internal_has_bootstrap_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bootstrap_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootstrapJoinResponse::set_allocated_bootstrap_id(std::string* bootstrap_id) {
  if (bootstrap_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bootstrap_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bootstrap_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline std::string* BootstrapJoinResponse::unsafe_arena_release_bootstrap_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return bootstrap_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootstrapJoinResponse::unsafe_arena_set_allocated_bootstrap_id(
    std::string* bootstrap_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bootstrap_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bootstrap_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bootstrap_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}

// optional bytes xid = 4;
inline bool BootstrapJoinResponse::_internal_has_xid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BootstrapJoinResponse::has_xid() const {
  return _internal_has_xid();
}
inline void BootstrapJoinResponse::clear_xid() {
  xid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BootstrapJoinResponse::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  return _internal_xid();
}
inline void BootstrapJoinResponse::set_xid(const std::string& value) {
  _internal_set_xid(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline std::string* BootstrapJoinResponse::mutable_xid() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  return _internal_mutable_xid();
}
inline const std::string& BootstrapJoinResponse::_internal_xid() const {
  return xid_.Get();
}
inline void BootstrapJoinResponse::_internal_set_xid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BootstrapJoinResponse::set_xid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline void BootstrapJoinResponse::set_xid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline void BootstrapJoinResponse::set_xid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline std::string* BootstrapJoinResponse::_internal_mutable_xid() {
  _has_bits_[0] |= 0x00000004u;
  return xid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BootstrapJoinResponse::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  if (!_internal_has_xid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return xid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BootstrapJoinResponse::set_allocated_xid(std::string* xid) {
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  xid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline std::string* BootstrapJoinResponse::unsafe_arena_release_xid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return xid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BootstrapJoinResponse::unsafe_arena_set_allocated_xid(
    std::string* xid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  xid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      xid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}

// -------------------------------------------------------------------

// Handshake

// optional int32 type = 1;
inline bool Handshake::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Handshake::has_type() const {
  return _internal_has_type();
}
inline void Handshake::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Handshake::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Handshake::type() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.type)
  return _internal_type();
}
inline void Handshake::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Handshake::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.type)
}

// optional bytes public_ip = 2;
inline bool Handshake::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Handshake::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void Handshake::clear_public_ip() {
  public_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Handshake::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.public_ip)
  return _internal_public_ip();
}
inline void Handshake::set_public_ip(const std::string& value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.public_ip)
}
inline std::string* Handshake::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.Handshake.public_ip)
  return _internal_mutable_public_ip();
}
inline const std::string& Handshake::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void Handshake::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Handshake::set_public_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.Handshake.public_ip)
}
inline void Handshake::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.Handshake.public_ip)
}
inline void Handshake::set_public_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.Handshake.public_ip)
}
inline std::string* Handshake::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Handshake::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.Handshake.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Handshake::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.Handshake.public_ip)
}
inline std::string* Handshake::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.Handshake.public_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Handshake::unsafe_arena_set_allocated_public_ip(
    std::string* public_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.Handshake.public_ip)
}

// optional int32 public_port = 3;
inline bool Handshake::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Handshake::has_public_port() const {
  return _internal_has_public_port();
}
inline void Handshake::clear_public_port() {
  public_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Handshake::_internal_public_port() const {
  return public_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Handshake::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.public_port)
  return _internal_public_port();
}
inline void Handshake::_internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  public_port_ = value;
}
inline void Handshake::set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.public_port)
}

// optional bytes xid = 4;
inline bool Handshake::_internal_has_xid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Handshake::has_xid() const {
  return _internal_has_xid();
}
inline void Handshake::clear_xid() {
  xid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Handshake::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.xid)
  return _internal_xid();
}
inline void Handshake::set_xid(const std::string& value) {
  _internal_set_xid(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.xid)
}
inline std::string* Handshake::mutable_xid() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.Handshake.xid)
  return _internal_mutable_xid();
}
inline const std::string& Handshake::_internal_xid() const {
  return xid_.Get();
}
inline void Handshake::_internal_set_xid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Handshake::set_xid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  xid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.Handshake.xid)
}
inline void Handshake::set_xid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.Handshake.xid)
}
inline void Handshake::set_xid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.Handshake.xid)
}
inline std::string* Handshake::_internal_mutable_xid() {
  _has_bits_[0] |= 0x00000002u;
  return xid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Handshake::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.Handshake.xid)
  if (!_internal_has_xid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return xid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Handshake::set_allocated_xid(std::string* xid) {
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  xid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.Handshake.xid)
}
inline std::string* Handshake::unsafe_arena_release_xid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.Handshake.xid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return xid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Handshake::unsafe_arena_set_allocated_xid(
    std::string* xid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  xid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      xid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.Handshake.xid)
}

// -------------------------------------------------------------------

// NodeInfo

// optional bytes public_ip = 1;
inline bool NodeInfo::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NodeInfo::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void NodeInfo::clear_public_ip() {
  public_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.public_ip)
  return _internal_public_ip();
}
inline void NodeInfo::set_public_ip(const std::string& value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline std::string* NodeInfo::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.NodeInfo.public_ip)
  return _internal_mutable_public_ip();
}
inline const std::string& NodeInfo::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void NodeInfo::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_public_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline void NodeInfo::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline void NodeInfo::set_public_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline std::string* NodeInfo::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.NodeInfo.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline std::string* NodeInfo::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.NodeInfo.public_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_public_ip(
    std::string* public_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.NodeInfo.public_ip)
}

// optional int32 public_port = 2;
inline bool NodeInfo::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NodeInfo::has_public_port() const {
  return _internal_has_public_port();
}
inline void NodeInfo::clear_public_port() {
  public_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo::_internal_public_port() const {
  return public_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.public_port)
  return _internal_public_port();
}
inline void NodeInfo::_internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  public_port_ = value;
}
inline void NodeInfo::set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.public_port)
}

// optional bytes id = 3;
inline bool NodeInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NodeInfo::has_id() const {
  return _internal_has_id();
}
inline void NodeInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NodeInfo::id() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.id)
  return _internal_id();
}
inline void NodeInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.id)
}
inline std::string* NodeInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.NodeInfo.id)
  return _internal_mutable_id();
}
inline const std::string& NodeInfo::_internal_id() const {
  return id_.Get();
}
inline void NodeInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.NodeInfo.id)
}
inline void NodeInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.NodeInfo.id)
}
inline void NodeInfo::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.NodeInfo.id)
}
inline std::string* NodeInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_id() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.NodeInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.NodeInfo.id)
}
inline std::string* NodeInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.NodeInfo.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.NodeInfo.id)
}

// optional bytes xid = 4;
inline bool NodeInfo::_internal_has_xid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NodeInfo::has_xid() const {
  return _internal_has_xid();
}
inline void NodeInfo::clear_xid() {
  xid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NodeInfo::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.xid)
  return _internal_xid();
}
inline void NodeInfo::set_xid(const std::string& value) {
  _internal_set_xid(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.xid)
}
inline std::string* NodeInfo::mutable_xid() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.NodeInfo.xid)
  return _internal_mutable_xid();
}
inline const std::string& NodeInfo::_internal_xid() const {
  return xid_.Get();
}
inline void NodeInfo::_internal_set_xid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeInfo::set_xid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.NodeInfo.xid)
}
inline void NodeInfo::set_xid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.NodeInfo.xid)
}
inline void NodeInfo::set_xid(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.NodeInfo.xid)
}
inline std::string* NodeInfo::_internal_mutable_xid() {
  _has_bits_[0] |= 0x00000004u;
  return xid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeInfo::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.NodeInfo.xid)
  if (!_internal_has_xid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return xid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeInfo::set_allocated_xid(std::string* xid) {
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  xid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.NodeInfo.xid)
}
inline std::string* NodeInfo::unsafe_arena_release_xid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.NodeInfo.xid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return xid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NodeInfo::unsafe_arena_set_allocated_xid(
    std::string* xid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (xid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  xid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      xid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.NodeInfo.xid)
}

// -------------------------------------------------------------------

// FindClosestNodesRequest

// optional uint32 count = 1;
inline bool FindClosestNodesRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FindClosestNodesRequest::has_count() const {
  return _internal_has_count();
}
inline void FindClosestNodesRequest::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindClosestNodesRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FindClosestNodesRequest::count() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.count)
  return _internal_count();
}
inline void FindClosestNodesRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void FindClosestNodesRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesRequest.count)
}

// optional bytes target_id = 2;
inline bool FindClosestNodesRequest::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FindClosestNodesRequest::has_target_id() const {
  return _internal_has_target_id();
}
inline void FindClosestNodesRequest::clear_target_id() {
  target_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FindClosestNodesRequest::target_id() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  return _internal_target_id();
}
inline void FindClosestNodesRequest::set_target_id(const std::string& value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline std::string* FindClosestNodesRequest::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  return _internal_mutable_target_id();
}
inline const std::string& FindClosestNodesRequest::_internal_target_id() const {
  return target_id_.Get();
}
inline void FindClosestNodesRequest::_internal_set_target_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindClosestNodesRequest::set_target_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  target_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline void FindClosestNodesRequest::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline void FindClosestNodesRequest::set_target_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline std::string* FindClosestNodesRequest::_internal_mutable_target_id() {
  _has_bits_[0] |= 0x00000001u;
  return target_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindClosestNodesRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  if (!_internal_has_target_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return target_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindClosestNodesRequest::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline std::string* FindClosestNodesRequest::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return target_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindClosestNodesRequest::unsafe_arena_set_allocated_target_id(
    std::string* target_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}

// repeated uint64 bloomfilter = 3;
inline int FindClosestNodesRequest::_internal_bloomfilter_size() const {
  return bloomfilter_.size();
}
inline int FindClosestNodesRequest::bloomfilter_size() const {
  return _internal_bloomfilter_size();
}
inline void FindClosestNodesRequest::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FindClosestNodesRequest::_internal_bloomfilter(int index) const {
  return bloomfilter_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FindClosestNodesRequest::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
  return _internal_bloomfilter(index);
}
inline void FindClosestNodesRequest::set_bloomfilter(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
}
inline void FindClosestNodesRequest::_internal_add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bloomfilter_.Add(value);
}
inline void FindClosestNodesRequest::add_bloomfilter(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bloomfilter(value);
  // @@protoc_insertion_point(field_add:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FindClosestNodesRequest::_internal_bloomfilter() const {
  return bloomfilter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
FindClosestNodesRequest::bloomfilter() const {
  // @@protoc_insertion_point(field_list:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
  return _internal_bloomfilter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FindClosestNodesRequest::_internal_mutable_bloomfilter() {
  return &bloomfilter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
FindClosestNodesRequest::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
  return _internal_mutable_bloomfilter();
}

// optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
inline bool FindClosestNodesRequest::_internal_has_src_nodeinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || src_nodeinfo_ != nullptr);
  return value;
}
inline bool FindClosestNodesRequest::has_src_nodeinfo() const {
  return _internal_has_src_nodeinfo();
}
inline void FindClosestNodesRequest::clear_src_nodeinfo() {
  if (src_nodeinfo_ != nullptr) src_nodeinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesRequest::_internal_src_nodeinfo() const {
  const ::top::kadmlia::protobuf::NodeInfo* p = src_nodeinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::top::kadmlia::protobuf::NodeInfo*>(
      &::top::kadmlia::protobuf::_NodeInfo_default_instance_);
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesRequest::src_nodeinfo() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
  return _internal_src_nodeinfo();
}
inline void FindClosestNodesRequest::unsafe_arena_set_allocated_src_nodeinfo(
    ::top::kadmlia::protobuf::NodeInfo* src_nodeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_nodeinfo_);
  }
  src_nodeinfo_ = src_nodeinfo;
  if (src_nodeinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesRequest::release_src_nodeinfo() {
  auto temp = unsafe_arena_release_src_nodeinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesRequest::unsafe_arena_release_src_nodeinfo() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
  _has_bits_[0] &= ~0x00000002u;
  ::top::kadmlia::protobuf::NodeInfo* temp = src_nodeinfo_;
  src_nodeinfo_ = nullptr;
  return temp;
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesRequest::_internal_mutable_src_nodeinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (src_nodeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::top::kadmlia::protobuf::NodeInfo>(GetArena());
    src_nodeinfo_ = p;
  }
  return src_nodeinfo_;
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesRequest::mutable_src_nodeinfo() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
  return _internal_mutable_src_nodeinfo();
}
inline void FindClosestNodesRequest::set_allocated_src_nodeinfo(::top::kadmlia::protobuf::NodeInfo* src_nodeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete src_nodeinfo_;
  }
  if (src_nodeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(src_nodeinfo);
    if (message_arena != submessage_arena) {
      src_nodeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_nodeinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  src_nodeinfo_ = src_nodeinfo;
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
}

// -------------------------------------------------------------------

// FindClosestNodesResponse

// repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
inline int FindClosestNodesResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int FindClosestNodesResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void FindClosestNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
FindClosestNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return &nodes_;
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesResponse::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return _internal_nodes(index);
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesResponse::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
FindClosestNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return nodes_;
}

// optional bytes public_ip = 2;
inline bool FindClosestNodesResponse::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FindClosestNodesResponse::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void FindClosestNodesResponse::clear_public_ip() {
  public_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FindClosestNodesResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  return _internal_public_ip();
}
inline void FindClosestNodesResponse::set_public_ip(const std::string& value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline std::string* FindClosestNodesResponse::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  return _internal_mutable_public_ip();
}
inline const std::string& FindClosestNodesResponse::_internal_public_ip() const {
  return public_ip_.Get();
}
inline void FindClosestNodesResponse::_internal_set_public_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FindClosestNodesResponse::set_public_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline void FindClosestNodesResponse::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline void FindClosestNodesResponse::set_public_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline std::string* FindClosestNodesResponse::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000001u;
  return public_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FindClosestNodesResponse::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  if (!_internal_has_public_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindClosestNodesResponse::set_allocated_public_ip(std::string* public_ip) {
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline std::string* FindClosestNodesResponse::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return public_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FindClosestNodesResponse::unsafe_arena_set_allocated_public_ip(
    std::string* public_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  public_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}

// optional int32 public_port = 3;
inline bool FindClosestNodesResponse::_internal_has_public_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FindClosestNodesResponse::has_public_port() const {
  return _internal_has_public_port();
}
inline void FindClosestNodesResponse::clear_public_port() {
  public_port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindClosestNodesResponse::_internal_public_port() const {
  return public_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FindClosestNodesResponse::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesResponse.public_port)
  return _internal_public_port();
}
inline void FindClosestNodesResponse::_internal_set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  public_port_ = value;
}
inline void FindClosestNodesResponse::set_public_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_public_port(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesResponse.public_port)
}

// -------------------------------------------------------------------

// RootCompleteNodeResponse

// optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
inline bool RootCompleteNodeResponse::_internal_has_nodes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || nodes_ != nullptr);
  return value;
}
inline bool RootCompleteNodeResponse::has_nodes() const {
  return _internal_has_nodes();
}
inline void RootCompleteNodeResponse::clear_nodes() {
  if (nodes_ != nullptr) nodes_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCompleteNodeResponse::_internal_nodes() const {
  const ::top::kadmlia::protobuf::NodeInfo* p = nodes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::top::kadmlia::protobuf::NodeInfo*>(
      &::top::kadmlia::protobuf::_NodeInfo_default_instance_);
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCompleteNodeResponse::nodes() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
  return _internal_nodes();
}
inline void RootCompleteNodeResponse::unsafe_arena_set_allocated_nodes(
    ::top::kadmlia::protobuf::NodeInfo* nodes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodes_);
  }
  nodes_ = nodes;
  if (nodes) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCompleteNodeResponse::release_nodes() {
  auto temp = unsafe_arena_release_nodes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCompleteNodeResponse::unsafe_arena_release_nodes() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
  _has_bits_[0] &= ~0x00000001u;
  ::top::kadmlia::protobuf::NodeInfo* temp = nodes_;
  nodes_ = nullptr;
  return temp;
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCompleteNodeResponse::_internal_mutable_nodes() {
  _has_bits_[0] |= 0x00000001u;
  if (nodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::top::kadmlia::protobuf::NodeInfo>(GetArena());
    nodes_ = p;
  }
  return nodes_;
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCompleteNodeResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
  return _internal_mutable_nodes();
}
inline void RootCompleteNodeResponse::set_allocated_nodes(::top::kadmlia::protobuf::NodeInfo* nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nodes_;
  }
  if (nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nodes);
    if (message_arena != submessage_arena) {
      nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nodes_ = nodes;
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
}

// -------------------------------------------------------------------

// RootCacheElectNodesRequest

// optional uint64 des_service_type = 1;
inline bool RootCacheElectNodesRequest::_internal_has_des_service_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RootCacheElectNodesRequest::has_des_service_type() const {
  return _internal_has_des_service_type();
}
inline void RootCacheElectNodesRequest::clear_des_service_type() {
  des_service_type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RootCacheElectNodesRequest::_internal_des_service_type() const {
  return des_service_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RootCacheElectNodesRequest::des_service_type() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCacheElectNodesRequest.des_service_type)
  return _internal_des_service_type();
}
inline void RootCacheElectNodesRequest::_internal_set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  des_service_type_ = value;
}
inline void RootCacheElectNodesRequest::set_des_service_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_des_service_type(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootCacheElectNodesRequest.des_service_type)
}

// optional uint32 count = 2;
inline bool RootCacheElectNodesRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RootCacheElectNodesRequest::has_count() const {
  return _internal_has_count();
}
inline void RootCacheElectNodesRequest::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RootCacheElectNodesRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RootCacheElectNodesRequest::count() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCacheElectNodesRequest.count)
  return _internal_count();
}
inline void RootCacheElectNodesRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void RootCacheElectNodesRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootCacheElectNodesRequest.count)
}

// -------------------------------------------------------------------

// RootCacheElectNodesResponse

// repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
inline int RootCacheElectNodesResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int RootCacheElectNodesResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void RootCacheElectNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCacheElectNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
RootCacheElectNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return &nodes_;
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCacheElectNodesResponse::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCacheElectNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return _internal_nodes(index);
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCacheElectNodesResponse::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCacheElectNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
RootCacheElectNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// RootMessage

// optional uint32 message_type = 1;
inline bool RootMessage::_internal_has_message_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RootMessage::has_message_type() const {
  return _internal_has_message_type();
}
inline void RootMessage::clear_message_type() {
  message_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RootMessage::_internal_message_type() const {
  return message_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RootMessage::message_type() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootMessage.message_type)
  return _internal_message_type();
}
inline void RootMessage::_internal_set_message_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  message_type_ = value;
}
inline void RootMessage::set_message_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootMessage.message_type)
}

// optional bytes data = 2;
inline bool RootMessage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RootMessage::has_data() const {
  return _internal_has_data();
}
inline void RootMessage::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RootMessage::data() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootMessage.data)
  return _internal_data();
}
inline void RootMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootMessage.data)
}
inline std::string* RootMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.RootMessage.data)
  return _internal_mutable_data();
}
inline const std::string& RootMessage::_internal_data() const {
  return data_.Get();
}
inline void RootMessage::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RootMessage::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.RootMessage.data)
}
inline void RootMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.RootMessage.data)
}
inline void RootMessage::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.RootMessage.data)
}
inline std::string* RootMessage::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RootMessage::release_data() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.RootMessage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RootMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.RootMessage.data)
}
inline std::string* RootMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:top.kadmlia.protobuf.RootMessage.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RootMessage::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:top.kadmlia.protobuf.RootMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace kadmlia
}  // namespace top

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kadmlia_2eproto
