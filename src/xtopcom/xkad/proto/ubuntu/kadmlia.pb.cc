// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kadmlia.proto

#include "kadmlia.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kadmlia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_kadmlia_2eproto;
namespace top {
namespace kadmlia {
namespace protobuf {
class BootstrapJoinRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootstrapJoinRequest> _instance;
} _BootstrapJoinRequest_default_instance_;
class BootstrapJoinResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BootstrapJoinResponse> _instance;
} _BootstrapJoinResponse_default_instance_;
class HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Handshake> _instance;
} _Handshake_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class FindClosestNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindClosestNodesRequest> _instance;
} _FindClosestNodesRequest_default_instance_;
class FindClosestNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindClosestNodesResponse> _instance;
} _FindClosestNodesResponse_default_instance_;
class RootCompleteNodeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootCompleteNodeResponse> _instance;
} _RootCompleteNodeResponse_default_instance_;
class RootCacheElectNodesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootCacheElectNodesRequest> _instance;
} _RootCacheElectNodesRequest_default_instance_;
class RootCacheElectNodesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootCacheElectNodesResponse> _instance;
} _RootCacheElectNodesResponse_default_instance_;
class RootMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootMessage> _instance;
} _RootMessage_default_instance_;
}  // namespace protobuf
}  // namespace kadmlia
}  // namespace top
static void InitDefaultsscc_info_BootstrapJoinRequest_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_BootstrapJoinRequest_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::BootstrapJoinRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::BootstrapJoinRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootstrapJoinRequest_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BootstrapJoinRequest_kadmlia_2eproto}, {}};

static void InitDefaultsscc_info_BootstrapJoinResponse_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_BootstrapJoinResponse_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::BootstrapJoinResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::BootstrapJoinResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BootstrapJoinResponse_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BootstrapJoinResponse_kadmlia_2eproto}, {}};

static void InitDefaultsscc_info_FindClosestNodesRequest_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_FindClosestNodesRequest_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::FindClosestNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::FindClosestNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindClosestNodesRequest_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindClosestNodesRequest_kadmlia_2eproto}, {
      &scc_info_NodeInfo_kadmlia_2eproto.base,}};

static void InitDefaultsscc_info_FindClosestNodesResponse_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_FindClosestNodesResponse_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::FindClosestNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::FindClosestNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindClosestNodesResponse_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindClosestNodesResponse_kadmlia_2eproto}, {
      &scc_info_NodeInfo_kadmlia_2eproto.base,}};

static void InitDefaultsscc_info_Handshake_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_Handshake_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Handshake_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Handshake_kadmlia_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_NodeInfo_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfo_kadmlia_2eproto}, {}};

static void InitDefaultsscc_info_RootCacheElectNodesRequest_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_RootCacheElectNodesRequest_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::RootCacheElectNodesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::RootCacheElectNodesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootCacheElectNodesRequest_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RootCacheElectNodesRequest_kadmlia_2eproto}, {}};

static void InitDefaultsscc_info_RootCacheElectNodesResponse_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_RootCacheElectNodesResponse_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::RootCacheElectNodesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::RootCacheElectNodesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RootCacheElectNodesResponse_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RootCacheElectNodesResponse_kadmlia_2eproto}, {
      &scc_info_NodeInfo_kadmlia_2eproto.base,}};

static void InitDefaultsscc_info_RootCompleteNodeResponse_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_RootCompleteNodeResponse_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::RootCompleteNodeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::RootCompleteNodeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RootCompleteNodeResponse_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RootCompleteNodeResponse_kadmlia_2eproto}, {
      &scc_info_NodeInfo_kadmlia_2eproto.base,}};

static void InitDefaultsscc_info_RootMessage_kadmlia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::top::kadmlia::protobuf::_RootMessage_default_instance_;
    new (ptr) ::top::kadmlia::protobuf::RootMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::top::kadmlia::protobuf::RootMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootMessage_kadmlia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RootMessage_kadmlia_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kadmlia_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kadmlia_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kadmlia_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kadmlia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinRequest, xid_),
  0,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinResponse, public_ip_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinResponse, public_port_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinResponse, bootstrap_id_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::BootstrapJoinResponse, xid_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::Handshake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::Handshake, type_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::Handshake, public_ip_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::Handshake, public_port_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::Handshake, xid_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::NodeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::NodeInfo, public_ip_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::NodeInfo, public_port_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::NodeInfo, id_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::NodeInfo, xid_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesRequest, count_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesRequest, target_id_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesRequest, bloomfilter_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesRequest, src_nodeinfo_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesResponse, nodes_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesResponse, public_ip_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::FindClosestNodesResponse, public_port_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCompleteNodeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCompleteNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCompleteNodeResponse, nodes_),
  0,
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCacheElectNodesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCacheElectNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCacheElectNodesRequest, des_service_type_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCacheElectNodesRequest, count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCacheElectNodesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootCacheElectNodesResponse, nodes_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::top::kadmlia::protobuf::RootMessage, data_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::top::kadmlia::protobuf::BootstrapJoinRequest)},
  { 7, 16, sizeof(::top::kadmlia::protobuf::BootstrapJoinResponse)},
  { 20, 29, sizeof(::top::kadmlia::protobuf::Handshake)},
  { 33, 42, sizeof(::top::kadmlia::protobuf::NodeInfo)},
  { 46, 55, sizeof(::top::kadmlia::protobuf::FindClosestNodesRequest)},
  { 59, 67, sizeof(::top::kadmlia::protobuf::FindClosestNodesResponse)},
  { 70, 76, sizeof(::top::kadmlia::protobuf::RootCompleteNodeResponse)},
  { 77, 84, sizeof(::top::kadmlia::protobuf::RootCacheElectNodesRequest)},
  { 86, -1, sizeof(::top::kadmlia::protobuf::RootCacheElectNodesResponse)},
  { 92, 99, sizeof(::top::kadmlia::protobuf::RootMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_BootstrapJoinRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_BootstrapJoinResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_FindClosestNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_FindClosestNodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_RootCompleteNodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_RootCacheElectNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_RootCacheElectNodesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::top::kadmlia::protobuf::_RootMessage_default_instance_),
};

const char descriptor_table_protodef_kadmlia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rkadmlia.proto\022\024top.kadmlia.protobuf\"#\n"
  "\024BootstrapJoinRequest\022\013\n\003xid\030\001 \001(\014\"b\n\025Bo"
  "otstrapJoinResponse\022\021\n\tpublic_ip\030\001 \001(\014\022\023"
  "\n\013public_port\030\002 \001(\005\022\024\n\014bootstrap_id\030\003 \001("
  "\014\022\013\n\003xid\030\004 \001(\014\"N\n\tHandshake\022\014\n\004type\030\001 \001("
  "\005\022\021\n\tpublic_ip\030\002 \001(\014\022\023\n\013public_port\030\003 \001("
  "\005\022\013\n\003xid\030\004 \001(\014\"K\n\010NodeInfo\022\021\n\tpublic_ip\030"
  "\001 \001(\014\022\023\n\013public_port\030\002 \001(\005\022\n\n\002id\030\003 \001(\014\022\013"
  "\n\003xid\030\004 \001(\014\"\206\001\n\027FindClosestNodesRequest\022"
  "\r\n\005count\030\001 \001(\r\022\021\n\ttarget_id\030\002 \001(\014\022\023\n\013blo"
  "omfilter\030\003 \003(\004\0224\n\014src_nodeinfo\030\004 \001(\0132\036.t"
  "op.kadmlia.protobuf.NodeInfo\"q\n\030FindClos"
  "estNodesResponse\022-\n\005nodes\030\001 \003(\0132\036.top.ka"
  "dmlia.protobuf.NodeInfo\022\021\n\tpublic_ip\030\002 \001"
  "(\014\022\023\n\013public_port\030\003 \001(\005\"I\n\030RootCompleteN"
  "odeResponse\022-\n\005nodes\030\001 \001(\0132\036.top.kadmlia"
  ".protobuf.NodeInfo\"E\n\032RootCacheElectNode"
  "sRequest\022\030\n\020des_service_type\030\001 \001(\004\022\r\n\005co"
  "unt\030\002 \001(\r\"L\n\033RootCacheElectNodesResponse"
  "\022-\n\005nodes\030\001 \003(\0132\036.top.kadmlia.protobuf.N"
  "odeInfo\"1\n\013RootMessage\022\024\n\014message_type\030\001"
  " \001(\r\022\014\n\004data\030\002 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kadmlia_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kadmlia_2eproto_sccs[10] = {
  &scc_info_BootstrapJoinRequest_kadmlia_2eproto.base,
  &scc_info_BootstrapJoinResponse_kadmlia_2eproto.base,
  &scc_info_FindClosestNodesRequest_kadmlia_2eproto.base,
  &scc_info_FindClosestNodesResponse_kadmlia_2eproto.base,
  &scc_info_Handshake_kadmlia_2eproto.base,
  &scc_info_NodeInfo_kadmlia_2eproto.base,
  &scc_info_RootCacheElectNodesRequest_kadmlia_2eproto.base,
  &scc_info_RootCacheElectNodesResponse_kadmlia_2eproto.base,
  &scc_info_RootCompleteNodeResponse_kadmlia_2eproto.base,
  &scc_info_RootMessage_kadmlia_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kadmlia_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kadmlia_2eproto = {
  false, false, descriptor_table_protodef_kadmlia_2eproto, "kadmlia.proto", 858,
  &descriptor_table_kadmlia_2eproto_once, descriptor_table_kadmlia_2eproto_sccs, descriptor_table_kadmlia_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_kadmlia_2eproto::offsets,
  file_level_metadata_kadmlia_2eproto, 10, file_level_enum_descriptors_kadmlia_2eproto, file_level_service_descriptors_kadmlia_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kadmlia_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kadmlia_2eproto)), true);
namespace top {
namespace kadmlia {
namespace protobuf {

// ===================================================================

void BootstrapJoinRequest::InitAsDefaultInstance() {
}
class BootstrapJoinRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BootstrapJoinRequest>()._has_bits_);
  static void set_has_xid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BootstrapJoinRequest::BootstrapJoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.BootstrapJoinRequest)
}
BootstrapJoinRequest::BootstrapJoinRequest(const BootstrapJoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_xid()) {
    xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_xid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.BootstrapJoinRequest)
}

void BootstrapJoinRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BootstrapJoinRequest_kadmlia_2eproto.base);
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BootstrapJoinRequest::~BootstrapJoinRequest() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.BootstrapJoinRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BootstrapJoinRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  xid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BootstrapJoinRequest::ArenaDtor(void* object) {
  BootstrapJoinRequest* _this = reinterpret_cast< BootstrapJoinRequest* >(object);
  (void)_this;
}
void BootstrapJoinRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BootstrapJoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrapJoinRequest& BootstrapJoinRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootstrapJoinRequest_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void BootstrapJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    xid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BootstrapJoinRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes xid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_xid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BootstrapJoinRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes xid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_xid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.BootstrapJoinRequest)
  return target;
}

size_t BootstrapJoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes xid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_xid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrapJoinRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrapJoinRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootstrapJoinRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.BootstrapJoinRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.BootstrapJoinRequest)
    MergeFrom(*source);
  }
}

void BootstrapJoinRequest::MergeFrom(const BootstrapJoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_xid()) {
    _internal_set_xid(from._internal_xid());
  }
}

void BootstrapJoinRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapJoinRequest::CopyFrom(const BootstrapJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.BootstrapJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapJoinRequest::IsInitialized() const {
  return true;
}

void BootstrapJoinRequest::InternalSwap(BootstrapJoinRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  xid_.Swap(&other->xid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BootstrapJoinRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BootstrapJoinResponse::InitAsDefaultInstance() {
}
class BootstrapJoinResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BootstrapJoinResponse>()._has_bits_);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bootstrap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BootstrapJoinResponse::BootstrapJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.BootstrapJoinResponse)
}
BootstrapJoinResponse::BootstrapJoinResponse(const BootstrapJoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_ip()) {
    public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_ip(),
      GetArena());
  }
  bootstrap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bootstrap_id()) {
    bootstrap_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bootstrap_id(),
      GetArena());
  }
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_xid()) {
    xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_xid(),
      GetArena());
  }
  public_port_ = from.public_port_;
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.BootstrapJoinResponse)
}

void BootstrapJoinResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BootstrapJoinResponse_kadmlia_2eproto.base);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bootstrap_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_port_ = 0;
}

BootstrapJoinResponse::~BootstrapJoinResponse() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.BootstrapJoinResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BootstrapJoinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bootstrap_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BootstrapJoinResponse::ArenaDtor(void* object) {
  BootstrapJoinResponse* _this = reinterpret_cast< BootstrapJoinResponse* >(object);
  (void)_this;
}
void BootstrapJoinResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BootstrapJoinResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BootstrapJoinResponse& BootstrapJoinResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BootstrapJoinResponse_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void BootstrapJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      public_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bootstrap_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      xid_.ClearNonDefaultToEmpty();
    }
  }
  public_port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BootstrapJoinResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes public_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 public_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_public_port(&has_bits);
          public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bootstrap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bootstrap_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes xid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_xid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BootstrapJoinResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_ip(), target);
  }

  // optional int32 public_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_public_port(), target);
  }

  // optional bytes bootstrap_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_bootstrap_id(), target);
  }

  // optional bytes xid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_xid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.BootstrapJoinResponse)
  return target;
}

size_t BootstrapJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes public_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_ip());
    }

    // optional bytes bootstrap_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bootstrap_id());
    }

    // optional bytes xid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_xid());
    }

    // optional int32 public_port = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_public_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BootstrapJoinResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrapJoinResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BootstrapJoinResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.BootstrapJoinResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.BootstrapJoinResponse)
    MergeFrom(*source);
  }
}

void BootstrapJoinResponse::MergeFrom(const BootstrapJoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_ip(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bootstrap_id(from._internal_bootstrap_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_xid(from._internal_xid());
    }
    if (cached_has_bits & 0x00000008u) {
      public_port_ = from.public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BootstrapJoinResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapJoinResponse::CopyFrom(const BootstrapJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.BootstrapJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrapJoinResponse::IsInitialized() const {
  return true;
}

void BootstrapJoinResponse::InternalSwap(BootstrapJoinResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_ip_.Swap(&other->public_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bootstrap_id_.Swap(&other->bootstrap_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xid_.Swap(&other->xid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_port_, other->public_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BootstrapJoinResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Handshake::InitAsDefaultInstance() {
}
class Handshake::_Internal {
 public:
  using HasBits = decltype(std::declval<Handshake>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_xid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Handshake::Handshake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.Handshake)
}
Handshake::Handshake(const Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_ip()) {
    public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_ip(),
      GetArena());
  }
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_xid()) {
    xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_xid(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&public_port_) -
    reinterpret_cast<char*>(&type_)) + sizeof(public_port_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.Handshake)
}

void Handshake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Handshake_kadmlia_2eproto.base);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&public_port_) -
      reinterpret_cast<char*>(&type_)) + sizeof(public_port_));
}

Handshake::~Handshake() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.Handshake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Handshake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Handshake::ArenaDtor(void* object) {
  Handshake* _this = reinterpret_cast< Handshake* >(object);
  (void)_this;
}
void Handshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Handshake& Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Handshake_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      public_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      xid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&public_port_) -
        reinterpret_cast<char*>(&type_)) + sizeof(public_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 public_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_public_port(&has_bits);
          public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes xid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_xid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Handshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional bytes public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_ip(), target);
  }

  // optional int32 public_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_public_port(), target);
  }

  // optional bytes xid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_xid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.Handshake)
  return target;
}

size_t Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes public_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_ip());
    }

    // optional bytes xid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_xid());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 public_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_public_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.Handshake)
    MergeFrom(*source);
  }
}

void Handshake::MergeFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_ip(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_xid(from._internal_xid());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      public_port_ = from.public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handshake::CopyFrom(const Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handshake::IsInitialized() const {
  return true;
}

void Handshake::InternalSwap(Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_ip_.Swap(&other->public_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xid_.Swap(&other->xid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Handshake, public_port_)
      + sizeof(Handshake::public_port_)
      - PROTOBUF_FIELD_OFFSET(Handshake, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
class NodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeInfo>()._has_bits_);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_ip()) {
    public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_ip(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_xid()) {
    xid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_xid(),
      GetArena());
  }
  public_port_ = from.public_port_;
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_kadmlia_2eproto.base);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_port_ = 0;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      public_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      xid_.ClearNonDefaultToEmpty();
    }
  }
  public_port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes public_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 public_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_public_port(&has_bits);
          public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes xid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_xid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_ip(), target);
  }

  // optional int32 public_port = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_public_port(), target);
  }

  // optional bytes id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id(), target);
  }

  // optional bytes xid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_xid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes public_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_ip());
    }

    // optional bytes id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
    }

    // optional bytes xid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_xid());
    }

    // optional int32 public_port = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_public_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_ip(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_xid(from._internal_xid());
    }
    if (cached_has_bits & 0x00000008u) {
      public_port_ = from.public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_ip_.Swap(&other->public_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xid_.Swap(&other->xid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_port_, other->public_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindClosestNodesRequest::InitAsDefaultInstance() {
  ::top::kadmlia::protobuf::_FindClosestNodesRequest_default_instance_._instance.get_mutable()->src_nodeinfo_ = const_cast< ::top::kadmlia::protobuf::NodeInfo*>(
      ::top::kadmlia::protobuf::NodeInfo::internal_default_instance());
}
class FindClosestNodesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FindClosestNodesRequest>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::top::kadmlia::protobuf::NodeInfo& src_nodeinfo(const FindClosestNodesRequest* msg);
  static void set_has_src_nodeinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::top::kadmlia::protobuf::NodeInfo&
FindClosestNodesRequest::_Internal::src_nodeinfo(const FindClosestNodesRequest* msg) {
  return *msg->src_nodeinfo_;
}
FindClosestNodesRequest::FindClosestNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bloomfilter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.FindClosestNodesRequest)
}
FindClosestNodesRequest::FindClosestNodesRequest(const FindClosestNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bloomfilter_(from.bloomfilter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_target_id()) {
    target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_id(),
      GetArena());
  }
  if (from._internal_has_src_nodeinfo()) {
    src_nodeinfo_ = new ::top::kadmlia::protobuf::NodeInfo(*from.src_nodeinfo_);
  } else {
    src_nodeinfo_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.FindClosestNodesRequest)
}

void FindClosestNodesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindClosestNodesRequest_kadmlia_2eproto.base);
  target_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&src_nodeinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&src_nodeinfo_)) + sizeof(count_));
}

FindClosestNodesRequest::~FindClosestNodesRequest() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.FindClosestNodesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindClosestNodesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete src_nodeinfo_;
}

void FindClosestNodesRequest::ArenaDtor(void* object) {
  FindClosestNodesRequest* _this = reinterpret_cast< FindClosestNodesRequest* >(object);
  (void)_this;
}
void FindClosestNodesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindClosestNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindClosestNodesRequest& FindClosestNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindClosestNodesRequest_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void FindClosestNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bloomfilter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(src_nodeinfo_ != nullptr);
      src_nodeinfo_->Clear();
    }
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindClosestNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 bloomfilter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bloomfilter(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bloomfilter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_nodeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindClosestNodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // optional bytes target_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_id(), target);
  }

  // repeated uint64 bloomfilter = 3;
  for (int i = 0, n = this->_internal_bloomfilter_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bloomfilter(i), target);
  }

  // optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::src_nodeinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.FindClosestNodesRequest)
  return target;
}

size_t FindClosestNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bloomfilter = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bloomfilter_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bloomfilter_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes target_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_target_id());
    }

    // optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *src_nodeinfo_);
    }

    // optional uint32 count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindClosestNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindClosestNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindClosestNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.FindClosestNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.FindClosestNodesRequest)
    MergeFrom(*source);
  }
}

void FindClosestNodesRequest::MergeFrom(const FindClosestNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bloomfilter_.MergeFrom(from.bloomfilter_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target_id(from._internal_target_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_src_nodeinfo()->::top::kadmlia::protobuf::NodeInfo::MergeFrom(from._internal_src_nodeinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FindClosestNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindClosestNodesRequest::CopyFrom(const FindClosestNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.FindClosestNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindClosestNodesRequest::IsInitialized() const {
  return true;
}

void FindClosestNodesRequest::InternalSwap(FindClosestNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bloomfilter_.InternalSwap(&other->bloomfilter_);
  target_id_.Swap(&other->target_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindClosestNodesRequest, count_)
      + sizeof(FindClosestNodesRequest::count_)
      - PROTOBUF_FIELD_OFFSET(FindClosestNodesRequest, src_nodeinfo_)>(
          reinterpret_cast<char*>(&src_nodeinfo_),
          reinterpret_cast<char*>(&other->src_nodeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindClosestNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindClosestNodesResponse::InitAsDefaultInstance() {
}
class FindClosestNodesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FindClosestNodesResponse>()._has_bits_);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_public_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FindClosestNodesResponse::FindClosestNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.FindClosestNodesResponse)
}
FindClosestNodesResponse::FindClosestNodesResponse(const FindClosestNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_ip()) {
    public_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_ip(),
      GetArena());
  }
  public_port_ = from.public_port_;
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.FindClosestNodesResponse)
}

void FindClosestNodesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindClosestNodesResponse_kadmlia_2eproto.base);
  public_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_port_ = 0;
}

FindClosestNodesResponse::~FindClosestNodesResponse() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.FindClosestNodesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FindClosestNodesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindClosestNodesResponse::ArenaDtor(void* object) {
  FindClosestNodesResponse* _this = reinterpret_cast< FindClosestNodesResponse* >(object);
  (void)_this;
}
void FindClosestNodesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindClosestNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindClosestNodesResponse& FindClosestNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindClosestNodesResponse_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void FindClosestNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_ip_.ClearNonDefaultToEmpty();
  }
  public_port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindClosestNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_public_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 public_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_public_port(&has_bits);
          public_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindClosestNodesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_ip(), target);
  }

  // optional int32 public_port = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_public_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.FindClosestNodesResponse)
  return target;
}

size_t FindClosestNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes public_ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_ip());
    }

    // optional int32 public_port = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_public_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindClosestNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindClosestNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindClosestNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.FindClosestNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.FindClosestNodesResponse)
    MergeFrom(*source);
  }
}

void FindClosestNodesResponse::MergeFrom(const FindClosestNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_public_ip(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      public_port_ = from.public_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FindClosestNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindClosestNodesResponse::CopyFrom(const FindClosestNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.FindClosestNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindClosestNodesResponse::IsInitialized() const {
  return true;
}

void FindClosestNodesResponse::InternalSwap(FindClosestNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  public_ip_.Swap(&other->public_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(public_port_, other->public_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindClosestNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootCompleteNodeResponse::InitAsDefaultInstance() {
  ::top::kadmlia::protobuf::_RootCompleteNodeResponse_default_instance_._instance.get_mutable()->nodes_ = const_cast< ::top::kadmlia::protobuf::NodeInfo*>(
      ::top::kadmlia::protobuf::NodeInfo::internal_default_instance());
}
class RootCompleteNodeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RootCompleteNodeResponse>()._has_bits_);
  static const ::top::kadmlia::protobuf::NodeInfo& nodes(const RootCompleteNodeResponse* msg);
  static void set_has_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::top::kadmlia::protobuf::NodeInfo&
RootCompleteNodeResponse::_Internal::nodes(const RootCompleteNodeResponse* msg) {
  return *msg->nodes_;
}
RootCompleteNodeResponse::RootCompleteNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.RootCompleteNodeResponse)
}
RootCompleteNodeResponse::RootCompleteNodeResponse(const RootCompleteNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodes()) {
    nodes_ = new ::top::kadmlia::protobuf::NodeInfo(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.RootCompleteNodeResponse)
}

void RootCompleteNodeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootCompleteNodeResponse_kadmlia_2eproto.base);
  nodes_ = nullptr;
}

RootCompleteNodeResponse::~RootCompleteNodeResponse() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.RootCompleteNodeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootCompleteNodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete nodes_;
}

void RootCompleteNodeResponse::ArenaDtor(void* object) {
  RootCompleteNodeResponse* _this = reinterpret_cast< RootCompleteNodeResponse* >(object);
  (void)_this;
}
void RootCompleteNodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootCompleteNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootCompleteNodeResponse& RootCompleteNodeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootCompleteNodeResponse_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void RootCompleteNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nodes_ != nullptr);
    nodes_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootCompleteNodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootCompleteNodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::nodes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.RootCompleteNodeResponse)
  return target;
}

size_t RootCompleteNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootCompleteNodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RootCompleteNodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootCompleteNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.RootCompleteNodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.RootCompleteNodeResponse)
    MergeFrom(*source);
  }
}

void RootCompleteNodeResponse::MergeFrom(const RootCompleteNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodes()) {
    _internal_mutable_nodes()->::top::kadmlia::protobuf::NodeInfo::MergeFrom(from._internal_nodes());
  }
}

void RootCompleteNodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootCompleteNodeResponse::CopyFrom(const RootCompleteNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.RootCompleteNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootCompleteNodeResponse::IsInitialized() const {
  return true;
}

void RootCompleteNodeResponse::InternalSwap(RootCompleteNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nodes_, other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootCompleteNodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootCacheElectNodesRequest::InitAsDefaultInstance() {
}
class RootCacheElectNodesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RootCacheElectNodesRequest>()._has_bits_);
  static void set_has_des_service_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RootCacheElectNodesRequest::RootCacheElectNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.RootCacheElectNodesRequest)
}
RootCacheElectNodesRequest::RootCacheElectNodesRequest(const RootCacheElectNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&des_service_type_, &from.des_service_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&des_service_type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.RootCacheElectNodesRequest)
}

void RootCacheElectNodesRequest::SharedCtor() {
  ::memset(&des_service_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&des_service_type_)) + sizeof(count_));
}

RootCacheElectNodesRequest::~RootCacheElectNodesRequest() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootCacheElectNodesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RootCacheElectNodesRequest::ArenaDtor(void* object) {
  RootCacheElectNodesRequest* _this = reinterpret_cast< RootCacheElectNodesRequest* >(object);
  (void)_this;
}
void RootCacheElectNodesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootCacheElectNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootCacheElectNodesRequest& RootCacheElectNodesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootCacheElectNodesRequest_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void RootCacheElectNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&des_service_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&des_service_type_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootCacheElectNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 des_service_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_des_service_type(&has_bits);
          des_service_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootCacheElectNodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 des_service_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_des_service_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  return target;
}

size_t RootCacheElectNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 des_service_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_des_service_type());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootCacheElectNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RootCacheElectNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootCacheElectNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.RootCacheElectNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.RootCacheElectNodesRequest)
    MergeFrom(*source);
  }
}

void RootCacheElectNodesRequest::MergeFrom(const RootCacheElectNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      des_service_type_ = from.des_service_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RootCacheElectNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootCacheElectNodesRequest::CopyFrom(const RootCacheElectNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.RootCacheElectNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootCacheElectNodesRequest::IsInitialized() const {
  return true;
}

void RootCacheElectNodesRequest::InternalSwap(RootCacheElectNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RootCacheElectNodesRequest, count_)
      + sizeof(RootCacheElectNodesRequest::count_)
      - PROTOBUF_FIELD_OFFSET(RootCacheElectNodesRequest, des_service_type_)>(
          reinterpret_cast<char*>(&des_service_type_),
          reinterpret_cast<char*>(&other->des_service_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RootCacheElectNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootCacheElectNodesResponse::InitAsDefaultInstance() {
}
class RootCacheElectNodesResponse::_Internal {
 public:
};

RootCacheElectNodesResponse::RootCacheElectNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.RootCacheElectNodesResponse)
}
RootCacheElectNodesResponse::RootCacheElectNodesResponse(const RootCacheElectNodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.RootCacheElectNodesResponse)
}

void RootCacheElectNodesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootCacheElectNodesResponse_kadmlia_2eproto.base);
}

RootCacheElectNodesResponse::~RootCacheElectNodesResponse() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootCacheElectNodesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RootCacheElectNodesResponse::ArenaDtor(void* object) {
  RootCacheElectNodesResponse* _this = reinterpret_cast< RootCacheElectNodesResponse* >(object);
  (void)_this;
}
void RootCacheElectNodesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootCacheElectNodesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootCacheElectNodesResponse& RootCacheElectNodesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootCacheElectNodesResponse_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void RootCacheElectNodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootCacheElectNodesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootCacheElectNodesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  return target;
}

size_t RootCacheElectNodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootCacheElectNodesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RootCacheElectNodesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootCacheElectNodesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.RootCacheElectNodesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.RootCacheElectNodesResponse)
    MergeFrom(*source);
  }
}

void RootCacheElectNodesResponse::MergeFrom(const RootCacheElectNodesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void RootCacheElectNodesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootCacheElectNodesResponse::CopyFrom(const RootCacheElectNodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.RootCacheElectNodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootCacheElectNodesResponse::IsInitialized() const {
  return true;
}

void RootCacheElectNodesResponse::InternalSwap(RootCacheElectNodesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootCacheElectNodesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootMessage::InitAsDefaultInstance() {
}
class RootMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RootMessage>()._has_bits_);
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RootMessage::RootMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:top.kadmlia.protobuf.RootMessage)
}
RootMessage::RootMessage(const RootMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:top.kadmlia.protobuf.RootMessage)
}

void RootMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootMessage_kadmlia_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0u;
}

RootMessage::~RootMessage() {
  // @@protoc_insertion_point(destructor:top.kadmlia.protobuf.RootMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RootMessage::ArenaDtor(void* object) {
  RootMessage* _this = reinterpret_cast< RootMessage* >(object);
  (void)_this;
}
void RootMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootMessage& RootMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootMessage_kadmlia_2eproto.base);
  return *internal_default_instance();
}


void RootMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:top.kadmlia.protobuf.RootMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  message_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_type(&has_bits);
          message_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:top.kadmlia.protobuf.RootMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_type(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:top.kadmlia.protobuf.RootMessage)
  return target;
}

size_t RootMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:top.kadmlia.protobuf.RootMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint32 message_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:top.kadmlia.protobuf.RootMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RootMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:top.kadmlia.protobuf.RootMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:top.kadmlia.protobuf.RootMessage)
    MergeFrom(*source);
  }
}

void RootMessage::MergeFrom(const RootMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:top.kadmlia.protobuf.RootMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      message_type_ = from.message_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RootMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:top.kadmlia.protobuf.RootMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootMessage::CopyFrom(const RootMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:top.kadmlia.protobuf.RootMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootMessage::IsInitialized() const {
  return true;
}

void RootMessage::InternalSwap(RootMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RootMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace kadmlia
}  // namespace top
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::BootstrapJoinRequest* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::BootstrapJoinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::BootstrapJoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::BootstrapJoinResponse* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::BootstrapJoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::BootstrapJoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::Handshake* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::Handshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::NodeInfo* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::FindClosestNodesRequest* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::FindClosestNodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::FindClosestNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::FindClosestNodesResponse* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::FindClosestNodesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::FindClosestNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::RootCompleteNodeResponse* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::RootCompleteNodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::RootCompleteNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::RootCacheElectNodesRequest* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::RootCacheElectNodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::RootCacheElectNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::RootCacheElectNodesResponse* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::RootCacheElectNodesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::RootCacheElectNodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::top::kadmlia::protobuf::RootMessage* Arena::CreateMaybeMessage< ::top::kadmlia::protobuf::RootMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::top::kadmlia::protobuf::RootMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
