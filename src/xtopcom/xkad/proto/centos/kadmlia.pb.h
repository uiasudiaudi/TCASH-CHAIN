// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kadmlia.proto

#ifndef PROTOBUF_INCLUDED_kadmlia_2eproto
#define PROTOBUF_INCLUDED_kadmlia_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kadmlia_2eproto 

namespace protobuf_kadmlia_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kadmlia_2eproto
namespace top {
namespace kadmlia {
namespace protobuf {
class BootstrapJoinRequest;
class BootstrapJoinRequestDefaultTypeInternal;
extern BootstrapJoinRequestDefaultTypeInternal _BootstrapJoinRequest_default_instance_;
class BootstrapJoinResponse;
class BootstrapJoinResponseDefaultTypeInternal;
extern BootstrapJoinResponseDefaultTypeInternal _BootstrapJoinResponse_default_instance_;
class FindClosestNodesRequest;
class FindClosestNodesRequestDefaultTypeInternal;
extern FindClosestNodesRequestDefaultTypeInternal _FindClosestNodesRequest_default_instance_;
class FindClosestNodesResponse;
class FindClosestNodesResponseDefaultTypeInternal;
extern FindClosestNodesResponseDefaultTypeInternal _FindClosestNodesResponse_default_instance_;
class Handshake;
class HandshakeDefaultTypeInternal;
extern HandshakeDefaultTypeInternal _Handshake_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class RootCacheElectNodesRequest;
class RootCacheElectNodesRequestDefaultTypeInternal;
extern RootCacheElectNodesRequestDefaultTypeInternal _RootCacheElectNodesRequest_default_instance_;
class RootCacheElectNodesResponse;
class RootCacheElectNodesResponseDefaultTypeInternal;
extern RootCacheElectNodesResponseDefaultTypeInternal _RootCacheElectNodesResponse_default_instance_;
class RootCompleteNodeResponse;
class RootCompleteNodeResponseDefaultTypeInternal;
extern RootCompleteNodeResponseDefaultTypeInternal _RootCompleteNodeResponse_default_instance_;
class RootMessage;
class RootMessageDefaultTypeInternal;
extern RootMessageDefaultTypeInternal _RootMessage_default_instance_;
}  // namespace protobuf
}  // namespace kadmlia
}  // namespace top
namespace google {
namespace protobuf {
template<> ::top::kadmlia::protobuf::BootstrapJoinRequest* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::BootstrapJoinRequest>(Arena*);
template<> ::top::kadmlia::protobuf::BootstrapJoinResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::BootstrapJoinResponse>(Arena*);
template<> ::top::kadmlia::protobuf::FindClosestNodesRequest* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::FindClosestNodesRequest>(Arena*);
template<> ::top::kadmlia::protobuf::FindClosestNodesResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::FindClosestNodesResponse>(Arena*);
template<> ::top::kadmlia::protobuf::Handshake* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::Handshake>(Arena*);
template<> ::top::kadmlia::protobuf::NodeInfo* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::NodeInfo>(Arena*);
template<> ::top::kadmlia::protobuf::RootCacheElectNodesRequest* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootCacheElectNodesRequest>(Arena*);
template<> ::top::kadmlia::protobuf::RootCacheElectNodesResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootCacheElectNodesResponse>(Arena*);
template<> ::top::kadmlia::protobuf::RootCompleteNodeResponse* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootCompleteNodeResponse>(Arena*);
template<> ::top::kadmlia::protobuf::RootMessage* Arena::CreateMaybeMessage<::top::kadmlia::protobuf::RootMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace top {
namespace kadmlia {
namespace protobuf {

// ===================================================================

class BootstrapJoinRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.BootstrapJoinRequest) */ {
 public:
  BootstrapJoinRequest();
  virtual ~BootstrapJoinRequest();

  BootstrapJoinRequest(const BootstrapJoinRequest& from);

  inline BootstrapJoinRequest& operator=(const BootstrapJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BootstrapJoinRequest(BootstrapJoinRequest&& from) noexcept
    : BootstrapJoinRequest() {
    *this = ::std::move(from);
  }

  inline BootstrapJoinRequest& operator=(BootstrapJoinRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapJoinRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapJoinRequest* internal_default_instance() {
    return reinterpret_cast<const BootstrapJoinRequest*>(
               &_BootstrapJoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BootstrapJoinRequest* other);
  friend void swap(BootstrapJoinRequest& a, BootstrapJoinRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BootstrapJoinRequest* New() const final {
    return CreateMaybeMessage<BootstrapJoinRequest>(NULL);
  }

  BootstrapJoinRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapJoinRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BootstrapJoinRequest& from);
  void MergeFrom(const BootstrapJoinRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapJoinRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes xid = 1;
  bool has_xid() const;
  void clear_xid();
  static const int kXidFieldNumber = 1;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.BootstrapJoinRequest)
 private:
  void set_has_xid();
  void clear_has_xid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BootstrapJoinResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.BootstrapJoinResponse) */ {
 public:
  BootstrapJoinResponse();
  virtual ~BootstrapJoinResponse();

  BootstrapJoinResponse(const BootstrapJoinResponse& from);

  inline BootstrapJoinResponse& operator=(const BootstrapJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BootstrapJoinResponse(BootstrapJoinResponse&& from) noexcept
    : BootstrapJoinResponse() {
    *this = ::std::move(from);
  }

  inline BootstrapJoinResponse& operator=(BootstrapJoinResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapJoinResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapJoinResponse* internal_default_instance() {
    return reinterpret_cast<const BootstrapJoinResponse*>(
               &_BootstrapJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BootstrapJoinResponse* other);
  friend void swap(BootstrapJoinResponse& a, BootstrapJoinResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BootstrapJoinResponse* New() const final {
    return CreateMaybeMessage<BootstrapJoinResponse>(NULL);
  }

  BootstrapJoinResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapJoinResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BootstrapJoinResponse& from);
  void MergeFrom(const BootstrapJoinResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapJoinResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 1;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bytes bootstrap_id = 3;
  bool has_bootstrap_id() const;
  void clear_bootstrap_id();
  static const int kBootstrapIdFieldNumber = 3;
  const ::std::string& bootstrap_id() const;
  void set_bootstrap_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bootstrap_id(::std::string&& value);
  #endif
  void set_bootstrap_id(const char* value);
  void set_bootstrap_id(const void* value, size_t size);
  ::std::string* mutable_bootstrap_id();
  ::std::string* release_bootstrap_id();
  void set_allocated_bootstrap_id(::std::string* bootstrap_id);

  // optional bytes xid = 4;
  bool has_xid() const;
  void clear_xid();
  static const int kXidFieldNumber = 4;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // optional int32 public_port = 2;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 2;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.BootstrapJoinResponse)
 private:
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();
  void set_has_bootstrap_id();
  void clear_has_bootstrap_id();
  void set_has_xid();
  void clear_has_xid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::internal::ArenaStringPtr bootstrap_id_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Handshake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.Handshake) */ {
 public:
  Handshake();
  virtual ~Handshake();

  Handshake(const Handshake& from);

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Handshake(Handshake&& from) noexcept
    : Handshake() {
    *this = ::std::move(from);
  }

  inline Handshake& operator=(Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Handshake* internal_default_instance() {
    return reinterpret_cast<const Handshake*>(
               &_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Handshake* other);
  friend void swap(Handshake& a, Handshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Handshake* New() const final {
    return CreateMaybeMessage<Handshake>(NULL);
  }

  Handshake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Handshake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Handshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bytes xid = 4;
  bool has_xid() const;
  void clear_xid();
  static const int kXidFieldNumber = 4;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // optional int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 public_port = 3;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.Handshake)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();
  void set_has_xid();
  void clear_has_xid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(NULL);
  }

  NodeInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes public_ip = 1;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 1;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional bytes id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional bytes xid = 4;
  bool has_xid() const;
  void clear_xid();
  static const int kXidFieldNumber = 4;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // optional int32 public_port = 2;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 2;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.NodeInfo)
 private:
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();
  void set_has_id();
  void clear_has_id();
  void set_has_xid();
  void clear_has_xid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindClosestNodesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.FindClosestNodesRequest) */ {
 public:
  FindClosestNodesRequest();
  virtual ~FindClosestNodesRequest();

  FindClosestNodesRequest(const FindClosestNodesRequest& from);

  inline FindClosestNodesRequest& operator=(const FindClosestNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindClosestNodesRequest(FindClosestNodesRequest&& from) noexcept
    : FindClosestNodesRequest() {
    *this = ::std::move(from);
  }

  inline FindClosestNodesRequest& operator=(FindClosestNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindClosestNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindClosestNodesRequest* internal_default_instance() {
    return reinterpret_cast<const FindClosestNodesRequest*>(
               &_FindClosestNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FindClosestNodesRequest* other);
  friend void swap(FindClosestNodesRequest& a, FindClosestNodesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindClosestNodesRequest* New() const final {
    return CreateMaybeMessage<FindClosestNodesRequest>(NULL);
  }

  FindClosestNodesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindClosestNodesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindClosestNodesRequest& from);
  void MergeFrom(const FindClosestNodesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindClosestNodesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 bloomfilter = 3;
  int bloomfilter_size() const;
  void clear_bloomfilter();
  static const int kBloomfilterFieldNumber = 3;
  ::google::protobuf::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::google::protobuf::uint64 value);
  void add_bloomfilter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bloomfilter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bloomfilter();

  // optional bytes target_id = 2;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  const ::std::string& target_id() const;
  void set_target_id(const ::std::string& value);
  #if LANG_CXX11
  void set_target_id(::std::string&& value);
  #endif
  void set_target_id(const char* value);
  void set_target_id(const void* value, size_t size);
  ::std::string* mutable_target_id();
  ::std::string* release_target_id();
  void set_allocated_target_id(::std::string* target_id);

  // optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
  bool has_src_nodeinfo() const;
  void clear_src_nodeinfo();
  static const int kSrcNodeinfoFieldNumber = 4;
  private:
  const ::top::kadmlia::protobuf::NodeInfo& _internal_src_nodeinfo() const;
  public:
  const ::top::kadmlia::protobuf::NodeInfo& src_nodeinfo() const;
  ::top::kadmlia::protobuf::NodeInfo* release_src_nodeinfo();
  ::top::kadmlia::protobuf::NodeInfo* mutable_src_nodeinfo();
  void set_allocated_src_nodeinfo(::top::kadmlia::protobuf::NodeInfo* src_nodeinfo);

  // optional uint32 count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.FindClosestNodesRequest)
 private:
  void set_has_count();
  void clear_has_count();
  void set_has_target_id();
  void clear_has_target_id();
  void set_has_src_nodeinfo();
  void clear_has_src_nodeinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bloomfilter_;
  ::google::protobuf::internal::ArenaStringPtr target_id_;
  ::top::kadmlia::protobuf::NodeInfo* src_nodeinfo_;
  ::google::protobuf::uint32 count_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindClosestNodesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.FindClosestNodesResponse) */ {
 public:
  FindClosestNodesResponse();
  virtual ~FindClosestNodesResponse();

  FindClosestNodesResponse(const FindClosestNodesResponse& from);

  inline FindClosestNodesResponse& operator=(const FindClosestNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindClosestNodesResponse(FindClosestNodesResponse&& from) noexcept
    : FindClosestNodesResponse() {
    *this = ::std::move(from);
  }

  inline FindClosestNodesResponse& operator=(FindClosestNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindClosestNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindClosestNodesResponse* internal_default_instance() {
    return reinterpret_cast<const FindClosestNodesResponse*>(
               &_FindClosestNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FindClosestNodesResponse* other);
  friend void swap(FindClosestNodesResponse& a, FindClosestNodesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindClosestNodesResponse* New() const final {
    return CreateMaybeMessage<FindClosestNodesResponse>(NULL);
  }

  FindClosestNodesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindClosestNodesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindClosestNodesResponse& from);
  void MergeFrom(const FindClosestNodesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindClosestNodesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::top::kadmlia::protobuf::NodeInfo* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
      mutable_nodes();
  const ::top::kadmlia::protobuf::NodeInfo& nodes(int index) const;
  ::top::kadmlia::protobuf::NodeInfo* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
      nodes() const;

  // optional bytes public_ip = 2;
  bool has_public_ip() const;
  void clear_public_ip();
  static const int kPublicIpFieldNumber = 2;
  const ::std::string& public_ip() const;
  void set_public_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_public_ip(::std::string&& value);
  #endif
  void set_public_ip(const char* value);
  void set_public_ip(const void* value, size_t size);
  ::std::string* mutable_public_ip();
  ::std::string* release_public_ip();
  void set_allocated_public_ip(::std::string* public_ip);

  // optional int32 public_port = 3;
  bool has_public_port() const;
  void clear_public_port();
  static const int kPublicPortFieldNumber = 3;
  ::google::protobuf::int32 public_port() const;
  void set_public_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.FindClosestNodesResponse)
 private:
  void set_has_public_ip();
  void clear_has_public_ip();
  void set_has_public_port();
  void clear_has_public_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo > nodes_;
  ::google::protobuf::internal::ArenaStringPtr public_ip_;
  ::google::protobuf::int32 public_port_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RootCompleteNodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootCompleteNodeResponse) */ {
 public:
  RootCompleteNodeResponse();
  virtual ~RootCompleteNodeResponse();

  RootCompleteNodeResponse(const RootCompleteNodeResponse& from);

  inline RootCompleteNodeResponse& operator=(const RootCompleteNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RootCompleteNodeResponse(RootCompleteNodeResponse&& from) noexcept
    : RootCompleteNodeResponse() {
    *this = ::std::move(from);
  }

  inline RootCompleteNodeResponse& operator=(RootCompleteNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RootCompleteNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootCompleteNodeResponse* internal_default_instance() {
    return reinterpret_cast<const RootCompleteNodeResponse*>(
               &_RootCompleteNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RootCompleteNodeResponse* other);
  friend void swap(RootCompleteNodeResponse& a, RootCompleteNodeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RootCompleteNodeResponse* New() const final {
    return CreateMaybeMessage<RootCompleteNodeResponse>(NULL);
  }

  RootCompleteNodeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RootCompleteNodeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RootCompleteNodeResponse& from);
  void MergeFrom(const RootCompleteNodeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootCompleteNodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
  bool has_nodes() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  private:
  const ::top::kadmlia::protobuf::NodeInfo& _internal_nodes() const;
  public:
  const ::top::kadmlia::protobuf::NodeInfo& nodes() const;
  ::top::kadmlia::protobuf::NodeInfo* release_nodes();
  ::top::kadmlia::protobuf::NodeInfo* mutable_nodes();
  void set_allocated_nodes(::top::kadmlia::protobuf::NodeInfo* nodes);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootCompleteNodeResponse)
 private:
  void set_has_nodes();
  void clear_has_nodes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::top::kadmlia::protobuf::NodeInfo* nodes_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RootCacheElectNodesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootCacheElectNodesRequest) */ {
 public:
  RootCacheElectNodesRequest();
  virtual ~RootCacheElectNodesRequest();

  RootCacheElectNodesRequest(const RootCacheElectNodesRequest& from);

  inline RootCacheElectNodesRequest& operator=(const RootCacheElectNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RootCacheElectNodesRequest(RootCacheElectNodesRequest&& from) noexcept
    : RootCacheElectNodesRequest() {
    *this = ::std::move(from);
  }

  inline RootCacheElectNodesRequest& operator=(RootCacheElectNodesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RootCacheElectNodesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootCacheElectNodesRequest* internal_default_instance() {
    return reinterpret_cast<const RootCacheElectNodesRequest*>(
               &_RootCacheElectNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RootCacheElectNodesRequest* other);
  friend void swap(RootCacheElectNodesRequest& a, RootCacheElectNodesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RootCacheElectNodesRequest* New() const final {
    return CreateMaybeMessage<RootCacheElectNodesRequest>(NULL);
  }

  RootCacheElectNodesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RootCacheElectNodesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RootCacheElectNodesRequest& from);
  void MergeFrom(const RootCacheElectNodesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootCacheElectNodesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 des_service_type = 1;
  bool has_des_service_type() const;
  void clear_des_service_type();
  static const int kDesServiceTypeFieldNumber = 1;
  ::google::protobuf::uint64 des_service_type() const;
  void set_des_service_type(::google::protobuf::uint64 value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootCacheElectNodesRequest)
 private:
  void set_has_des_service_type();
  void clear_has_des_service_type();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 des_service_type_;
  ::google::protobuf::uint32 count_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RootCacheElectNodesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootCacheElectNodesResponse) */ {
 public:
  RootCacheElectNodesResponse();
  virtual ~RootCacheElectNodesResponse();

  RootCacheElectNodesResponse(const RootCacheElectNodesResponse& from);

  inline RootCacheElectNodesResponse& operator=(const RootCacheElectNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RootCacheElectNodesResponse(RootCacheElectNodesResponse&& from) noexcept
    : RootCacheElectNodesResponse() {
    *this = ::std::move(from);
  }

  inline RootCacheElectNodesResponse& operator=(RootCacheElectNodesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RootCacheElectNodesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootCacheElectNodesResponse* internal_default_instance() {
    return reinterpret_cast<const RootCacheElectNodesResponse*>(
               &_RootCacheElectNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RootCacheElectNodesResponse* other);
  friend void swap(RootCacheElectNodesResponse& a, RootCacheElectNodesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RootCacheElectNodesResponse* New() const final {
    return CreateMaybeMessage<RootCacheElectNodesResponse>(NULL);
  }

  RootCacheElectNodesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RootCacheElectNodesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RootCacheElectNodesResponse& from);
  void MergeFrom(const RootCacheElectNodesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootCacheElectNodesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::top::kadmlia::protobuf::NodeInfo* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
      mutable_nodes();
  const ::top::kadmlia::protobuf::NodeInfo& nodes(int index) const;
  ::top::kadmlia::protobuf::NodeInfo* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootCacheElectNodesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo > nodes_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RootMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.kadmlia.protobuf.RootMessage) */ {
 public:
  RootMessage();
  virtual ~RootMessage();

  RootMessage(const RootMessage& from);

  inline RootMessage& operator=(const RootMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RootMessage(RootMessage&& from) noexcept
    : RootMessage() {
    *this = ::std::move(from);
  }

  inline RootMessage& operator=(RootMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RootMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootMessage* internal_default_instance() {
    return reinterpret_cast<const RootMessage*>(
               &_RootMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RootMessage* other);
  friend void swap(RootMessage& a, RootMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RootMessage* New() const final {
    return CreateMaybeMessage<RootMessage>(NULL);
  }

  RootMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RootMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RootMessage& from);
  void MergeFrom(const RootMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional uint32 message_type = 1;
  bool has_message_type() const;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::google::protobuf::uint32 message_type() const;
  void set_message_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:top.kadmlia.protobuf.RootMessage)
 private:
  void set_has_message_type();
  void clear_has_message_type();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 message_type_;
  friend struct ::protobuf_kadmlia_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BootstrapJoinRequest

// optional bytes xid = 1;
inline bool BootstrapJoinRequest::has_xid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootstrapJoinRequest::set_has_xid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BootstrapJoinRequest::clear_has_xid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BootstrapJoinRequest::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xid();
}
inline const ::std::string& BootstrapJoinRequest::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  return xid_.GetNoArena();
}
inline void BootstrapJoinRequest::set_xid(const ::std::string& value) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
#if LANG_CXX11
inline void BootstrapJoinRequest::set_xid(::std::string&& value) {
  set_has_xid();
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
#endif
inline void BootstrapJoinRequest::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline void BootstrapJoinRequest::set_xid(const void* value, size_t size) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}
inline ::std::string* BootstrapJoinRequest::mutable_xid() {
  set_has_xid();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapJoinRequest::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
  if (!has_xid()) {
    return NULL;
  }
  clear_has_xid();
  return xid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapJoinRequest::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    set_has_xid();
  } else {
    clear_has_xid();
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinRequest.xid)
}

// -------------------------------------------------------------------

// BootstrapJoinResponse

// optional bytes public_ip = 1;
inline bool BootstrapJoinResponse::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootstrapJoinResponse::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BootstrapJoinResponse::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BootstrapJoinResponse::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& BootstrapJoinResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  return public_ip_.GetNoArena();
}
inline void BootstrapJoinResponse::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
#if LANG_CXX11
inline void BootstrapJoinResponse::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
#endif
inline void BootstrapJoinResponse::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline void BootstrapJoinResponse::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}
inline ::std::string* BootstrapJoinResponse::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapJoinResponse::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapJoinResponse::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.public_ip)
}

// optional int32 public_port = 2;
inline bool BootstrapJoinResponse::has_public_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BootstrapJoinResponse::set_has_public_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BootstrapJoinResponse::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BootstrapJoinResponse::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 BootstrapJoinResponse::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.public_port)
  return public_port_;
}
inline void BootstrapJoinResponse::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.public_port)
}

// optional bytes bootstrap_id = 3;
inline bool BootstrapJoinResponse::has_bootstrap_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BootstrapJoinResponse::set_has_bootstrap_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BootstrapJoinResponse::clear_has_bootstrap_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BootstrapJoinResponse::clear_bootstrap_id() {
  bootstrap_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bootstrap_id();
}
inline const ::std::string& BootstrapJoinResponse::bootstrap_id() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  return bootstrap_id_.GetNoArena();
}
inline void BootstrapJoinResponse::set_bootstrap_id(const ::std::string& value) {
  set_has_bootstrap_id();
  bootstrap_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
#if LANG_CXX11
inline void BootstrapJoinResponse::set_bootstrap_id(::std::string&& value) {
  set_has_bootstrap_id();
  bootstrap_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
#endif
inline void BootstrapJoinResponse::set_bootstrap_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bootstrap_id();
  bootstrap_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline void BootstrapJoinResponse::set_bootstrap_id(const void* value, size_t size) {
  set_has_bootstrap_id();
  bootstrap_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}
inline ::std::string* BootstrapJoinResponse::mutable_bootstrap_id() {
  set_has_bootstrap_id();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  return bootstrap_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapJoinResponse::release_bootstrap_id() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
  if (!has_bootstrap_id()) {
    return NULL;
  }
  clear_has_bootstrap_id();
  return bootstrap_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapJoinResponse::set_allocated_bootstrap_id(::std::string* bootstrap_id) {
  if (bootstrap_id != NULL) {
    set_has_bootstrap_id();
  } else {
    clear_has_bootstrap_id();
  }
  bootstrap_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bootstrap_id);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.bootstrap_id)
}

// optional bytes xid = 4;
inline bool BootstrapJoinResponse::has_xid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BootstrapJoinResponse::set_has_xid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BootstrapJoinResponse::clear_has_xid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BootstrapJoinResponse::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xid();
}
inline const ::std::string& BootstrapJoinResponse::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  return xid_.GetNoArena();
}
inline void BootstrapJoinResponse::set_xid(const ::std::string& value) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
#if LANG_CXX11
inline void BootstrapJoinResponse::set_xid(::std::string&& value) {
  set_has_xid();
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
#endif
inline void BootstrapJoinResponse::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline void BootstrapJoinResponse::set_xid(const void* value, size_t size) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}
inline ::std::string* BootstrapJoinResponse::mutable_xid() {
  set_has_xid();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BootstrapJoinResponse::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
  if (!has_xid()) {
    return NULL;
  }
  clear_has_xid();
  return xid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BootstrapJoinResponse::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    set_has_xid();
  } else {
    clear_has_xid();
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.BootstrapJoinResponse.xid)
}

// -------------------------------------------------------------------

// Handshake

// optional int32 type = 1;
inline bool Handshake::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Handshake::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Handshake::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Handshake::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Handshake::type() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.type)
  return type_;
}
inline void Handshake::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.type)
}

// optional bytes public_ip = 2;
inline bool Handshake::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Handshake::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Handshake::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Handshake::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& Handshake::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.public_ip)
  return public_ip_.GetNoArena();
}
inline void Handshake::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.public_ip)
}
#if LANG_CXX11
inline void Handshake::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.Handshake.public_ip)
}
#endif
inline void Handshake::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.Handshake.public_ip)
}
inline void Handshake::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.Handshake.public_ip)
}
inline ::std::string* Handshake::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.Handshake.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handshake::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.Handshake.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.Handshake.public_ip)
}

// optional int32 public_port = 3;
inline bool Handshake::has_public_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Handshake::set_has_public_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Handshake::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Handshake::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 Handshake::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.public_port)
  return public_port_;
}
inline void Handshake::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.public_port)
}

// optional bytes xid = 4;
inline bool Handshake::has_xid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Handshake::set_has_xid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Handshake::clear_has_xid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Handshake::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xid();
}
inline const ::std::string& Handshake::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.Handshake.xid)
  return xid_.GetNoArena();
}
inline void Handshake::set_xid(const ::std::string& value) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.Handshake.xid)
}
#if LANG_CXX11
inline void Handshake::set_xid(::std::string&& value) {
  set_has_xid();
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.Handshake.xid)
}
#endif
inline void Handshake::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.Handshake.xid)
}
inline void Handshake::set_xid(const void* value, size_t size) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.Handshake.xid)
}
inline ::std::string* Handshake::mutable_xid() {
  set_has_xid();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.Handshake.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Handshake::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.Handshake.xid)
  if (!has_xid()) {
    return NULL;
  }
  clear_has_xid();
  return xid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Handshake::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    set_has_xid();
  } else {
    clear_has_xid();
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.Handshake.xid)
}

// -------------------------------------------------------------------

// NodeInfo

// optional bytes public_ip = 1;
inline bool NodeInfo::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& NodeInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.public_ip)
  return public_ip_.GetNoArena();
}
inline void NodeInfo::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.public_ip)
}
#if LANG_CXX11
inline void NodeInfo::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.NodeInfo.public_ip)
}
#endif
inline void NodeInfo::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline void NodeInfo::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.NodeInfo.public_ip)
}
inline ::std::string* NodeInfo::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.NodeInfo.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.NodeInfo.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.NodeInfo.public_ip)
}

// optional int32 public_port = 2;
inline bool NodeInfo::has_public_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeInfo::set_has_public_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeInfo::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeInfo::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 NodeInfo::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.public_port)
  return public_port_;
}
inline void NodeInfo::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.public_port)
}

// optional bytes id = 3;
inline bool NodeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& NodeInfo::id() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.id)
  return id_.GetNoArena();
}
inline void NodeInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.id)
}
#if LANG_CXX11
inline void NodeInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.NodeInfo.id)
}
#endif
inline void NodeInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.NodeInfo.id)
}
inline void NodeInfo::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.NodeInfo.id)
}
inline ::std::string* NodeInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.NodeInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_id() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.NodeInfo.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.NodeInfo.id)
}

// optional bytes xid = 4;
inline bool NodeInfo::has_xid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeInfo::set_has_xid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeInfo::clear_has_xid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeInfo::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xid();
}
inline const ::std::string& NodeInfo::xid() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.NodeInfo.xid)
  return xid_.GetNoArena();
}
inline void NodeInfo::set_xid(const ::std::string& value) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.NodeInfo.xid)
}
#if LANG_CXX11
inline void NodeInfo::set_xid(::std::string&& value) {
  set_has_xid();
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.NodeInfo.xid)
}
#endif
inline void NodeInfo::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.NodeInfo.xid)
}
inline void NodeInfo::set_xid(const void* value, size_t size) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.NodeInfo.xid)
}
inline ::std::string* NodeInfo::mutable_xid() {
  set_has_xid();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.NodeInfo.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeInfo::release_xid() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.NodeInfo.xid)
  if (!has_xid()) {
    return NULL;
  }
  clear_has_xid();
  return xid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    set_has_xid();
  } else {
    clear_has_xid();
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.NodeInfo.xid)
}

// -------------------------------------------------------------------

// FindClosestNodesRequest

// optional uint32 count = 1;
inline bool FindClosestNodesRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FindClosestNodesRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FindClosestNodesRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FindClosestNodesRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 FindClosestNodesRequest::count() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.count)
  return count_;
}
inline void FindClosestNodesRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesRequest.count)
}

// optional bytes target_id = 2;
inline bool FindClosestNodesRequest::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindClosestNodesRequest::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindClosestNodesRequest::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindClosestNodesRequest::clear_target_id() {
  target_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_id();
}
inline const ::std::string& FindClosestNodesRequest::target_id() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  return target_id_.GetNoArena();
}
inline void FindClosestNodesRequest::set_target_id(const ::std::string& value) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
#if LANG_CXX11
inline void FindClosestNodesRequest::set_target_id(::std::string&& value) {
  set_has_target_id();
  target_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
#endif
inline void FindClosestNodesRequest::set_target_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline void FindClosestNodesRequest::set_target_id(const void* value, size_t size) {
  set_has_target_id();
  target_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}
inline ::std::string* FindClosestNodesRequest::mutable_target_id() {
  set_has_target_id();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  return target_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindClosestNodesRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
  if (!has_target_id()) {
    return NULL;
  }
  clear_has_target_id();
  return target_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindClosestNodesRequest::set_allocated_target_id(::std::string* target_id) {
  if (target_id != NULL) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  target_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_id);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.FindClosestNodesRequest.target_id)
}

// repeated uint64 bloomfilter = 3;
inline int FindClosestNodesRequest::bloomfilter_size() const {
  return bloomfilter_.size();
}
inline void FindClosestNodesRequest::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::google::protobuf::uint64 FindClosestNodesRequest::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
  return bloomfilter_.Get(index);
}
inline void FindClosestNodesRequest::set_bloomfilter(int index, ::google::protobuf::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
}
inline void FindClosestNodesRequest::add_bloomfilter(::google::protobuf::uint64 value) {
  bloomfilter_.Add(value);
  // @@protoc_insertion_point(field_add:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
FindClosestNodesRequest::bloomfilter() const {
  // @@protoc_insertion_point(field_list:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
  return bloomfilter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
FindClosestNodesRequest::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:top.kadmlia.protobuf.FindClosestNodesRequest.bloomfilter)
  return &bloomfilter_;
}

// optional .top.kadmlia.protobuf.NodeInfo src_nodeinfo = 4;
inline bool FindClosestNodesRequest::has_src_nodeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FindClosestNodesRequest::set_has_src_nodeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FindClosestNodesRequest::clear_has_src_nodeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FindClosestNodesRequest::clear_src_nodeinfo() {
  if (src_nodeinfo_ != NULL) src_nodeinfo_->Clear();
  clear_has_src_nodeinfo();
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesRequest::_internal_src_nodeinfo() const {
  return *src_nodeinfo_;
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesRequest::src_nodeinfo() const {
  const ::top::kadmlia::protobuf::NodeInfo* p = src_nodeinfo_;
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::top::kadmlia::protobuf::NodeInfo*>(
      &::top::kadmlia::protobuf::_NodeInfo_default_instance_);
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesRequest::release_src_nodeinfo() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
  clear_has_src_nodeinfo();
  ::top::kadmlia::protobuf::NodeInfo* temp = src_nodeinfo_;
  src_nodeinfo_ = NULL;
  return temp;
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesRequest::mutable_src_nodeinfo() {
  set_has_src_nodeinfo();
  if (src_nodeinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::top::kadmlia::protobuf::NodeInfo>(GetArenaNoVirtual());
    src_nodeinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
  return src_nodeinfo_;
}
inline void FindClosestNodesRequest::set_allocated_src_nodeinfo(::top::kadmlia::protobuf::NodeInfo* src_nodeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete src_nodeinfo_;
  }
  if (src_nodeinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      src_nodeinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, src_nodeinfo, submessage_arena);
    }
    set_has_src_nodeinfo();
  } else {
    clear_has_src_nodeinfo();
  }
  src_nodeinfo_ = src_nodeinfo;
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.FindClosestNodesRequest.src_nodeinfo)
}

// -------------------------------------------------------------------

// FindClosestNodesResponse

// repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
inline int FindClosestNodesResponse::nodes_size() const {
  return nodes_.size();
}
inline void FindClosestNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
FindClosestNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return &nodes_;
}
inline const ::top::kadmlia::protobuf::NodeInfo& FindClosestNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return nodes_.Get(index);
}
inline ::top::kadmlia::protobuf::NodeInfo* FindClosestNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
FindClosestNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:top.kadmlia.protobuf.FindClosestNodesResponse.nodes)
  return nodes_;
}

// optional bytes public_ip = 2;
inline bool FindClosestNodesResponse::has_public_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindClosestNodesResponse::set_has_public_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindClosestNodesResponse::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindClosestNodesResponse::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
inline const ::std::string& FindClosestNodesResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  return public_ip_.GetNoArena();
}
inline void FindClosestNodesResponse::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
#if LANG_CXX11
inline void FindClosestNodesResponse::set_public_ip(::std::string&& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
#endif
inline void FindClosestNodesResponse::set_public_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline void FindClosestNodesResponse::set_public_ip(const void* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}
inline ::std::string* FindClosestNodesResponse::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindClosestNodesResponse::release_public_ip() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
  if (!has_public_ip()) {
    return NULL;
  }
  clear_has_public_ip();
  return public_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindClosestNodesResponse::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.FindClosestNodesResponse.public_ip)
}

// optional int32 public_port = 3;
inline bool FindClosestNodesResponse::has_public_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FindClosestNodesResponse::set_has_public_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FindClosestNodesResponse::clear_has_public_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FindClosestNodesResponse::clear_public_port() {
  public_port_ = 0;
  clear_has_public_port();
}
inline ::google::protobuf::int32 FindClosestNodesResponse::public_port() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.FindClosestNodesResponse.public_port)
  return public_port_;
}
inline void FindClosestNodesResponse::set_public_port(::google::protobuf::int32 value) {
  set_has_public_port();
  public_port_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.FindClosestNodesResponse.public_port)
}

// -------------------------------------------------------------------

// RootCompleteNodeResponse

// optional .top.kadmlia.protobuf.NodeInfo nodes = 1;
inline bool RootCompleteNodeResponse::has_nodes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RootCompleteNodeResponse::set_has_nodes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RootCompleteNodeResponse::clear_has_nodes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RootCompleteNodeResponse::clear_nodes() {
  if (nodes_ != NULL) nodes_->Clear();
  clear_has_nodes();
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCompleteNodeResponse::_internal_nodes() const {
  return *nodes_;
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCompleteNodeResponse::nodes() const {
  const ::top::kadmlia::protobuf::NodeInfo* p = nodes_;
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
  return p != NULL ? *p : *reinterpret_cast<const ::top::kadmlia::protobuf::NodeInfo*>(
      &::top::kadmlia::protobuf::_NodeInfo_default_instance_);
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCompleteNodeResponse::release_nodes() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
  clear_has_nodes();
  ::top::kadmlia::protobuf::NodeInfo* temp = nodes_;
  nodes_ = NULL;
  return temp;
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCompleteNodeResponse::mutable_nodes() {
  set_has_nodes();
  if (nodes_ == NULL) {
    auto* p = CreateMaybeMessage<::top::kadmlia::protobuf::NodeInfo>(GetArenaNoVirtual());
    nodes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
  return nodes_;
}
inline void RootCompleteNodeResponse::set_allocated_nodes(::top::kadmlia::protobuf::NodeInfo* nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nodes_;
  }
  if (nodes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nodes, submessage_arena);
    }
    set_has_nodes();
  } else {
    clear_has_nodes();
  }
  nodes_ = nodes;
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.RootCompleteNodeResponse.nodes)
}

// -------------------------------------------------------------------

// RootCacheElectNodesRequest

// optional uint64 des_service_type = 1;
inline bool RootCacheElectNodesRequest::has_des_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RootCacheElectNodesRequest::set_has_des_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RootCacheElectNodesRequest::clear_has_des_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RootCacheElectNodesRequest::clear_des_service_type() {
  des_service_type_ = GOOGLE_ULONGLONG(0);
  clear_has_des_service_type();
}
inline ::google::protobuf::uint64 RootCacheElectNodesRequest::des_service_type() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCacheElectNodesRequest.des_service_type)
  return des_service_type_;
}
inline void RootCacheElectNodesRequest::set_des_service_type(::google::protobuf::uint64 value) {
  set_has_des_service_type();
  des_service_type_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootCacheElectNodesRequest.des_service_type)
}

// optional uint32 count = 2;
inline bool RootCacheElectNodesRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RootCacheElectNodesRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RootCacheElectNodesRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RootCacheElectNodesRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RootCacheElectNodesRequest::count() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCacheElectNodesRequest.count)
  return count_;
}
inline void RootCacheElectNodesRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootCacheElectNodesRequest.count)
}

// -------------------------------------------------------------------

// RootCacheElectNodesResponse

// repeated .top.kadmlia.protobuf.NodeInfo nodes = 1;
inline int RootCacheElectNodesResponse::nodes_size() const {
  return nodes_.size();
}
inline void RootCacheElectNodesResponse::clear_nodes() {
  nodes_.Clear();
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCacheElectNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >*
RootCacheElectNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return &nodes_;
}
inline const ::top::kadmlia::protobuf::NodeInfo& RootCacheElectNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return nodes_.Get(index);
}
inline ::top::kadmlia::protobuf::NodeInfo* RootCacheElectNodesResponse::add_nodes() {
  // @@protoc_insertion_point(field_add:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::top::kadmlia::protobuf::NodeInfo >&
RootCacheElectNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:top.kadmlia.protobuf.RootCacheElectNodesResponse.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// RootMessage

// optional uint32 message_type = 1;
inline bool RootMessage::has_message_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RootMessage::set_has_message_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RootMessage::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RootMessage::clear_message_type() {
  message_type_ = 0u;
  clear_has_message_type();
}
inline ::google::protobuf::uint32 RootMessage::message_type() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootMessage.message_type)
  return message_type_;
}
inline void RootMessage::set_message_type(::google::protobuf::uint32 value) {
  set_has_message_type();
  message_type_ = value;
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootMessage.message_type)
}

// optional bytes data = 2;
inline bool RootMessage::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RootMessage::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RootMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RootMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& RootMessage::data() const {
  // @@protoc_insertion_point(field_get:top.kadmlia.protobuf.RootMessage.data)
  return data_.GetNoArena();
}
inline void RootMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.kadmlia.protobuf.RootMessage.data)
}
#if LANG_CXX11
inline void RootMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.kadmlia.protobuf.RootMessage.data)
}
#endif
inline void RootMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.kadmlia.protobuf.RootMessage.data)
}
inline void RootMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.kadmlia.protobuf.RootMessage.data)
}
inline ::std::string* RootMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:top.kadmlia.protobuf.RootMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RootMessage::release_data() {
  // @@protoc_insertion_point(field_release:top.kadmlia.protobuf.RootMessage.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RootMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:top.kadmlia.protobuf.RootMessage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace kadmlia
}  // namespace top

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kadmlia_2eproto
